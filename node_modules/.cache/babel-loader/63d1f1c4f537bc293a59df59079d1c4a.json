{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n/**\n * Injectable ordering of event plugins.\n */\n\n\nvar EventPluginOrder = null;\n/**\n * Injectable mapping from names to event plugin modules.\n */\n\nvar namesToPlugins = {};\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\n\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    require('./React').__DEV__ === true ? invariant(pluginIndex > -1, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(pluginIndex > -1);\n\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n\n    require('./React').__DEV__ === true ? invariant(PluginModule.extractEvents, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(PluginModule.extractEvents);\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n\n    for (var eventName in publishedEvents) {\n      require('./React').__DEV__ === true ? invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName), 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName));\n    }\n  }\n}\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\n\n\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  require('./React').__DEV__ === true ? invariant(!EventPluginRegistry.eventNameDispatchConfigs[eventName], 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(!EventPluginRegistry.eventNameDispatchConfigs[eventName]);\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\n\n\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  require('./React').__DEV__ === true ? invariant(!EventPluginRegistry.registrationNameModules[registrationName], 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]);\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\n\n\nvar EventPluginRegistry = {\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    require('./React').__DEV__ === true ? invariant(!EventPluginOrder, 'EventPluginRegistry: Cannot inject event plugin ordering more than once.') : invariant(!EventPluginOrder); // Clone the ordering so it cannot be dynamically mutated.\n\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n\n      var PluginModule = injectedNamesToPlugins[pluginName];\n\n      if (namesToPlugins[pluginName] !== PluginModule) {\n        require('./React').__DEV__ === true ? invariant(!namesToPlugins[pluginName], 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(!namesToPlugins[pluginName]);\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n\n    EventPluginRegistry.plugins.length = 0;\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n};\nmodule.exports = EventPluginRegistry;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/EventPluginRegistry.js"],"names":["invariant","require","EventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","PluginModule","pluginIndex","indexOf","__DEV__","EventPluginRegistry","plugins","extractEvents","publishedEvents","eventTypes","eventName","publishEventForPlugin","dispatchConfig","eventNameDispatchConfigs","phasedRegistrationNames","phaseName","hasOwnProperty","phasedRegistrationName","publishRegistrationName","registrationName","registrationNameModules","registrationNameDependencies","dependencies","injectEventPluginOrder","InjectedEventPluginOrder","Array","prototype","slice","call","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getPluginModuleForEvent","event","phase","_resetEventPlugins","length","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    (require('./React').__DEV__ === true ? invariant(\n      pluginIndex > -1,\n      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +\n      'the plugin ordering, `%s`.',\n      pluginName\n    ) : invariant(pluginIndex > -1));\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    (require('./React').__DEV__ === true ? invariant(\n      PluginModule.extractEvents,\n      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +\n      'method, but `%s` does not.',\n      pluginName\n    ) : invariant(PluginModule.extractEvents));\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      (require('./React').__DEV__ === true ? invariant(\n        publishEventForPlugin(\n          publishedEvents[eventName],\n          PluginModule,\n          eventName\n        ),\n        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',\n        eventName,\n        pluginName\n      ) : invariant(publishEventForPlugin(\n        publishedEvents[eventName],\n        PluginModule,\n        eventName\n      )));\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  (require('./React').__DEV__ === true ? invariant(\n    !EventPluginRegistry.eventNameDispatchConfigs[eventName],\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'event name, `%s`.',\n    eventName\n  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs[eventName]));\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(\n          phasedRegistrationName,\n          PluginModule,\n          eventName\n        );\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(\n      dispatchConfig.registrationName,\n      PluginModule,\n      eventName\n    );\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  (require('./React').__DEV__ === true ? invariant(\n    !EventPluginRegistry.registrationNameModules[registrationName],\n    'EventPluginHub: More than one plugin attempted to publish the same ' +\n    'registration name, `%s`.',\n    registrationName\n  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] =\n    PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function(InjectedEventPluginOrder) {\n    (require('./React').__DEV__ === true ? invariant(\n      !EventPluginOrder,\n      'EventPluginRegistry: Cannot inject event plugin ordering more than once.'\n    ) : invariant(!EventPluginOrder));\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function(injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (namesToPlugins[pluginName] !== PluginModule) {\n        (require('./React').__DEV__ === true ? invariant(\n          !namesToPlugins[pluginName],\n          'EventPluginRegistry: Cannot inject two different event plugins ' +\n          'using the same name, `%s`.',\n          pluginName\n        ) : invariant(!namesToPlugins[pluginName]));\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function(event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[\n        dispatchConfig.registrationName\n      ] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[\n        dispatchConfig.phasedRegistrationNames[phase]\n      ];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function() {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;\n"]},"metadata":{},"sourceType":"script"}