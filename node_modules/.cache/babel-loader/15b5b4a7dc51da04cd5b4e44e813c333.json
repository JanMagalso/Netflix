{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPropagators\n */\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\n\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar accumulate = require(\"./accumulate\");\n\nvar forEachAccumulated = require(\"./forEachAccumulated\");\n\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\n\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\n\n\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if (require('./React').__DEV__ === true) {\n    if (!domID) {\n      throw new Error('Dispatching id must not be null');\n    }\n  }\n\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(domID, event, phase);\n\n  if (listener) {\n    event._dispatchListeners = accumulate(event._dispatchListeners, listener);\n    event._dispatchIDs = accumulate(event._dispatchIDs, domID);\n  }\n}\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We can not perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\n\n\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);\n  }\n}\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\n\n\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(id, registrationName);\n\n    if (listener) {\n      event._dispatchListeners = accumulate(event._dispatchListeners, listener);\n      event._dispatchIDs = accumulate(event._dispatchIDs, id);\n    }\n  }\n}\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\n\n\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);\n}\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\n\n\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\nmodule.exports = EventPropagators;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/EventPropagators.js"],"names":["EventConstants","require","EventPluginHub","accumulate","forEachAccumulated","PropagationPhases","getListener","listenerAtPhase","id","event","propagationPhase","registrationName","dispatchConfig","phasedRegistrationNames","accumulateDirectionalDispatches","domID","upwards","__DEV__","Error","phase","bubbled","captured","listener","_dispatchListeners","_dispatchIDs","accumulateTwoPhaseDispatchesSingle","injection","getInstanceHandle","traverseTwoPhase","dispatchMarker","accumulateDispatches","ignoredDirection","accumulateDirectDispatchesSingle","accumulateTwoPhaseDispatches","events","accumulateEnterLeaveDispatches","leave","enter","fromID","toID","traverseEnterLeave","accumulateDirectDispatches","EventPropagators","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPropagators\n */\n\n\"use strict\";\n\nvar EventConstants = require(\"./EventConstants\");\nvar EventPluginHub = require(\"./EventPluginHub\");\n\nvar accumulate = require(\"./accumulate\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\n\nvar PropagationPhases = EventConstants.PropagationPhases;\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(id, event, propagationPhase) {\n  var registrationName =\n    event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(id, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(domID, upwards, event) {\n  if (require('./React').__DEV__ === true) {\n    if (!domID) {\n      throw new Error('Dispatching id must not be null');\n    }\n  }\n  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;\n  var listener = listenerAtPhase(domID, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulate(event._dispatchListeners, listener);\n    event._dispatchIDs = accumulate(event._dispatchIDs, domID);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We can not perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(\n      event.dispatchMarker,\n      accumulateDirectionalDispatches,\n      event\n    );\n  }\n}\n\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(id, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(id, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulate(event._dispatchListeners, listener);\n      event._dispatchIDs = accumulate(event._dispatchIDs, id);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event.dispatchMarker, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {\n  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(\n    fromID,\n    toID,\n    accumulateDispatches,\n    leave,\n    enter\n  );\n}\n\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports = EventPropagators;\n"]},"metadata":{},"sourceType":"script"}