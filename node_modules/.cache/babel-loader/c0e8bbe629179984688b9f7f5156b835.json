{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule accumulate\n */\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n/**\n * Accumulates items that must not be null or undefined.\n *\n * This is used to conserve memory by avoiding array allocations.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\n\nfunction accumulate(current, next) {\n  require('./React').__DEV__ === true ? invariant(next != null, 'accumulate(...): Accumulated items must be not be null or undefined.') : invariant(next != null);\n\n  if (current == null) {\n    return next;\n  } else {\n    // Both are not empty. Warning: Never call x.concat(y) when you are not\n    // certain that x is an Array (x could be a string with concat method).\n    var currentIsArray = Array.isArray(current);\n    var nextIsArray = Array.isArray(next);\n\n    if (currentIsArray) {\n      return current.concat(next);\n    } else {\n      if (nextIsArray) {\n        return [current].concat(next);\n      } else {\n        return [current, next];\n      }\n    }\n  }\n}\n\nmodule.exports = accumulate;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/accumulate.js"],"names":["invariant","require","accumulate","current","next","__DEV__","currentIsArray","Array","isArray","nextIsArray","concat","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,IAA7B,EAAmC;AAChCH,EAAAA,OAAO,CAAC,SAAD,CAAP,CAAmBI,OAAnB,KAA+B,IAA/B,GAAsCL,SAAS,CAC9CI,IAAI,IAAI,IADsC,EAE9C,sEAF8C,CAA/C,GAGGJ,SAAS,CAACI,IAAI,IAAI,IAAT,CAHb;;AAIA,MAAID,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAOC,IAAP;AACD,GAFD,MAEO;AACL;AACA;AACA,QAAIE,cAAc,GAAGC,KAAK,CAACC,OAAN,CAAcL,OAAd,CAArB;AACA,QAAIM,WAAW,GAAGF,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAlB;;AACA,QAAIE,cAAJ,EAAoB;AAClB,aAAOH,OAAO,CAACO,MAAR,CAAeN,IAAf,CAAP;AACD,KAFD,MAEO;AACL,UAAIK,WAAJ,EAAiB;AACf,eAAO,CAACN,OAAD,EAAUO,MAAV,CAAiBN,IAAjB,CAAP;AACD,OAFD,MAEO;AACL,eAAO,CAACD,OAAD,EAAUC,IAAV,CAAP;AACD;AACF;AACF;AACF;;AAEDO,MAAM,CAACC,OAAP,GAAiBV,UAAjB","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule accumulate\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Accumulates items that must not be null or undefined.\n *\n * This is used to conserve memory by avoiding array allocations.\n *\n * @return {*|array<*>} An accumulation of items.\n */\nfunction accumulate(current, next) {\n  (require('./React').__DEV__ === true ? invariant(\n    next != null,\n    'accumulate(...): Accumulated items must be not be null or undefined.'\n  ) : invariant(next != null));\n  if (current == null) {\n    return next;\n  } else {\n    // Both are not empty. Warning: Never call x.concat(y) when you are not\n    // certain that x is an Array (x could be a string with concat method).\n    var currentIsArray = Array.isArray(current);\n    var nextIsArray = Array.isArray(next);\n    if (currentIsArray) {\n      return current.concat(next);\n    } else {\n      if (nextIsArray) {\n        return [current].concat(next);\n      } else {\n        return [current, next];\n      }\n    }\n  }\n}\n\nmodule.exports = accumulate;\n"]},"metadata":{},"sourceType":"script"}