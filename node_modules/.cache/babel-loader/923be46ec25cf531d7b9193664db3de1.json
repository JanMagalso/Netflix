{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginHub\n */\n\"use strict\";\n\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\n\nvar EventPluginUtils = require(\"./EventPluginUtils\");\n\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar accumulate = require(\"./accumulate\");\n\nvar forEachAccumulated = require(\"./forEachAccumulated\");\n\nvar invariant = require(\"./invariant\");\n\nvar isEventSupported = require(\"./isEventSupported\");\n\nvar monitorCodeUse = require(\"./monitorCodeUse\");\n/**\n * Internal store for event listeners\n */\n\n\nvar listenerBank = {};\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\n\nvar eventQueue = null;\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\n\nvar executeDispatchesAndRelease = function (event) {\n  if (event) {\n    var executeDispatch = EventPluginUtils.executeDispatch; // Plugins can provide custom behavior when dispatching events.\n\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);\n\n    if (PluginModule && PluginModule.executeDispatch) {\n      executeDispatch = PluginModule.executeDispatch;\n    }\n\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\n\n\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var invalid = !InstanceHandle || !InstanceHandle.traverseTwoPhase || !InstanceHandle.traverseEnterLeave;\n\n  if (invalid) {\n    throw new Error('InstanceHandle not injected before use!');\n  }\n}\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\n\n\nvar EventPluginHub = {\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n\n      if (require('./React').__DEV__ === true) {\n        validateInstanceHandle();\n      }\n    },\n    getInstanceHandle: function () {\n      if (require('./React').__DEV__ === true) {\n        validateInstanceHandle();\n      }\n\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n  },\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    require('./React').__DEV__ === true ? invariant(ExecutionEnvironment.canUseDOM, 'Cannot call putListener() in a non-DOM environment.') : invariant(ExecutionEnvironment.canUseDOM);\n    require('./React').__DEV__ === true ? invariant(!listener || typeof listener === 'function', 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(!listener || typeof listener === 'function');\n\n    if (require('./React').__DEV__ === true) {\n      // IE8 has no API for event capturing and the `onScroll` event doesn't\n      // bubble.\n      if (registrationName === 'onScroll' && !isEventSupported('scroll', true)) {\n        monitorCodeUse('react_no_scroll_event');\n        console.warn('This browser doesn\\'t support the `onScroll` event');\n      }\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent);\n\n        if (extractedEvents) {\n          events = accumulate(events, extractedEvents);\n        }\n      }\n    }\n\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulate(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function () {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    require('./React').__DEV__ === true ? invariant(!eventQueue, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(!eventQueue);\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n};\nmodule.exports = EventPluginHub;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/EventPluginHub.js"],"names":["EventPluginRegistry","require","EventPluginUtils","ExecutionEnvironment","accumulate","forEachAccumulated","invariant","isEventSupported","monitorCodeUse","listenerBank","eventQueue","executeDispatchesAndRelease","event","executeDispatch","PluginModule","getPluginModuleForEvent","executeDispatchesInOrder","isPersistent","constructor","release","InstanceHandle","validateInstanceHandle","invalid","traverseTwoPhase","traverseEnterLeave","Error","EventPluginHub","injection","injectMount","injectInstanceHandle","InjectedInstanceHandle","__DEV__","getInstanceHandle","injectEventPluginOrder","injectEventPluginsByName","eventNameDispatchConfigs","registrationNameModules","putListener","id","registrationName","listener","canUseDOM","console","warn","bankForRegistrationName","getListener","deleteListener","deleteAllListeners","extractEvents","topLevelType","topLevelTarget","topLevelTargetID","nativeEvent","events","plugins","i","l","length","possiblePlugin","extractedEvents","enqueueEvents","processEventQueue","processingEventQueue","__purge","__getListenerBank","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule EventPluginHub\n */\n\n\"use strict\";\n\nvar EventPluginRegistry = require(\"./EventPluginRegistry\");\nvar EventPluginUtils = require(\"./EventPluginUtils\");\nvar ExecutionEnvironment = require(\"./ExecutionEnvironment\");\n\nvar accumulate = require(\"./accumulate\");\nvar forEachAccumulated = require(\"./forEachAccumulated\");\nvar invariant = require(\"./invariant\");\nvar isEventSupported = require(\"./isEventSupported\");\nvar monitorCodeUse = require(\"./monitorCodeUse\");\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @private\n */\nvar executeDispatchesAndRelease = function(event) {\n  if (event) {\n    var executeDispatch = EventPluginUtils.executeDispatch;\n    // Plugins can provide custom behavior when dispatching events.\n    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);\n    if (PluginModule && PluginModule.executeDispatch) {\n      executeDispatch = PluginModule.executeDispatch;\n    }\n    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var invalid = !InstanceHandle||\n    !InstanceHandle.traverseTwoPhase ||\n    !InstanceHandle.traverseEnterLeave;\n  if (invalid) {\n    throw new Error('InstanceHandle not injected before use!');\n  }\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function(InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (require('./React').__DEV__ === true) {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function() {\n      if (require('./React').__DEV__ === true) {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function(id, registrationName, listener) {\n    (require('./React').__DEV__ === true ? invariant(\n      ExecutionEnvironment.canUseDOM,\n      'Cannot call putListener() in a non-DOM environment.'\n    ) : invariant(ExecutionEnvironment.canUseDOM));\n    (require('./React').__DEV__ === true ? invariant(\n      !listener || typeof listener === 'function',\n      'Expected %s listener to be a function, instead got type %s',\n      registrationName, typeof listener\n    ) : invariant(!listener || typeof listener === 'function'));\n\n    if (require('./React').__DEV__ === true) {\n      // IE8 has no API for event capturing and the `onScroll` event doesn't\n      // bubble.\n      if (registrationName === 'onScroll' &&\n          !isEventSupported('scroll', true)) {\n        monitorCodeUse('react_no_scroll_event');\n        console.warn('This browser doesn\\'t support the `onScroll` event');\n      }\n    }\n    var bankForRegistrationName =\n      listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function(id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function(id) {\n    for (var registrationName in listenerBank) {\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function(\n      topLevelType,\n      topLevelTarget,\n      topLevelTargetID,\n      nativeEvent) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0, l = plugins.length; i < l; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(\n          topLevelType,\n          topLevelTarget,\n          topLevelTargetID,\n          nativeEvent\n        );\n        if (extractedEvents) {\n          events = accumulate(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function(events) {\n    if (events) {\n      eventQueue = accumulate(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function() {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);\n    (require('./React').__DEV__ === true ? invariant(\n      !eventQueue,\n      'processEventQueue(): Additional events were enqueued while processing ' +\n      'an event queue. Support for this has not yet been implemented.'\n    ) : invariant(!eventQueue));\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function() {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function() {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;\n"]},"metadata":{},"sourceType":"script"}