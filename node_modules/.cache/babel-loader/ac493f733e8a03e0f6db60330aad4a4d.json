{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mergeHelpers\n *\n * requiresPolyfills: Array.isArray\n */\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\nvar keyMirror = require(\"./keyMirror\");\n/**\n * Maximum number of levels to traverse. Will catch circular structures.\n * @const\n */\n\n\nvar MAX_MERGE_DEPTH = 36;\n/**\n * We won't worry about edge cases like new String('x') or new Boolean(true).\n * Functions are considered terminals, and arrays are not.\n * @param {*} o The item/object/value to test.\n * @return {boolean} true iff the argument is a terminal.\n */\n\nvar isTerminal = function (o) {\n  return typeof o !== 'object' || o === null;\n};\n\nvar mergeHelpers = {\n  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,\n  isTerminal: isTerminal,\n\n  /**\n   * Converts null/undefined values into empty object.\n   *\n   * @param {?Object=} arg Argument to be normalized (nullable optional)\n   * @return {!Object}\n   */\n  normalizeMergeArg: function (arg) {\n    return arg === undefined || arg === null ? {} : arg;\n  },\n\n  /**\n   * If merging Arrays, a merge strategy *must* be supplied. If not, it is\n   * likely the caller's fault. If this function is ever called with anything\n   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.\n   *\n   * @param {*} one Array to merge into.\n   * @param {*} two Array to merge from.\n   */\n  checkMergeArrayArgs: function (one, two) {\n    require('./React').__DEV__ === true ? invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two) : invariant(Array.isArray(one) && Array.isArray(two));\n  },\n\n  /**\n   * @param {*} one Object to merge into.\n   * @param {*} two Object to merge from.\n   */\n  checkMergeObjectArgs: function (one, two) {\n    mergeHelpers.checkMergeObjectArg(one);\n    mergeHelpers.checkMergeObjectArg(two);\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeObjectArg: function (arg) {\n    require('./React').__DEV__ === true ? invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg) : invariant(!isTerminal(arg) && !Array.isArray(arg));\n  },\n\n  /**\n   * Checks that a merge was not given a circular object or an object that had\n   * too great of depth.\n   *\n   * @param {number} Level of recursion to validate against maximum.\n   */\n  checkMergeLevel: function (level) {\n    require('./React').__DEV__ === true ? invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.') : invariant(level < MAX_MERGE_DEPTH);\n  },\n\n  /**\n   * Checks that the supplied merge strategy is valid.\n   *\n   * @param {string} Array merge strategy.\n   */\n  checkArrayStrategy: function (strategy) {\n    require('./React').__DEV__ === true ? invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.') : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies);\n  },\n\n  /**\n   * Set of possible behaviors of merge algorithms when encountering two Arrays\n   * that must be merged together.\n   * - `clobber`: The left `Array` is ignored.\n   * - `indexByIndex`: The result is achieved by recursively deep merging at\n   *   each index. (not yet supported.)\n   */\n  ArrayStrategies: keyMirror({\n    Clobber: true,\n    IndexByIndex: true\n  })\n};\nmodule.exports = mergeHelpers;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/mergeHelpers.js"],"names":["invariant","require","keyMirror","MAX_MERGE_DEPTH","isTerminal","o","mergeHelpers","normalizeMergeArg","arg","undefined","checkMergeArrayArgs","one","two","__DEV__","Array","isArray","checkMergeObjectArgs","checkMergeObjectArg","checkMergeLevel","level","checkArrayStrategy","strategy","ArrayStrategies","Clobber","IndexByIndex","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule mergeHelpers\n *\n * requiresPolyfills: Array.isArray\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\n\n/**\n * Maximum number of levels to traverse. Will catch circular structures.\n * @const\n */\nvar MAX_MERGE_DEPTH = 36;\n\n/**\n * We won't worry about edge cases like new String('x') or new Boolean(true).\n * Functions are considered terminals, and arrays are not.\n * @param {*} o The item/object/value to test.\n * @return {boolean} true iff the argument is a terminal.\n */\nvar isTerminal = function(o) {\n  return typeof o !== 'object' || o === null;\n};\n\nvar mergeHelpers = {\n\n  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,\n\n  isTerminal: isTerminal,\n\n  /**\n   * Converts null/undefined values into empty object.\n   *\n   * @param {?Object=} arg Argument to be normalized (nullable optional)\n   * @return {!Object}\n   */\n  normalizeMergeArg: function(arg) {\n    return arg === undefined || arg === null ? {} : arg;\n  },\n\n  /**\n   * If merging Arrays, a merge strategy *must* be supplied. If not, it is\n   * likely the caller's fault. If this function is ever called with anything\n   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.\n   *\n   * @param {*} one Array to merge into.\n   * @param {*} two Array to merge from.\n   */\n  checkMergeArrayArgs: function(one, two) {\n    (require('./React').__DEV__ === true ? invariant(\n      Array.isArray(one) && Array.isArray(two),\n      'Tried to merge arrays, instead got %s and %s.',\n      one,\n      two\n    ) : invariant(Array.isArray(one) && Array.isArray(two)));\n  },\n\n  /**\n   * @param {*} one Object to merge into.\n   * @param {*} two Object to merge from.\n   */\n  checkMergeObjectArgs: function(one, two) {\n    mergeHelpers.checkMergeObjectArg(one);\n    mergeHelpers.checkMergeObjectArg(two);\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeObjectArg: function(arg) {\n    (require('./React').__DEV__ === true ? invariant(\n      !isTerminal(arg) && !Array.isArray(arg),\n      'Tried to merge an object, instead got %s.',\n      arg\n    ) : invariant(!isTerminal(arg) && !Array.isArray(arg)));\n  },\n\n  /**\n   * Checks that a merge was not given a circular object or an object that had\n   * too great of depth.\n   *\n   * @param {number} Level of recursion to validate against maximum.\n   */\n  checkMergeLevel: function(level) {\n    (require('./React').__DEV__ === true ? invariant(\n      level < MAX_MERGE_DEPTH,\n      'Maximum deep merge depth exceeded. You may be attempting to merge ' +\n      'circular structures in an unsupported way.'\n    ) : invariant(level < MAX_MERGE_DEPTH));\n  },\n\n  /**\n   * Checks that the supplied merge strategy is valid.\n   *\n   * @param {string} Array merge strategy.\n   */\n  checkArrayStrategy: function(strategy) {\n    (require('./React').__DEV__ === true ? invariant(\n      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,\n      'You must provide an array strategy to deep merge functions to ' +\n      'instruct the deep merge how to resolve merging two arrays.'\n    ) : invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies));\n  },\n\n  /**\n   * Set of possible behaviors of merge algorithms when encountering two Arrays\n   * that must be merged together.\n   * - `clobber`: The left `Array` is ignored.\n   * - `indexByIndex`: The result is achieved by recursively deep merging at\n   *   each index. (not yet supported.)\n   */\n  ArrayStrategies: keyMirror({\n    Clobber: true,\n    IndexByIndex: true\n  })\n\n};\n\nmodule.exports = mergeHelpers;\n"]},"metadata":{},"sourceType":"script"}