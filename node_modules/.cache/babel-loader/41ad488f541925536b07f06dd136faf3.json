{"ast":null,"code":"/**\n * @providesModule EventListener\n */\nvar emptyFunction = require(\"./emptyFunction\");\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\n\n\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function (target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function () {\n          target.detachEvent(eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function (target, eventType, callback) {\n    if (!target.addEventListener) {\n      if (require('./React').__DEV__ === true) {\n        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');\n      }\n\n      return {\n        remove: emptyFunction\n      };\n    } else {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function () {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    }\n  }\n};\nmodule.exports = EventListener;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/EventListener.js"],"names":["emptyFunction","require","EventListener","listen","target","eventType","callback","addEventListener","remove","removeEventListener","attachEvent","detachEvent","capture","__DEV__","console","error","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;AAEA;AACA;AACA;AACA;;;AACA,IAAIC,aAAa,GAAG;AAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,MAAM,EAAE,UAASC,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,EAAsC;AAC5C,QAAIF,MAAM,CAACG,gBAAX,EAA6B;AAC3BH,MAAAA,MAAM,CAACG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C,KAA7C;AACA,aAAO;AACLE,QAAAA,MAAM,EAAE,YAAW;AACjBJ,UAAAA,MAAM,CAACK,mBAAP,CAA2BJ,SAA3B,EAAsCC,QAAtC,EAAgD,KAAhD;AACD;AAHI,OAAP;AAKD,KAPD,MAOO,IAAIF,MAAM,CAACM,WAAX,EAAwB;AAC7BN,MAAAA,MAAM,CAACM,WAAP,CAAmB,OAAOL,SAA1B,EAAqCC,QAArC;AACA,aAAO;AACLE,QAAAA,MAAM,EAAE,YAAW;AACjBJ,UAAAA,MAAM,CAACO,WAAP,CAAmBN,SAAnB,EAA8BC,QAA9B;AACD;AAHI,OAAP;AAKD;AACF,GAzBiB;;AA2BlB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,OAAO,EAAE,UAASR,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,EAAsC;AAC7C,QAAI,CAACF,MAAM,CAACG,gBAAZ,EAA8B;AAC5B,UAAIN,OAAO,CAAC,SAAD,CAAP,CAAmBY,OAAnB,KAA+B,IAAnC,EAAyC;AACvCC,QAAAA,OAAO,CAACC,KAAR,CACE,iEACA,oEADA,GAEA,+BAHF;AAKD;;AACD,aAAO;AACLP,QAAAA,MAAM,EAAER;AADH,OAAP;AAGD,KAXD,MAWO;AACLI,MAAAA,MAAM,CAACG,gBAAP,CAAwBF,SAAxB,EAAmCC,QAAnC,EAA6C,IAA7C;AACA,aAAO;AACLE,QAAAA,MAAM,EAAE,YAAW;AACjBJ,UAAAA,MAAM,CAACK,mBAAP,CAA2BJ,SAA3B,EAAsCC,QAAtC,EAAgD,IAAhD;AACD;AAHI,OAAP;AAKD;AACF;AAvDiB,CAApB;AA0DAU,MAAM,CAACC,OAAP,GAAiBf,aAAjB","sourcesContent":["/**\n * @providesModule EventListener\n */\n\nvar emptyFunction = require(\"./emptyFunction\");\n\n/**\n * Upstream version of event listener. Does not take into account specific\n * nature of platform.\n */\nvar EventListener = {\n  /**\n   * Listen to DOM events during the bubble phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  listen: function(target, eventType, callback) {\n    if (target.addEventListener) {\n      target.addEventListener(eventType, callback, false);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, false);\n        }\n      };\n    } else if (target.attachEvent) {\n      target.attachEvent('on' + eventType, callback);\n      return {\n        remove: function() {\n          target.detachEvent(eventType, callback);\n        }\n      };\n    }\n  },\n\n  /**\n   * Listen to DOM events during the capture phase.\n   *\n   * @param {DOMEventTarget} target DOM element to register listener on.\n   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.\n   * @param {function} callback Callback function.\n   * @return {object} Object with a `remove` method.\n   */\n  capture: function(target, eventType, callback) {\n    if (!target.addEventListener) {\n      if (require('./React').__DEV__ === true) {\n        console.error(\n          'Attempted to listen to events during the capture phase on a ' +\n          'browser that does not support the capture phase. Your application ' +\n          'will not receive some events.'\n        );\n      }\n      return {\n        remove: emptyFunction\n      };\n    } else {\n      target.addEventListener(eventType, callback, true);\n      return {\n        remove: function() {\n          target.removeEventListener(eventType, callback, true);\n        }\n      };\n    }\n  }\n};\n\nmodule.exports = EventListener;\n"]},"metadata":{},"sourceType":"script"}