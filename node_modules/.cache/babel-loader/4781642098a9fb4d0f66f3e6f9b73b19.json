{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponent\n */\n\"use strict\";\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar ReactOwner = require(\"./ReactOwner\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar invariant = require(\"./invariant\");\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar merge = require(\"./merge\");\n\nvar monitorCodeUse = require(\"./monitorCodeUse\");\n/**\n * Every React component is in one of these life cycles.\n */\n\n\nvar ComponentLifeCycle = keyMirror({\n  /**\n   * Mounted components have a DOM node representation and are capable of\n   * receiving new props.\n   */\n  MOUNTED: null,\n\n  /**\n   * Unmounted components are inactive and cannot receive new props.\n   */\n  UNMOUNTED: null\n});\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\nvar ownerHasExplicitKeyWarning = {};\nvar ownerHasPropertyWarning = {};\nvar ownerHasMonitoredObjectMap = {};\nvar NUMERIC_PROPERTY_REGEX = /^\\d+$/;\nvar injected = false;\n/**\n * Optionally injectable environment dependent cleanup hook. (server vs.\n * browser etc). Example: A browser system caches DOM nodes based on component\n * ID and must remove that cache entry when this instance is unmounted.\n *\n * @private\n */\n\nvar unmountIDFromEnvironment = null;\n/**\n * The \"image\" of a component tree, is the platform specific (typically\n * serialized) data that represents a tree of lower level UI building blocks.\n * On the web, this \"image\" is HTML markup which describes a construction of\n * low level `div` and `span` nodes. Other platforms may have different\n * encoding of this \"image\". This must be injected.\n *\n * @private\n */\n\nvar mountImageIntoNode = null;\n/**\n * Warn if the component doesn't have an explicit key assigned to it.\n * This component is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactComponent} component Component that requires a key.\n */\n\nfunction validateExplicitKey(component) {\n  if (component.__keyValidated__ || component.props.key != null) {\n    return;\n  }\n\n  component.__keyValidated__ = true; // We can't provide friendly warnings for top level components.\n\n  if (!ReactCurrentOwner.current) {\n    return;\n  } // Name of the component whose render method tried to pass children.\n\n\n  var currentName = ReactCurrentOwner.current.constructor.displayName;\n\n  if (ownerHasExplicitKeyWarning.hasOwnProperty(currentName)) {\n    return;\n  }\n\n  ownerHasExplicitKeyWarning[currentName] = true;\n  var message = 'Each child in an array should have a unique \"key\" prop. ' + 'Check the render method of ' + currentName + '.';\n  var childOwnerName = null;\n\n  if (!component.isOwnedBy(ReactCurrentOwner.current)) {\n    // Name of the component that originally created this child.\n    childOwnerName = component._owner && component._owner.constructor.displayName; // Usually the current owner is the offender, but if it accepts\n    // children as a property, it may be the creator of the child that's\n    // responsible for assigning it a key.\n\n    message += ' It was passed a child from ' + childOwnerName + '.';\n  }\n\n  message += ' See http://fb.me/react-warning-keys for more information.';\n  monitorCodeUse('react_key_warning', {\n    component: currentName,\n    componentOwner: childOwnerName\n  });\n  console.warn(message);\n}\n/**\n * Warn if the key is being defined as an object property but has an incorrect\n * value.\n *\n * @internal\n * @param {string} name Property name of the key.\n * @param {ReactComponent} component Component that requires a key.\n */\n\n\nfunction validatePropertyKey(name) {\n  if (NUMERIC_PROPERTY_REGEX.test(name)) {\n    // Name of the component whose render method tried to pass children.\n    var currentName = ReactCurrentOwner.current.constructor.displayName;\n\n    if (ownerHasPropertyWarning.hasOwnProperty(currentName)) {\n      return;\n    }\n\n    ownerHasPropertyWarning[currentName] = true;\n    monitorCodeUse('react_numeric_key_warning');\n    console.warn('Child objects should have non-numeric keys so ordering is preserved. ' + 'Check the render method of ' + currentName + '. ' + 'See http://fb.me/react-warning-keys for more information.');\n  }\n}\n/**\n * Log that we're using an object map. We're considering deprecating this\n * feature and replace it with proper Map and ImmutableMap data structures.\n *\n * @internal\n */\n\n\nfunction monitorUseOfObjectMap() {\n  // Name of the component whose render method tried to pass children.\n  // We only use this to avoid spewing the logs. We lose additional\n  // owner stacks but hopefully one level is enough to trace the source.\n  var currentName = ReactCurrentOwner.current && ReactCurrentOwner.current.constructor.displayName || '';\n\n  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {\n    return;\n  }\n\n  ownerHasMonitoredObjectMap[currentName] = true;\n  monitorCodeUse('react_object_map_children');\n}\n/**\n * Ensure that every component either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {*} component Statically passed child of any type.\n * @return {boolean}\n */\n\n\nfunction validateChildKeys(component) {\n  if (Array.isArray(component)) {\n    for (var i = 0; i < component.length; i++) {\n      var child = component[i];\n\n      if (ReactComponent.isValidComponent(child)) {\n        validateExplicitKey(child);\n      }\n    }\n  } else if (ReactComponent.isValidComponent(component)) {\n    // This component was passed in a valid location.\n    component.__keyValidated__ = true;\n  } else if (component && typeof component === 'object') {\n    monitorUseOfObjectMap();\n\n    for (var name in component) {\n      validatePropertyKey(name, component);\n    }\n  }\n}\n/**\n * Components are the basic units of composition in React.\n *\n * Every component accepts a set of keyed input parameters known as \"props\" that\n * are initialized by the constructor. Once a component is mounted, the props\n * can be mutated using `setProps` or `replaceProps`.\n *\n * Every component is capable of the following operations:\n *\n *   `mountComponent`\n *     Initializes the component, renders markup, and registers event listeners.\n *\n *   `receiveComponent`\n *     Updates the rendered DOM nodes to match the given component.\n *\n *   `unmountComponent`\n *     Releases any resources allocated by this component.\n *\n * Components can also be \"owned\" by other components. Being owned by another\n * component means being constructed by that component. This is different from\n * being the child of a component, which means having a DOM representation that\n * is a child of the DOM representation of that component.\n *\n * @class ReactComponent\n */\n\n\nvar ReactComponent = {\n  injection: {\n    injectEnvironment: function (ReactComponentEnvironment) {\n      require('./React').__DEV__ === true ? invariant(!injected, 'ReactComponent: injectEnvironment() can only be called once.') : invariant(!injected);\n      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;\n      unmountIDFromEnvironment = ReactComponentEnvironment.unmountIDFromEnvironment;\n      ReactComponent.BackendIDOperations = ReactComponentEnvironment.BackendIDOperations;\n      ReactComponent.ReactReconcileTransaction = ReactComponentEnvironment.ReactReconcileTransaction;\n      injected = true;\n    }\n  },\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid component.\n   * @final\n   */\n  isValidComponent: function (object) {\n    if (!object || !object.type || !object.type.prototype) {\n      return false;\n    } // This is the safer way of duck checking the type of instance this is.\n    // The object can be a generic descriptor but the type property refers to\n    // the constructor and it's prototype can be used to inspect the type that\n    // will actually get mounted.\n\n\n    var prototype = object.type.prototype;\n    return typeof prototype.mountComponentIntoNode === 'function' && typeof prototype.receiveComponent === 'function';\n  },\n\n  /**\n   * @internal\n   */\n  LifeCycle: ComponentLifeCycle,\n\n  /**\n   * Injected module that provides ability to mutate individual properties.\n   * Injected into the base class because many different subclasses need access\n   * to this.\n   *\n   * @internal\n   */\n  BackendIDOperations: null,\n\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  /**\n   * Base functionality for every ReactComponent constructor. Mixed into the\n   * `ReactComponent` prototype, but exposed statically for easy access.\n   *\n   * @lends {ReactComponent.prototype}\n   */\n  Mixin: {\n    /**\n     * Checks whether or not this component is mounted.\n     *\n     * @return {boolean} True if mounted, false otherwise.\n     * @final\n     * @protected\n     */\n    isMounted: function () {\n      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;\n    },\n\n    /**\n     * Sets a subset of the props.\n     *\n     * @param {object} partialProps Subset of the next props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    setProps: function (partialProps, callback) {\n      // Merge with `_pendingProps` if it exists, otherwise with existing props.\n      this.replaceProps(merge(this._pendingProps || this.props, partialProps), callback);\n    },\n\n    /**\n     * Replaces all of the props.\n     *\n     * @param {object} props New props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    replaceProps: function (props, callback) {\n      require('./React').__DEV__ === true ? invariant(this.isMounted(), 'replaceProps(...): Can only update a mounted component.') : invariant(this.isMounted());\n      require('./React').__DEV__ === true ? invariant(this._mountDepth === 0, 'replaceProps(...): You called `setProps` or `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(this._mountDepth === 0);\n      this._pendingProps = props;\n      ReactUpdates.enqueueUpdate(this, callback);\n    },\n\n    /**\n     * Base constructor for all React components.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.construct.call(this, ...)`.\n     *\n     * @param {?object} initialProps\n     * @param {*} children\n     * @internal\n     */\n    construct: function (initialProps, children) {\n      this.props = initialProps || {}; // Record the component responsible for creating this component.\n\n      this._owner = ReactCurrentOwner.current; // All components start unmounted.\n\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n      this._pendingProps = null;\n      this._pendingCallbacks = null; // Unlike _pendingProps and _pendingCallbacks, we won't use null to\n      // indicate that nothing is pending because it's possible for a component\n      // to have a null owner. Instead, an owner change is pending when\n      // this._owner !== this._pendingOwner.\n\n      this._pendingOwner = this._owner; // Children can be more than one argument\n\n      var childrenLength = arguments.length - 1;\n\n      if (childrenLength === 1) {\n        if (require('./React').__DEV__ === true) {\n          validateChildKeys(children);\n        }\n\n        this.props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n\n        for (var i = 0; i < childrenLength; i++) {\n          if (require('./React').__DEV__ === true) {\n            validateChildKeys(arguments[i + 1]);\n          }\n\n          childArray[i] = arguments[i + 1];\n        }\n\n        this.props.children = childArray;\n      }\n    },\n\n    /**\n     * Initializes the component, renders markup, and registers event listeners.\n     *\n     * NOTE: This does not insert any nodes into the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n     * @param {number} mountDepth number of components in the owner hierarchy.\n     * @return {?string} Rendered markup to be inserted into the DOM.\n     * @internal\n     */\n    mountComponent: function (rootID, transaction, mountDepth) {\n      require('./React').__DEV__ === true ? invariant(!this.isMounted(), 'mountComponent(%s, ...): Can only mount an unmounted component. ' + 'Make sure to avoid storing components between renders or reusing a ' + 'single component instance in multiple places.', rootID) : invariant(!this.isMounted());\n      var props = this.props;\n\n      if (props.ref != null) {\n        ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);\n      }\n\n      this._rootNodeID = rootID;\n      this._lifeCycleState = ComponentLifeCycle.MOUNTED;\n      this._mountDepth = mountDepth; // Effectively: return '';\n    },\n\n    /**\n     * Releases any resources allocated by `mountComponent`.\n     *\n     * NOTE: This does not remove any nodes from the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.unmountComponent.call(this)`.\n     *\n     * @internal\n     */\n    unmountComponent: function () {\n      require('./React').__DEV__ === true ? invariant(this.isMounted(), 'unmountComponent(): Can only unmount a mounted component.') : invariant(this.isMounted());\n      var props = this.props;\n\n      if (props.ref != null) {\n        ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);\n      }\n\n      unmountIDFromEnvironment(this._rootNodeID);\n      this._rootNodeID = null;\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n    },\n\n    /**\n     * Given a new instance of this component, updates the rendered DOM nodes\n     * as if that instance was rendered instead.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.\n     *\n     * @param {object} nextComponent Next set of properties.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    receiveComponent: function (nextComponent, transaction) {\n      require('./React').__DEV__ === true ? invariant(this.isMounted(), 'receiveComponent(...): Can only update a mounted component.') : invariant(this.isMounted());\n      this._pendingOwner = nextComponent._owner;\n      this._pendingProps = nextComponent.props;\n\n      this._performUpdateIfNecessary(transaction);\n    },\n\n    /**\n     * Call `_performUpdateIfNecessary` within a new transaction.\n     *\n     * @internal\n     */\n    performUpdateIfNecessary: function () {\n      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n      transaction.perform(this._performUpdateIfNecessary, this, transaction);\n      ReactComponent.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * If `_pendingProps` is set, update the component.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    _performUpdateIfNecessary: function (transaction) {\n      if (this._pendingProps == null) {\n        return;\n      }\n\n      var prevProps = this.props;\n      var prevOwner = this._owner;\n      this.props = this._pendingProps;\n      this._owner = this._pendingOwner;\n      this._pendingProps = null;\n      this.updateComponent(transaction, prevProps, prevOwner);\n    },\n\n    /**\n     * Updates the component's currently mounted representation.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @param {object} prevProps\n     * @internal\n     */\n    updateComponent: function (transaction, prevProps, prevOwner) {\n      var props = this.props; // If either the owner or a `ref` has changed, make sure the newest owner\n      // has stored a reference to `this`, and the previous owner (if different)\n      // has forgotten the reference to `this`.\n\n      if (this._owner !== prevOwner || props.ref !== prevProps.ref) {\n        if (prevProps.ref != null) {\n          ReactOwner.removeComponentAsRefFrom(this, prevProps.ref, prevOwner);\n        } // Correct, even if the owner is the same, and only the ref has changed.\n\n\n        if (props.ref != null) {\n          ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);\n        }\n      }\n    },\n\n    /**\n     * Mounts this component and inserts it into the DOM.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @internal\n     * @see {ReactMount.renderComponent}\n     */\n    mountComponentIntoNode: function (rootID, container, shouldReuseMarkup) {\n      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n      transaction.perform(this._mountComponentIntoNode, this, rootID, container, transaction, shouldReuseMarkup);\n      ReactComponent.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {ReactReconcileTransaction} transaction\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @private\n     */\n    _mountComponentIntoNode: function (rootID, container, transaction, shouldReuseMarkup) {\n      var markup = this.mountComponent(rootID, transaction, 0);\n      mountImageIntoNode(markup, container, shouldReuseMarkup);\n    },\n\n    /**\n     * Checks if this component is owned by the supplied `owner` component.\n     *\n     * @param {ReactComponent} owner Component to check.\n     * @return {boolean} True if `owners` owns this component.\n     * @final\n     * @internal\n     */\n    isOwnedBy: function (owner) {\n      return this._owner === owner;\n    },\n\n    /**\n     * Gets another component, that shares the same owner as this one, by ref.\n     *\n     * @param {string} ref of a sibling Component.\n     * @return {?ReactComponent} the actual sibling Component.\n     * @final\n     * @internal\n     */\n    getSiblingByRef: function (ref) {\n      var owner = this._owner;\n\n      if (!owner || !owner.refs) {\n        return null;\n      }\n\n      return owner.refs[ref];\n    }\n  }\n};\nmodule.exports = ReactComponent;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactComponent.js"],"names":["ReactCurrentOwner","require","ReactOwner","ReactUpdates","invariant","keyMirror","merge","monitorCodeUse","ComponentLifeCycle","MOUNTED","UNMOUNTED","ownerHasExplicitKeyWarning","ownerHasPropertyWarning","ownerHasMonitoredObjectMap","NUMERIC_PROPERTY_REGEX","injected","unmountIDFromEnvironment","mountImageIntoNode","validateExplicitKey","component","__keyValidated__","props","key","current","currentName","constructor","displayName","hasOwnProperty","message","childOwnerName","isOwnedBy","_owner","componentOwner","console","warn","validatePropertyKey","name","test","monitorUseOfObjectMap","validateChildKeys","Array","isArray","i","length","child","ReactComponent","isValidComponent","injection","injectEnvironment","ReactComponentEnvironment","__DEV__","BackendIDOperations","ReactReconcileTransaction","object","type","prototype","mountComponentIntoNode","receiveComponent","LifeCycle","Mixin","isMounted","_lifeCycleState","setProps","partialProps","callback","replaceProps","_pendingProps","_mountDepth","enqueueUpdate","construct","initialProps","children","_pendingCallbacks","_pendingOwner","childrenLength","arguments","childArray","mountComponent","rootID","transaction","mountDepth","ref","addComponentAsRefTo","_rootNodeID","unmountComponent","removeComponentAsRefFrom","nextComponent","_performUpdateIfNecessary","performUpdateIfNecessary","getPooled","perform","release","prevProps","prevOwner","updateComponent","container","shouldReuseMarkup","_mountComponentIntoNode","markup","owner","getSiblingByRef","refs","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponent\n */\n\n\"use strict\";\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactOwner = require(\"./ReactOwner\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar merge = require(\"./merge\");\nvar monitorCodeUse = require(\"./monitorCodeUse\");\n\n/**\n * Every React component is in one of these life cycles.\n */\nvar ComponentLifeCycle = keyMirror({\n  /**\n   * Mounted components have a DOM node representation and are capable of\n   * receiving new props.\n   */\n  MOUNTED: null,\n  /**\n   * Unmounted components are inactive and cannot receive new props.\n   */\n  UNMOUNTED: null\n});\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\nvar ownerHasExplicitKeyWarning = {};\nvar ownerHasPropertyWarning = {};\nvar ownerHasMonitoredObjectMap = {};\n\nvar NUMERIC_PROPERTY_REGEX = /^\\d+$/;\n\nvar injected = false;\n\n/**\n * Optionally injectable environment dependent cleanup hook. (server vs.\n * browser etc). Example: A browser system caches DOM nodes based on component\n * ID and must remove that cache entry when this instance is unmounted.\n *\n * @private\n */\nvar unmountIDFromEnvironment = null;\n\n/**\n * The \"image\" of a component tree, is the platform specific (typically\n * serialized) data that represents a tree of lower level UI building blocks.\n * On the web, this \"image\" is HTML markup which describes a construction of\n * low level `div` and `span` nodes. Other platforms may have different\n * encoding of this \"image\". This must be injected.\n *\n * @private\n */\nvar mountImageIntoNode = null;\n\n/**\n * Warn if the component doesn't have an explicit key assigned to it.\n * This component is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it.\n *\n * @internal\n * @param {ReactComponent} component Component that requires a key.\n */\nfunction validateExplicitKey(component) {\n  if (component.__keyValidated__ || component.props.key != null) {\n    return;\n  }\n  component.__keyValidated__ = true;\n\n  // We can't provide friendly warnings for top level components.\n  if (!ReactCurrentOwner.current) {\n    return;\n  }\n\n  // Name of the component whose render method tried to pass children.\n  var currentName = ReactCurrentOwner.current.constructor.displayName;\n  if (ownerHasExplicitKeyWarning.hasOwnProperty(currentName)) {\n    return;\n  }\n  ownerHasExplicitKeyWarning[currentName] = true;\n\n  var message = 'Each child in an array should have a unique \"key\" prop. ' +\n                'Check the render method of ' + currentName + '.';\n\n  var childOwnerName = null;\n  if (!component.isOwnedBy(ReactCurrentOwner.current)) {\n    // Name of the component that originally created this child.\n    childOwnerName =\n      component._owner &&\n      component._owner.constructor.displayName;\n\n    // Usually the current owner is the offender, but if it accepts\n    // children as a property, it may be the creator of the child that's\n    // responsible for assigning it a key.\n    message += ' It was passed a child from ' + childOwnerName + '.';\n  }\n\n  message += ' See http://fb.me/react-warning-keys for more information.';\n  monitorCodeUse('react_key_warning', {\n    component: currentName,\n    componentOwner: childOwnerName\n  });\n  console.warn(message);\n}\n\n/**\n * Warn if the key is being defined as an object property but has an incorrect\n * value.\n *\n * @internal\n * @param {string} name Property name of the key.\n * @param {ReactComponent} component Component that requires a key.\n */\nfunction validatePropertyKey(name) {\n  if (NUMERIC_PROPERTY_REGEX.test(name)) {\n    // Name of the component whose render method tried to pass children.\n    var currentName = ReactCurrentOwner.current.constructor.displayName;\n    if (ownerHasPropertyWarning.hasOwnProperty(currentName)) {\n      return;\n    }\n    ownerHasPropertyWarning[currentName] = true;\n\n    monitorCodeUse('react_numeric_key_warning');\n    console.warn(\n      'Child objects should have non-numeric keys so ordering is preserved. ' +\n      'Check the render method of ' + currentName + '. ' +\n      'See http://fb.me/react-warning-keys for more information.'\n    );\n  }\n}\n\n/**\n * Log that we're using an object map. We're considering deprecating this\n * feature and replace it with proper Map and ImmutableMap data structures.\n *\n * @internal\n */\nfunction monitorUseOfObjectMap() {\n  // Name of the component whose render method tried to pass children.\n  // We only use this to avoid spewing the logs. We lose additional\n  // owner stacks but hopefully one level is enough to trace the source.\n  var currentName = (ReactCurrentOwner.current &&\n                    ReactCurrentOwner.current.constructor.displayName) || '';\n  if (ownerHasMonitoredObjectMap.hasOwnProperty(currentName)) {\n    return;\n  }\n  ownerHasMonitoredObjectMap[currentName] = true;\n  monitorCodeUse('react_object_map_children');\n}\n\n/**\n * Ensure that every component either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {*} component Statically passed child of any type.\n * @return {boolean}\n */\nfunction validateChildKeys(component) {\n  if (Array.isArray(component)) {\n    for (var i = 0; i < component.length; i++) {\n      var child = component[i];\n      if (ReactComponent.isValidComponent(child)) {\n        validateExplicitKey(child);\n      }\n    }\n  } else if (ReactComponent.isValidComponent(component)) {\n    // This component was passed in a valid location.\n    component.__keyValidated__ = true;\n  } else if (component && typeof component === 'object') {\n    monitorUseOfObjectMap();\n    for (var name in component) {\n      validatePropertyKey(name, component);\n    }\n  }\n}\n\n/**\n * Components are the basic units of composition in React.\n *\n * Every component accepts a set of keyed input parameters known as \"props\" that\n * are initialized by the constructor. Once a component is mounted, the props\n * can be mutated using `setProps` or `replaceProps`.\n *\n * Every component is capable of the following operations:\n *\n *   `mountComponent`\n *     Initializes the component, renders markup, and registers event listeners.\n *\n *   `receiveComponent`\n *     Updates the rendered DOM nodes to match the given component.\n *\n *   `unmountComponent`\n *     Releases any resources allocated by this component.\n *\n * Components can also be \"owned\" by other components. Being owned by another\n * component means being constructed by that component. This is different from\n * being the child of a component, which means having a DOM representation that\n * is a child of the DOM representation of that component.\n *\n * @class ReactComponent\n */\nvar ReactComponent = {\n\n  injection: {\n    injectEnvironment: function(ReactComponentEnvironment) {\n      (require('./React').__DEV__ === true ? invariant(\n        !injected,\n        'ReactComponent: injectEnvironment() can only be called once.'\n      ) : invariant(!injected));\n      mountImageIntoNode = ReactComponentEnvironment.mountImageIntoNode;\n      unmountIDFromEnvironment =\n        ReactComponentEnvironment.unmountIDFromEnvironment;\n      ReactComponent.BackendIDOperations =\n        ReactComponentEnvironment.BackendIDOperations;\n      ReactComponent.ReactReconcileTransaction =\n        ReactComponentEnvironment.ReactReconcileTransaction;\n      injected = true;\n    }\n  },\n\n  /**\n   * @param {?object} object\n   * @return {boolean} True if `object` is a valid component.\n   * @final\n   */\n  isValidComponent: function(object) {\n    if (!object || !object.type || !object.type.prototype) {\n      return false;\n    }\n    // This is the safer way of duck checking the type of instance this is.\n    // The object can be a generic descriptor but the type property refers to\n    // the constructor and it's prototype can be used to inspect the type that\n    // will actually get mounted.\n    var prototype = object.type.prototype;\n    return (\n      typeof prototype.mountComponentIntoNode === 'function' &&\n      typeof prototype.receiveComponent === 'function'\n    );\n  },\n\n  /**\n   * @internal\n   */\n  LifeCycle: ComponentLifeCycle,\n\n  /**\n   * Injected module that provides ability to mutate individual properties.\n   * Injected into the base class because many different subclasses need access\n   * to this.\n   *\n   * @internal\n   */\n  BackendIDOperations: null,\n\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  /**\n   * Base functionality for every ReactComponent constructor. Mixed into the\n   * `ReactComponent` prototype, but exposed statically for easy access.\n   *\n   * @lends {ReactComponent.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Checks whether or not this component is mounted.\n     *\n     * @return {boolean} True if mounted, false otherwise.\n     * @final\n     * @protected\n     */\n    isMounted: function() {\n      return this._lifeCycleState === ComponentLifeCycle.MOUNTED;\n    },\n\n    /**\n     * Sets a subset of the props.\n     *\n     * @param {object} partialProps Subset of the next props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    setProps: function(partialProps, callback) {\n      // Merge with `_pendingProps` if it exists, otherwise with existing props.\n      this.replaceProps(\n        merge(this._pendingProps || this.props, partialProps),\n        callback\n      );\n    },\n\n    /**\n     * Replaces all of the props.\n     *\n     * @param {object} props New props.\n     * @param {?function} callback Called after props are updated.\n     * @final\n     * @public\n     */\n    replaceProps: function(props, callback) {\n      (require('./React').__DEV__ === true ? invariant(\n        this.isMounted(),\n        'replaceProps(...): Can only update a mounted component.'\n      ) : invariant(this.isMounted()));\n      (require('./React').__DEV__ === true ? invariant(\n        this._mountDepth === 0,\n        'replaceProps(...): You called `setProps` or `replaceProps` on a ' +\n        'component with a parent. This is an anti-pattern since props will ' +\n        'get reactively updated when rendered. Instead, change the owner\\'s ' +\n        '`render` method to pass the correct value as props to the component ' +\n        'where it is created.'\n      ) : invariant(this._mountDepth === 0));\n      this._pendingProps = props;\n      ReactUpdates.enqueueUpdate(this, callback);\n    },\n\n    /**\n     * Base constructor for all React components.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.construct.call(this, ...)`.\n     *\n     * @param {?object} initialProps\n     * @param {*} children\n     * @internal\n     */\n    construct: function(initialProps, children) {\n      this.props = initialProps || {};\n      // Record the component responsible for creating this component.\n      this._owner = ReactCurrentOwner.current;\n      // All components start unmounted.\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n\n      this._pendingProps = null;\n      this._pendingCallbacks = null;\n\n      // Unlike _pendingProps and _pendingCallbacks, we won't use null to\n      // indicate that nothing is pending because it's possible for a component\n      // to have a null owner. Instead, an owner change is pending when\n      // this._owner !== this._pendingOwner.\n      this._pendingOwner = this._owner;\n\n      // Children can be more than one argument\n      var childrenLength = arguments.length - 1;\n      if (childrenLength === 1) {\n        if (require('./React').__DEV__ === true) {\n          validateChildKeys(children);\n        }\n        this.props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          if (require('./React').__DEV__ === true) {\n            validateChildKeys(arguments[i + 1]);\n          }\n          childArray[i] = arguments[i + 1];\n        }\n        this.props.children = childArray;\n      }\n    },\n\n    /**\n     * Initializes the component, renders markup, and registers event listeners.\n     *\n     * NOTE: This does not insert any nodes into the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.mountComponent.call(this, ...)`.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n     * @param {number} mountDepth number of components in the owner hierarchy.\n     * @return {?string} Rendered markup to be inserted into the DOM.\n     * @internal\n     */\n    mountComponent: function(rootID, transaction, mountDepth) {\n      (require('./React').__DEV__ === true ? invariant(\n        !this.isMounted(),\n        'mountComponent(%s, ...): Can only mount an unmounted component. ' +\n        'Make sure to avoid storing components between renders or reusing a ' +\n        'single component instance in multiple places.',\n        rootID\n      ) : invariant(!this.isMounted()));\n      var props = this.props;\n      if (props.ref != null) {\n        ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);\n      }\n      this._rootNodeID = rootID;\n      this._lifeCycleState = ComponentLifeCycle.MOUNTED;\n      this._mountDepth = mountDepth;\n      // Effectively: return '';\n    },\n\n    /**\n     * Releases any resources allocated by `mountComponent`.\n     *\n     * NOTE: This does not remove any nodes from the DOM.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.unmountComponent.call(this)`.\n     *\n     * @internal\n     */\n    unmountComponent: function() {\n      (require('./React').__DEV__ === true ? invariant(\n        this.isMounted(),\n        'unmountComponent(): Can only unmount a mounted component.'\n      ) : invariant(this.isMounted()));\n      var props = this.props;\n      if (props.ref != null) {\n        ReactOwner.removeComponentAsRefFrom(this, props.ref, this._owner);\n      }\n      unmountIDFromEnvironment(this._rootNodeID);\n      this._rootNodeID = null;\n      this._lifeCycleState = ComponentLifeCycle.UNMOUNTED;\n    },\n\n    /**\n     * Given a new instance of this component, updates the rendered DOM nodes\n     * as if that instance was rendered instead.\n     *\n     * Subclasses that override this method should make sure to invoke\n     * `ReactComponent.Mixin.receiveComponent.call(this, ...)`.\n     *\n     * @param {object} nextComponent Next set of properties.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    receiveComponent: function(nextComponent, transaction) {\n      (require('./React').__DEV__ === true ? invariant(\n        this.isMounted(),\n        'receiveComponent(...): Can only update a mounted component.'\n      ) : invariant(this.isMounted()));\n      this._pendingOwner = nextComponent._owner;\n      this._pendingProps = nextComponent.props;\n      this._performUpdateIfNecessary(transaction);\n    },\n\n    /**\n     * Call `_performUpdateIfNecessary` within a new transaction.\n     *\n     * @internal\n     */\n    performUpdateIfNecessary: function() {\n      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n      transaction.perform(this._performUpdateIfNecessary, this, transaction);\n      ReactComponent.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * If `_pendingProps` is set, update the component.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    _performUpdateIfNecessary: function(transaction) {\n      if (this._pendingProps == null) {\n        return;\n      }\n      var prevProps = this.props;\n      var prevOwner = this._owner;\n      this.props = this._pendingProps;\n      this._owner = this._pendingOwner;\n      this._pendingProps = null;\n      this.updateComponent(transaction, prevProps, prevOwner);\n    },\n\n    /**\n     * Updates the component's currently mounted representation.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @param {object} prevProps\n     * @internal\n     */\n    updateComponent: function(transaction, prevProps, prevOwner) {\n      var props = this.props;\n      // If either the owner or a `ref` has changed, make sure the newest owner\n      // has stored a reference to `this`, and the previous owner (if different)\n      // has forgotten the reference to `this`.\n      if (this._owner !== prevOwner || props.ref !== prevProps.ref) {\n        if (prevProps.ref != null) {\n          ReactOwner.removeComponentAsRefFrom(\n            this, prevProps.ref, prevOwner\n          );\n        }\n        // Correct, even if the owner is the same, and only the ref has changed.\n        if (props.ref != null) {\n          ReactOwner.addComponentAsRefTo(this, props.ref, this._owner);\n        }\n      }\n    },\n\n    /**\n     * Mounts this component and inserts it into the DOM.\n     *\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @internal\n     * @see {ReactMount.renderComponent}\n     */\n    mountComponentIntoNode: function(rootID, container, shouldReuseMarkup) {\n      var transaction = ReactComponent.ReactReconcileTransaction.getPooled();\n      transaction.perform(\n        this._mountComponentIntoNode,\n        this,\n        rootID,\n        container,\n        transaction,\n        shouldReuseMarkup\n      );\n      ReactComponent.ReactReconcileTransaction.release(transaction);\n    },\n\n    /**\n     * @param {string} rootID DOM ID of the root node.\n     * @param {DOMElement} container DOM element to mount into.\n     * @param {ReactReconcileTransaction} transaction\n     * @param {boolean} shouldReuseMarkup If true, do not insert markup\n     * @final\n     * @private\n     */\n    _mountComponentIntoNode: function(\n        rootID,\n        container,\n        transaction,\n        shouldReuseMarkup) {\n      var markup = this.mountComponent(rootID, transaction, 0);\n      mountImageIntoNode(markup, container, shouldReuseMarkup);\n    },\n\n    /**\n     * Checks if this component is owned by the supplied `owner` component.\n     *\n     * @param {ReactComponent} owner Component to check.\n     * @return {boolean} True if `owners` owns this component.\n     * @final\n     * @internal\n     */\n    isOwnedBy: function(owner) {\n      return this._owner === owner;\n    },\n\n    /**\n     * Gets another component, that shares the same owner as this one, by ref.\n     *\n     * @param {string} ref of a sibling Component.\n     * @return {?ReactComponent} the actual sibling Component.\n     * @final\n     * @internal\n     */\n    getSiblingByRef: function(ref) {\n      var owner = this._owner;\n      if (!owner || !owner.refs) {\n        return null;\n      }\n      return owner.refs[ref];\n    }\n  }\n};\n\nmodule.exports = ReactComponent;\n"]},"metadata":{},"sourceType":"script"}