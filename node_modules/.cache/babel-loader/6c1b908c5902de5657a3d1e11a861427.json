{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [],\n  // last item in the list is the current one\n  _injected: false,\n  start: function () {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n  stop: function () {\n    ReactPerf.enableMeasure = false;\n  },\n  getLastMeasurements: function () {\n    return ReactDefaultPerf._allMeasurements;\n  },\n  printExclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Total exclusive time (ms)': roundFloat(item.exclusive),\n        'Exclusive time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  printInclusive: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  printWasted: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);\n    console.table(summary.map(function (item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  printDOM: function (measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function (item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');\n  },\n  _recordWrite: function (id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n  measure: function (moduleName, fnName, func) {\n    return function () {\n      var args = Array.prototype.slice.call(arguments, 0);\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;\n        return rv;\n      } else if (moduleName === 'ReactDOMIDOperations' || moduleName === 'ReactComponentBrowserEnvironment') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === 'mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function (update) {\n            var writeArgs = {};\n\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n\n            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(args[0], fnName, totalTime, Array.prototype.slice.call(args, 1));\n        }\n\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?\n      fnName === '_renderValidatedComponent')) {\n        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];\n\n        if (isRender) {\n          entry.counts[rootNodeID] = entry.counts[rootNodeID] || 0;\n          entry.counts[rootNodeID] += 1;\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n        var typeOfLog = isRender ? entry.exclusive : entry.inclusive;\n        typeOfLog[rootNodeID] = typeOfLog[rootNodeID] || 0;\n        typeOfLog[rootNodeID] += totalTime;\n        entry.displayNames[rootNodeID] = {\n          current: this.constructor.displayName,\n          owner: this._owner ? this._owner.constructor.displayName : '<root>'\n        };\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\nmodule.exports = ReactDefaultPerf;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactDefaultPerf.js"],"names":["DOMProperty","require","ReactDefaultPerfAnalysis","ReactMount","ReactPerf","performanceNow","roundFloat","val","Math","floor","ReactDefaultPerf","_allMeasurements","_injected","start","injection","injectMeasure","measure","length","enableMeasure","stop","getLastMeasurements","printExclusive","measurements","summary","getExclusiveSummary","console","table","map","item","componentName","inclusive","exclusive","count","log","getTotalTime","toFixed","printInclusive","getInclusiveSummary","time","printWasted","printDOM","getDOMSummary","result","ID_ATTRIBUTE_NAME","id","type","JSON","stringify","args","_recordWrite","fnName","totalTime","writes","push","moduleName","func","Array","prototype","slice","call","arguments","rv","counts","displayNames","apply","mountID","getID","forEach","update","writeArgs","fromIndex","toIndex","textContent","markupIndex","markup","parentID","rootNodeID","_rootNodeID","isRender","entry","typeOfLog","current","constructor","displayName","owner","_owner","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDefaultPerf\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactDefaultPerfAnalysis = require(\"./ReactDefaultPerfAnalysis\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar performanceNow = require(\"./performanceNow\");\n\nfunction roundFloat(val) {\n  return Math.floor(val * 100) / 100;\n}\n\nvar ReactDefaultPerf = {\n  _allMeasurements: [], // last item in the list is the current one\n  _injected: false,\n\n  start: function() {\n    if (!ReactDefaultPerf._injected) {\n      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);\n    }\n\n    ReactDefaultPerf._allMeasurements.length = 0;\n    ReactPerf.enableMeasure = true;\n  },\n\n  stop: function() {\n    ReactPerf.enableMeasure = false;\n  },\n\n  getLastMeasurements: function() {\n    return ReactDefaultPerf._allMeasurements;\n  },\n\n  printExclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Component class name': item.componentName,\n        'Total inclusive time (ms)': roundFloat(item.inclusive),\n        'Total exclusive time (ms)': roundFloat(item.exclusive),\n        'Exclusive time per instance (ms)': roundFloat(item.exclusive / item.count),\n        'Instances': item.count\n      };\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  printInclusive: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);\n    console.table(summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Inclusive time (ms)': roundFloat(item.time),\n        'Instances': item.count\n      };\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  printWasted: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(\n      measurements,\n      true\n    );\n    console.table(summary.map(function(item) {\n      return {\n        'Owner > component': item.componentName,\n        'Wasted time (ms)': item.time,\n        'Instances': item.count\n      };\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  printDOM: function(measurements) {\n    measurements = measurements || ReactDefaultPerf._allMeasurements;\n    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);\n    console.table(summary.map(function(item) {\n      var result = {};\n      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;\n      result['type'] = item.type;\n      result['args'] = JSON.stringify(item.args);\n      return result;\n    }));\n    console.log(\n      'Total time:',\n      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'\n    );\n  },\n\n  _recordWrite: function(id, fnName, totalTime, args) {\n    // TODO: totalTime isn't that useful since it doesn't count paints/reflows\n    var writes =\n      ReactDefaultPerf\n        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]\n        .writes;\n    writes[id] = writes[id] || [];\n    writes[id].push({\n      type: fnName,\n      time: totalTime,\n      args: args\n    });\n  },\n\n  measure: function(moduleName, fnName, func) {\n    return function() {var args=Array.prototype.slice.call(arguments,0);\n      var totalTime;\n      var rv;\n      var start;\n\n      if (fnName === '_renderNewRootComponent' ||\n          fnName === 'flushBatchedUpdates') {\n        // A \"measurement\" is a set of metrics recorded for each flush. We want\n        // to group the metrics for a given flush together so we can look at the\n        // components that rendered and the DOM operations that actually\n        // happened to determine the amount of \"wasted work\" performed.\n        ReactDefaultPerf._allMeasurements.push({\n          exclusive: {},\n          inclusive: {},\n          counts: {},\n          writes: {},\n          displayNames: {},\n          totalTime: 0\n        });\n        start = performanceNow();\n        rv = func.apply(this, args);\n        ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ].totalTime = performanceNow() - start;\n        return rv;\n      } else if (moduleName === 'ReactDOMIDOperations' ||\n        moduleName === 'ReactComponentBrowserEnvironment') {\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        if (fnName === 'mountImageIntoNode') {\n          var mountID = ReactMount.getID(args[1]);\n          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);\n        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {\n          // special format\n          args[0].forEach(function(update) {\n            var writeArgs = {};\n            if (update.fromIndex !== null) {\n              writeArgs.fromIndex = update.fromIndex;\n            }\n            if (update.toIndex !== null) {\n              writeArgs.toIndex = update.toIndex;\n            }\n            if (update.textContent !== null) {\n              writeArgs.textContent = update.textContent;\n            }\n            if (update.markupIndex !== null) {\n              writeArgs.markup = args[1][update.markupIndex];\n            }\n            ReactDefaultPerf._recordWrite(\n              update.parentID,\n              update.type,\n              totalTime,\n              writeArgs\n            );\n          });\n        } else {\n          // basic format\n          ReactDefaultPerf._recordWrite(\n            args[0],\n            fnName,\n            totalTime,\n            Array.prototype.slice.call(args, 1)\n          );\n        }\n        return rv;\n      } else if (moduleName === 'ReactCompositeComponent' && (\n        fnName === 'mountComponent' ||\n        fnName === 'updateComponent' || // TODO: receiveComponent()?\n        fnName === '_renderValidatedComponent')) {\n\n        var rootNodeID = fnName === 'mountComponent' ?\n          args[0] :\n          this._rootNodeID;\n        var isRender = fnName === '_renderValidatedComponent';\n        var entry = ReactDefaultPerf._allMeasurements[\n          ReactDefaultPerf._allMeasurements.length - 1\n        ];\n\n        if (isRender) {\n          entry.counts[rootNodeID] = entry.counts[rootNodeID] || 0;\n          entry.counts[rootNodeID] += 1;\n        }\n\n        start = performanceNow();\n        rv = func.apply(this, args);\n        totalTime = performanceNow() - start;\n\n        var typeOfLog = isRender ? entry.exclusive : entry.inclusive;\n        typeOfLog[rootNodeID] = typeOfLog[rootNodeID] || 0;\n        typeOfLog[rootNodeID] += totalTime;\n\n        entry.displayNames[rootNodeID] = {\n          current: this.constructor.displayName,\n          owner: this._owner ? this._owner.constructor.displayName : '<root>'\n        };\n\n        return rv;\n      } else {\n        return func.apply(this, args);\n      }\n    };\n  }\n};\n\nmodule.exports = ReactDefaultPerf;\n"]},"metadata":{},"sourceType":"script"}