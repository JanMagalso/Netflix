{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactCompositeComponent\n */\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar ReactContext = require(\"./ReactContext\");\n\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\n\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\n\nvar ReactOwner = require(\"./ReactOwner\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\n\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\n\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\n\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\n\nvar invariant = require(\"./invariant\");\n\nvar keyMirror = require(\"./keyMirror\");\n\nvar merge = require(\"./merge\");\n\nvar mixInto = require(\"./mixInto\");\n\nvar monitorCodeUse = require(\"./monitorCodeUse\");\n\nvar objMap = require(\"./objMap\");\n\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\nvar warning = require(\"./warning\");\n/**\n * Policies that describe methods in `ReactCompositeComponentInterface`.\n */\n\n\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n\n  /**\n   * These methods are overriding the base ReactCompositeComponent class.\n   */\n  OVERRIDE_BASE: null,\n\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\nvar injectedMixins = [];\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactCompositeComponent`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactCompositeComponentInterface\n * @internal\n */\n\nvar ReactCompositeComponentInterface = {\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n};\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\n\nvar RESERVED_SPEC_KEYS = {\n  displayName: function (ConvenienceConstructor, displayName) {\n    ConvenienceConstructor.componentConstructor.displayName = displayName;\n  },\n  mixins: function (ConvenienceConstructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(ConvenienceConstructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function (ConvenienceConstructor, childContextTypes) {\n    var Constructor = ConvenienceConstructor.componentConstructor;\n    validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);\n    Constructor.childContextTypes = merge(Constructor.childContextTypes, childContextTypes);\n  },\n  contextTypes: function (ConvenienceConstructor, contextTypes) {\n    var Constructor = ConvenienceConstructor.componentConstructor;\n    validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);\n    Constructor.contextTypes = merge(Constructor.contextTypes, contextTypes);\n  },\n  propTypes: function (ConvenienceConstructor, propTypes) {\n    var Constructor = ConvenienceConstructor.componentConstructor;\n    validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);\n    Constructor.propTypes = merge(Constructor.propTypes, propTypes);\n  },\n  statics: function (ConvenienceConstructor, statics) {\n    mixStaticSpecIntoComponent(ConvenienceConstructor, statics);\n  }\n};\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      require('./React').__DEV__ === true ? invariant(typeof typeDef[propName] == 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactCompositeComponent', ReactPropTypeLocationNames[location], propName) : invariant(typeof typeDef[propName] == 'function');\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactCompositeComponentInterface[name]; // Disallow overriding of base class methods unless explicitly allowed.\n\n  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {\n    require('./React').__DEV__ === true ? invariant(specPolicy === SpecPolicy.OVERRIDE_BASE, 'ReactCompositeComponentInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE);\n  } // Disallow defining methods more than once unless explicitly allowed.\n\n\n  if (proto.hasOwnProperty(name)) {\n    require('./React').__DEV__ === true ? invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED, 'ReactCompositeComponentInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED);\n  }\n}\n\nfunction validateLifeCycleOnReplaceState(instance) {\n  var compositeLifeCycleState = instance._compositeLifeCycleState;\n  require('./React').__DEV__ === true ? invariant(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, 'replaceState(...): Can only update a mounted or mounting component.') : invariant(instance.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING);\n  require('./React').__DEV__ === true ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE, 'replaceState(...): Cannot update during an existing state transition ' + '(such as within `render`). This could potentially cause an infinite ' + 'loop so it is forbidden.') : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE);\n  require('./React').__DEV__ === true ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING, 'replaceState(...): Cannot update while unmounting component. This ' + 'usually means you called setState() on an unmounted component.') : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING);\n}\n/**\n * Custom version of `mixInto` which handles policy validation and reserved\n * specification keys when building `ReactCompositeComponent` classses.\n */\n\n\nfunction mixSpecIntoComponent(ConvenienceConstructor, spec) {\n  require('./React').__DEV__ === true ? invariant(!isValidClass(spec), 'ReactCompositeComponent: You\\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(!isValidClass(spec));\n  require('./React').__DEV__ === true ? invariant(!ReactComponent.isValidComponent(spec), 'ReactCompositeComponent: You\\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(!ReactComponent.isValidComponent(spec));\n  var Constructor = ConvenienceConstructor.componentConstructor;\n  var proto = Constructor.prototype;\n\n  for (var name in spec) {\n    var property = spec[name];\n\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](ConvenienceConstructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactCompositeComponent methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isCompositeComponentMethod = (name in ReactCompositeComponentInterface);\n      var isInherited = (name in proto);\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind = isFunction && !isCompositeComponentMethod && !isInherited && !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isInherited) {\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property.\n          if (ReactCompositeComponentInterface[name] === SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(ConvenienceConstructor, statics) {\n  if (!statics) {\n    return;\n  }\n\n  for (var name in statics) {\n    var property = statics[name];\n\n    if (!statics.hasOwnProperty(name)) {\n      return;\n    }\n\n    var isInherited = (name in ConvenienceConstructor);\n    var result = property;\n\n    if (isInherited) {\n      var existingProperty = ConvenienceConstructor[name];\n      var existingType = typeof existingProperty;\n      var propertyType = typeof property;\n      require('./React').__DEV__ === true ? invariant(existingType === 'function' && propertyType === 'function', 'ReactCompositeComponent: You are attempting to define ' + '`%s` on your component more than once, but that is only supported ' + 'for functions, which are chained together. This conflict may be ' + 'due to a mixin.', name) : invariant(existingType === 'function' && propertyType === 'function');\n      result = createChainedFunction(existingProperty, property);\n    }\n\n    ConvenienceConstructor[name] = result;\n    ConvenienceConstructor.componentConstructor[name] = result;\n  }\n}\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\n\n\nfunction mergeObjectsWithNoDuplicateKeys(one, two) {\n  require('./React').__DEV__ === true ? invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects') : invariant(one && two && typeof one === 'object' && typeof two === 'object');\n  objMap(two, function (value, key) {\n    require('./React').__DEV__ === true ? invariant(one[key] === undefined, 'mergeObjectsWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: %s', key) : invariant(one[key] === undefined);\n    one[key] = value;\n  });\n  return one;\n}\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\n\n\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n\n    return mergeObjectsWithNoDuplicateKeys(a, b);\n  };\n}\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\n\n\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\nif (require('./React').__DEV__ === true) {\n  var unmountedPropertyWhitelist = {\n    constructor: true,\n    construct: true,\n    isOwnedBy: true,\n    // should be deprecated but can have code mod (internal)\n    type: true,\n    props: true,\n    // currently private but belong on the descriptor and are valid for use\n    // inside the framework:\n    __keyValidated__: true,\n    _owner: true,\n    _currentContext: true\n  };\n  var componentInstanceProperties = {\n    __keyValidated__: true,\n    __keySetters: true,\n    _compositeLifeCycleState: true,\n    _currentContext: true,\n    _defaultProps: true,\n    _instance: true,\n    _lifeCycleState: true,\n    _mountDepth: true,\n    _owner: true,\n    _pendingCallbacks: true,\n    _pendingContext: true,\n    _pendingForceUpdate: true,\n    _pendingOwner: true,\n    _pendingProps: true,\n    _pendingState: true,\n    _renderedComponent: true,\n    _rootNodeID: true,\n    context: true,\n    props: true,\n    refs: true,\n    state: true,\n    // These are known instance properties coming from other sources\n    _pendingQueries: true,\n    _queryPropListeners: true,\n    queryParams: true\n  };\n  var hasWarnedOnComponentType = {};\n  var warningStackCounter = 0;\n\n  var issueMembraneWarning = function (instance, key) {\n    var isWhitelisted = unmountedPropertyWhitelist.hasOwnProperty(key);\n\n    if (warningStackCounter > 0 || isWhitelisted) {\n      return;\n    }\n\n    var name = instance.constructor.displayName || 'Unknown';\n    var owner = ReactCurrentOwner.current;\n    var ownerName = owner && owner.constructor.displayName || 'Unknown';\n    var warningKey = key + '|' + name + '|' + ownerName;\n\n    if (hasWarnedOnComponentType.hasOwnProperty(warningKey)) {\n      // We have already warned for this combination. Skip it this time.\n      return;\n    }\n\n    hasWarnedOnComponentType[warningKey] = true;\n    var context = owner ? ' in ' + ownerName + '.' : ' at the top level.';\n    var staticMethodExample = '<' + name + ' />.type.' + key + '(...)';\n    monitorCodeUse('react_descriptor_property_access', {\n      component: name\n    });\n    console.warn('Invalid access to component property \"' + key + '\" on ' + name + context + ' See http://fb.me/react-warning-descriptors .' + ' Use a static method instead: ' + staticMethodExample);\n  };\n\n  var wrapInMembraneFunction = function (fn, thisBinding) {\n    if (fn.__reactMembraneFunction && fn.__reactMembraneSelf === thisBinding) {\n      return fn.__reactMembraneFunction;\n    }\n\n    return fn.__reactMembraneFunction = function () {\n      /**\n       * By getting this function, you've already received a warning. The\n       * internals of this function will likely cause more warnings. To avoid\n       * Spamming too much we disable any warning triggered inside of this\n       * stack.\n       */\n      warningStackCounter++;\n\n      try {\n        // If the this binding is unchanged, we defer to the real component.\n        // This is important to keep some referential integrity in the\n        // internals. E.g. owner equality check.\n        var self = this === thisBinding ? this.__realComponentInstance : this;\n        return fn.apply(self, arguments);\n      } finally {\n        warningStackCounter--;\n      }\n    };\n  };\n\n  var defineMembraneProperty = function (membrane, prototype, key) {\n    Object.defineProperty(membrane, key, {\n      configurable: false,\n      enumerable: true,\n      get: function () {\n        if (this === membrane) {\n          // We're allowed to access the prototype directly.\n          return prototype[key];\n        }\n\n        issueMembraneWarning(this, key);\n        var realValue = this.__realComponentInstance[key]; // If the real value is a function, we need to provide a wrapper that\n        // disables nested warnings. The properties type and constructors are\n        // expected to the be constructors and therefore is often use with an\n        // equality check and we shouldn't try to rebind those.\n\n        if (typeof realValue === 'function' && key !== 'type' && key !== 'constructor') {\n          return wrapInMembraneFunction(realValue, this);\n        }\n\n        return realValue;\n      },\n      set: function (value) {\n        if (this === membrane) {\n          // We're allowed to set a value on the prototype directly.\n          prototype[key] = value;\n          return;\n        }\n\n        issueMembraneWarning(this, key);\n        this.__realComponentInstance[key] = value;\n      }\n    });\n  };\n  /**\n   * Creates a membrane prototype which wraps the original prototype. If any\n   * property is accessed in an unmounted state, a warning is issued.\n   *\n   * @param {object} prototype Original prototype.\n   * @return {object} The membrane prototype.\n   * @private\n   */\n\n\n  var createMountWarningMembrane = function (prototype) {\n    var membrane = {};\n    var key;\n\n    for (key in prototype) {\n      defineMembraneProperty(membrane, prototype, key);\n    } // These are properties that goes into the instance but not the prototype.\n    // We can create the membrane on the prototype even though this will\n    // result in a faulty hasOwnProperty check it's better perf.\n\n\n    for (key in componentInstanceProperties) {\n      if (componentInstanceProperties.hasOwnProperty(key) && !(key in prototype)) {\n        defineMembraneProperty(membrane, prototype, key);\n      }\n    }\n\n    return membrane;\n  };\n  /**\n   * Creates a membrane constructor which wraps the component that gets mounted.\n   *\n   * @param {function} constructor Original constructor.\n   * @return {function} The membrane constructor.\n   * @private\n   */\n\n\n  var createDescriptorProxy = function (constructor) {\n    try {\n      var ProxyConstructor = function () {\n        this.__realComponentInstance = new constructor(); // We can only safely pass through known instance variables. Unknown\n        // expandos are not safe. Use the real mounted instance to avoid this\n        // problem if it blows something up.\n\n        Object.freeze(this);\n      };\n\n      ProxyConstructor.prototype = createMountWarningMembrane(constructor.prototype);\n      return ProxyConstructor;\n    } catch (x) {\n      // In IE8 define property will fail on non-DOM objects. If anything in\n      // the membrane creation fails, we'll bail out and just use the plain\n      // constructor without warnings.\n      return constructor;\n    }\n  };\n}\n/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+------------------------------------------------------+--------+\n * |  UN   |                    MOUNTED                           |   UN   |\n * |MOUNTED|                                                      | MOUNTED|\n * +-------+------------------------------------------------------+--------+\n * |       ^--------+   +------+   +------+   +------+   +--------^        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |\n * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       +--------+   +------+   +------+   +------+   +--------+        |\n * |       |                                                      |        |\n * +-------+------------------------------------------------------+--------+\n */\n\n\nvar CompositeLifeCycle = keyMirror({\n  /**\n   * Components in the process of being mounted respond to state changes\n   * differently.\n   */\n  MOUNTING: null,\n\n  /**\n   * Components in the process of being unmounted are guarded against state\n   * changes.\n   */\n  UNMOUNTING: null,\n\n  /**\n   * Components that are mounted and receiving new props respond to state\n   * changes differently.\n   */\n  RECEIVING_PROPS: null,\n\n  /**\n   * Components that are mounted and receiving new state are guarded against\n   * additional state changes.\n   */\n  RECEIVING_STATE: null\n});\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\n\nvar ReactCompositeComponentMixin = {\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {?object} initialProps\n   * @param {*} children\n   * @final\n   * @internal\n   */\n  construct: function (initialProps, children) {\n    // Children can be either an array or more than one argument\n    ReactComponent.Mixin.construct.apply(this, arguments);\n    ReactOwner.Mixin.construct.apply(this, arguments);\n    this.state = null;\n    this._pendingState = null;\n    this.context = null;\n    this._currentContext = ReactContext.current;\n    this._pendingContext = null; // The descriptor that was used to instantiate this component. Will be\n    // set by the instantiator instead of the constructor since this\n    // constructor is currently used by both instances and descriptors.\n\n    this._descriptor = null;\n    this._compositeLifeCycleState = null;\n  },\n\n  /**\n   * Components in the intermediate state now has cyclic references. To avoid\n   * breaking JSON serialization we expose a custom JSON format.\n   * @return {object} JSON compatible representation.\n   * @internal\n   * @final\n   */\n  toJSON: function () {\n    return {\n      type: this.type,\n      props: this.props\n    };\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function () {\n    return ReactComponent.Mixin.isMounted.call(this) && this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: ReactPerf.measure('ReactCompositeComponent', 'mountComponent', function (rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);\n    this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;\n    this.context = this._processContext(this._currentContext);\n    this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;\n    this.props = this._processProps(this.props);\n\n    if (this.__reactAutoBindMap) {\n      this._bindAutoBindMethods();\n    }\n\n    this.state = this.getInitialState ? this.getInitialState() : null;\n    require('./React').__DEV__ === true ? invariant(typeof this.state === 'object' && !Array.isArray(this.state), '%s.getInitialState(): must return an object or null', this.constructor.displayName || 'ReactCompositeComponent') : invariant(typeof this.state === 'object' && !Array.isArray(this.state));\n    this._pendingState = null;\n    this._pendingForceUpdate = false;\n\n    if (this.componentWillMount) {\n      this.componentWillMount(); // When mounting, calls to `setState` by `componentWillMount` will set\n      // `this._pendingState` without triggering a re-render.\n\n      if (this._pendingState) {\n        this.state = this._pendingState;\n        this._pendingState = null;\n      }\n    }\n\n    this._renderedComponent = instantiateReactComponent(this._renderValidatedComponent()); // Done with mounting, `setState` will now trigger UI changes.\n\n    this._compositeLifeCycleState = null;\n\n    var markup = this._renderedComponent.mountComponent(rootID, transaction, mountDepth + 1);\n\n    if (this.componentDidMount) {\n      transaction.getReactMountReady().enqueue(this, this.componentDidMount);\n    }\n\n    return markup;\n  }),\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function () {\n    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;\n\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n\n    this._compositeLifeCycleState = null;\n    this._defaultProps = null;\n\n    this._renderedComponent.unmountComponent();\n\n    this._renderedComponent = null;\n    ReactComponent.Mixin.unmountComponent.call(this); // Some existing components rely on this.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: this.props = null;\n    // TODO: this.state = null;\n  },\n\n  /**\n   * Sets a subset of the state. Always use this or `replaceState` to mutate\n   * state. You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * There is no guarantee that calls to `setState` will run synchronously,\n   * as they may eventually be batched together.  You can provide an optional\n   * callback that will be executed when the call to setState is actually\n   * completed.\n   *\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  setState: function (partialState, callback) {\n    require('./React').__DEV__ === true ? invariant(typeof partialState === 'object' || partialState == null, 'setState(...): takes an object of state variables to update.') : invariant(typeof partialState === 'object' || partialState == null);\n\n    if (require('./React').__DEV__ === true) {\n      require('./React').__DEV__ === true ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : null;\n    } // Merge with `_pendingState` if it exists, otherwise with existing state.\n\n\n    this.replaceState(merge(this._pendingState || this.state, partialState), callback);\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  replaceState: function (completeState, callback) {\n    validateLifeCycleOnReplaceState(this);\n    this._pendingState = completeState;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function (context) {\n    var maskedContext = null;\n    var contextTypes = this.constructor.contextTypes;\n\n    if (contextTypes) {\n      maskedContext = {};\n\n      for (var contextName in contextTypes) {\n        maskedContext[contextName] = context[contextName];\n      }\n\n      if (require('./React').__DEV__ === true) {\n        this._checkPropTypes(contextTypes, maskedContext, ReactPropTypeLocations.context);\n      }\n    }\n\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function (currentContext) {\n    var childContext = this.getChildContext && this.getChildContext();\n    var displayName = this.constructor.displayName || 'ReactCompositeComponent';\n\n    if (childContext) {\n      require('./React').__DEV__ === true ? invariant(typeof this.constructor.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', displayName) : invariant(typeof this.constructor.childContextTypes === 'object');\n\n      if (require('./React').__DEV__ === true) {\n        this._checkPropTypes(this.constructor.childContextTypes, childContext, ReactPropTypeLocations.childContext);\n      }\n\n      for (var name in childContext) {\n        require('./React').__DEV__ === true ? invariant(name in this.constructor.childContextTypes, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', displayName, name) : invariant(name in this.constructor.childContextTypes);\n      }\n\n      return merge(currentContext, childContext);\n    }\n\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function (newProps) {\n    var props = merge(newProps);\n    var defaultProps = this._defaultProps;\n\n    for (var propName in defaultProps) {\n      if (typeof props[propName] === 'undefined') {\n        props[propName] = defaultProps[propName];\n      }\n    }\n\n    if (require('./React').__DEV__ === true) {\n      var propTypes = this.constructor.propTypes;\n\n      if (propTypes) {\n        this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);\n      }\n    }\n\n    return props;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function (propTypes, props, location) {\n    var componentName = this.constructor.displayName;\n\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        propTypes[propName](props, propName, componentName, location);\n      }\n    }\n  },\n  performUpdateIfNecessary: function () {\n    var compositeLifeCycleState = this._compositeLifeCycleState; // Do not trigger a state transition if we are in the middle of mounting or\n    // receiving props because both of those will already be doing this.\n\n    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING || compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {\n      return;\n    }\n\n    ReactComponent.Mixin.performUpdateIfNecessary.call(this);\n  },\n\n  /**\n   * If any of `_pendingProps`, `_pendingState`, or `_pendingForceUpdate` is\n   * set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _performUpdateIfNecessary: function (transaction) {\n    if (this._pendingProps == null && this._pendingState == null && this._pendingContext == null && !this._pendingForceUpdate) {\n      return;\n    }\n\n    var nextFullContext = this._pendingContext || this._currentContext;\n\n    var nextContext = this._processContext(nextFullContext);\n\n    this._pendingContext = null;\n    var nextProps = this.props;\n\n    if (this._pendingProps != null) {\n      nextProps = this._processProps(this._pendingProps);\n      this._pendingProps = null;\n      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;\n\n      if (this.componentWillReceiveProps) {\n        this.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE; // Unlike props, state, and context, we specifically don't want to set\n    // _pendingOwner to null here because it's possible for a component to have\n    // a null owner, so we instead make `this._owner === this._pendingOwner`\n    // mean that there's no owner change pending.\n\n    var nextOwner = this._pendingOwner;\n    var nextState = this._pendingState || this.state;\n    this._pendingState = null;\n\n    try {\n      if (this._pendingForceUpdate || !this.shouldComponentUpdate || this.shouldComponentUpdate(nextProps, nextState, nextContext)) {\n        this._pendingForceUpdate = false; // Will set `this.props`, `this.state` and `this.context`.\n\n        this._performComponentUpdate(nextProps, nextOwner, nextState, nextFullContext, nextContext, transaction);\n      } else {\n        // If it's determined that a component should not update, we still want\n        // to set props and state.\n        this.props = nextProps;\n        this._owner = nextOwner;\n        this.state = nextState;\n        this._currentContext = nextFullContext;\n        this.context = nextContext;\n      }\n    } finally {\n      this._compositeLifeCycleState = null;\n    }\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {object} nextProps Next object to set as properties.\n   * @param {?ReactComponent} nextOwner Next component to set as owner\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextFullContext Next object to set as _currentContext.\n   * @param {?object} nextContext Next object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _performComponentUpdate: function (nextProps, nextOwner, nextState, nextFullContext, nextContext, transaction) {\n    var prevProps = this.props;\n    var prevOwner = this._owner;\n    var prevState = this.state;\n    var prevContext = this.context;\n\n    if (this.componentWillUpdate) {\n      this.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this.props = nextProps;\n    this._owner = nextOwner;\n    this.state = nextState;\n    this._currentContext = nextFullContext;\n    this.context = nextContext;\n    this.updateComponent(transaction, prevProps, prevOwner, prevState, prevContext);\n\n    if (this.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(this, this.componentDidUpdate.bind(this, prevProps, prevState, prevContext));\n    }\n  },\n  receiveComponent: function (nextComponent, transaction) {\n    if (nextComponent === this._descriptor) {\n      // Since props and context are immutable after the component is\n      // mounted, we can do a cheap identity compare here to determine\n      // if this is a superfluous reconcile.\n      return;\n    } // Update the descriptor that was last used by this component instance\n\n\n    this._descriptor = nextComponent;\n    this._pendingContext = nextComponent._currentContext;\n    ReactComponent.Mixin.receiveComponent.call(this, nextComponent, transaction);\n  },\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} prevProps\n   * @param {?ReactComponent} prevOwner\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure('ReactCompositeComponent', 'updateComponent', function (transaction, prevProps, prevOwner, prevState, prevContext) {\n    ReactComponent.Mixin.updateComponent.call(this, transaction, prevProps, prevOwner);\n    var prevComponentInstance = this._renderedComponent;\n\n    var nextComponent = this._renderValidatedComponent();\n\n    if (shouldUpdateReactComponent(prevComponentInstance, nextComponent)) {\n      prevComponentInstance.receiveComponent(nextComponent, transaction);\n    } else {\n      // These two IDs are actually the same! But nothing should rely on that.\n      var thisID = this._rootNodeID;\n      var prevComponentID = prevComponentInstance._rootNodeID;\n      prevComponentInstance.unmountComponent();\n      this._renderedComponent = instantiateReactComponent(nextComponent);\n\n      var nextMarkup = this._renderedComponent.mountComponent(thisID, transaction, this._mountDepth + 1);\n\n      ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(prevComponentID, nextMarkup);\n    }\n  }),\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {?function} callback Called after update is complete.\n   * @final\n   * @protected\n   */\n  forceUpdate: function (callback) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    require('./React').__DEV__ === true ? invariant(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING, 'forceUpdate(...): Can only force an update on mounted or mounting ' + 'components.') : invariant(this.isMounted() || compositeLifeCycleState === CompositeLifeCycle.MOUNTING);\n    require('./React').__DEV__ === true ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE && compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING, 'forceUpdate(...): Cannot force an update while unmounting component ' + 'or during an existing state transition (such as within `render`).') : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE && compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING);\n    this._pendingForceUpdate = true;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: ReactPerf.measure('ReactCompositeComponent', '_renderValidatedComponent', function () {\n    var renderedComponent;\n    var previousContext = ReactContext.current;\n    ReactContext.current = this._processChildContext(this._currentContext);\n    ReactCurrentOwner.current = this;\n\n    try {\n      renderedComponent = this.render();\n    } finally {\n      ReactContext.current = previousContext;\n      ReactCurrentOwner.current = null;\n    }\n\n    require('./React').__DEV__ === true ? invariant(ReactComponent.isValidComponent(renderedComponent), '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned null, undefined, an array, or some other invalid object.', this.constructor.displayName || 'ReactCompositeComponent') : invariant(ReactComponent.isValidComponent(renderedComponent));\n    return renderedComponent;\n  }),\n\n  /**\n   * @private\n   */\n  _bindAutoBindMethods: function () {\n    for (var autoBindKey in this.__reactAutoBindMap) {\n      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n        continue;\n      }\n\n      var method = this.__reactAutoBindMap[autoBindKey];\n      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(method, this.constructor.displayName + '.' + autoBindKey));\n    }\n  },\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {function} method Method to be bound.\n   * @private\n   */\n  _bindAutoBindMethod: function (method) {\n    var component = this;\n\n    var boundMethod = function () {\n      return method.apply(component, arguments);\n    };\n\n    if (require('./React').__DEV__ === true) {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n\n      boundMethod.bind = function (newThis) {\n        var args = Array.prototype.slice.call(arguments, 1); // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n\n        if (newThis !== component && newThis !== null) {\n          monitorCodeUse('react_bind_warning', {\n            component: componentName\n          });\n          console.warn('bind(): React component methods may only be bound to the ' + 'component instance. See ' + componentName);\n        } else if (!args.length) {\n          monitorCodeUse('react_bind_warning', {\n            component: componentName\n          });\n          console.warn('bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See ' + componentName);\n          return boundMethod;\n        }\n\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n\n    return boundMethod;\n  }\n};\n\nvar ReactCompositeComponentBase = function () {};\n\nmixInto(ReactCompositeComponentBase, ReactComponent.Mixin);\nmixInto(ReactCompositeComponentBase, ReactOwner.Mixin);\nmixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);\nmixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);\n/**\n * Checks if a value is a valid component constructor.\n *\n * @param {*}\n * @return {boolean}\n * @public\n */\n\nfunction isValidClass(componentClass) {\n  return componentClass instanceof Function && 'componentConstructor' in componentClass && componentClass.componentConstructor instanceof Function;\n}\n/**\n * Module for creating composite components.\n *\n * @class ReactCompositeComponent\n * @extends ReactComponent\n * @extends ReactOwner\n * @extends ReactPropTransferer\n */\n\n\nvar ReactCompositeComponent = {\n  LifeCycle: CompositeLifeCycle,\n  Base: ReactCompositeComponentBase,\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function (spec) {\n    var Constructor = function () {};\n\n    Constructor.prototype = new ReactCompositeComponentBase();\n    Constructor.prototype.constructor = Constructor;\n    var DescriptorConstructor = Constructor;\n\n    var ConvenienceConstructor = function (props, children) {\n      var descriptor = new DescriptorConstructor();\n      descriptor.construct.apply(descriptor, arguments);\n      return descriptor;\n    };\n\n    ConvenienceConstructor.componentConstructor = Constructor;\n    Constructor.ConvenienceConstructor = ConvenienceConstructor;\n    ConvenienceConstructor.originalSpec = spec;\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, ConvenienceConstructor));\n    mixSpecIntoComponent(ConvenienceConstructor, spec);\n    require('./React').__DEV__ === true ? invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.') : invariant(Constructor.prototype.render);\n\n    if (require('./React').__DEV__ === true) {\n      if (Constructor.prototype.componentShouldUpdate) {\n        monitorCodeUse('react_component_should_update_warning', {\n          component: spec.displayName\n        });\n        console.warn((spec.displayName || 'A component') + ' has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.');\n      }\n    } // Expose the convience constructor on the prototype so that it can be\n    // easily accessed on descriptors. E.g. <Foo />.type === Foo.type and for\n    // static methods like <Foo />.type.staticMethod();\n    // This should not be named constructor since this may not be the function\n    // that created the descriptor, and it may not even be a constructor.\n\n\n    ConvenienceConstructor.type = Constructor;\n    Constructor.prototype.type = Constructor; // Reduce time spent doing lookups by setting these on the prototype.\n\n    for (var methodName in ReactCompositeComponentInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    if (require('./React').__DEV__ === true) {\n      // In DEV the convenience constructor generates a proxy to another\n      // instance around it to warn about access to properties on the\n      // descriptor.\n      DescriptorConstructor = createDescriptorProxy(Constructor);\n    }\n\n    return ConvenienceConstructor;\n  },\n  isValidClass: isValidClass,\n  injection: {\n    injectMixin: function (mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\nmodule.exports = ReactCompositeComponent;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactCompositeComponent.js"],"names":["ReactComponent","require","ReactContext","ReactCurrentOwner","ReactErrorUtils","ReactOwner","ReactPerf","ReactPropTransferer","ReactPropTypeLocations","ReactPropTypeLocationNames","ReactUpdates","instantiateReactComponent","invariant","keyMirror","merge","mixInto","monitorCodeUse","objMap","shouldUpdateReactComponent","warning","SpecPolicy","DEFINE_ONCE","DEFINE_MANY","OVERRIDE_BASE","DEFINE_MANY_MERGED","injectedMixins","ReactCompositeComponentInterface","mixins","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","updateComponent","RESERVED_SPEC_KEYS","displayName","ConvenienceConstructor","componentConstructor","i","length","mixSpecIntoComponent","Constructor","validateTypeDef","childContext","context","prop","mixStaticSpecIntoComponent","typeDef","location","propName","hasOwnProperty","__DEV__","validateMethodOverride","proto","name","specPolicy","ReactCompositeComponentMixin","validateLifeCycleOnReplaceState","instance","compositeLifeCycleState","_compositeLifeCycleState","isMounted","CompositeLifeCycle","MOUNTING","RECEIVING_STATE","UNMOUNTING","spec","isValidClass","isValidComponent","prototype","property","isCompositeComponentMethod","isInherited","markedDontBind","__reactDontBind","isFunction","shouldAutoBind","__reactAutoBindMap","createMergedResultFunction","createChainedFunction","result","existingProperty","existingType","propertyType","mergeObjectsWithNoDuplicateKeys","one","two","value","key","undefined","mergedResult","a","apply","arguments","b","chainedFunction","unmountedPropertyWhitelist","constructor","construct","isOwnedBy","type","props","__keyValidated__","_owner","_currentContext","componentInstanceProperties","__keySetters","_defaultProps","_instance","_lifeCycleState","_mountDepth","_pendingCallbacks","_pendingContext","_pendingForceUpdate","_pendingOwner","_pendingProps","_pendingState","_renderedComponent","_rootNodeID","refs","state","_pendingQueries","_queryPropListeners","queryParams","hasWarnedOnComponentType","warningStackCounter","issueMembraneWarning","isWhitelisted","owner","current","ownerName","warningKey","staticMethodExample","component","console","warn","wrapInMembraneFunction","fn","thisBinding","__reactMembraneFunction","__reactMembraneSelf","self","__realComponentInstance","defineMembraneProperty","membrane","Object","defineProperty","configurable","enumerable","get","realValue","set","createMountWarningMembrane","createDescriptorProxy","ProxyConstructor","freeze","x","RECEIVING_PROPS","initialProps","children","Mixin","_descriptor","toJSON","call","mountComponent","measure","rootID","transaction","mountDepth","_processContext","_processProps","_bindAutoBindMethods","Array","isArray","_renderValidatedComponent","markup","getReactMountReady","enqueue","unmountComponent","setState","partialState","callback","replaceState","completeState","enqueueUpdate","maskedContext","contextName","_checkPropTypes","_processChildContext","currentContext","newProps","defaultProps","componentName","performUpdateIfNecessary","_performUpdateIfNecessary","nextFullContext","nextContext","nextProps","nextOwner","nextState","_performComponentUpdate","prevProps","prevOwner","prevState","prevContext","bind","receiveComponent","nextComponent","prevComponentInstance","thisID","prevComponentID","nextMarkup","BackendIDOperations","dangerouslyReplaceNodeWithMarkupByID","forceUpdate","renderedComponent","previousContext","autoBindKey","method","_bindAutoBindMethod","guard","boundMethod","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","_bind","newThis","args","slice","reboundMethod","ReactCompositeComponentBase","componentClass","Function","ReactCompositeComponent","LifeCycle","Base","createClass","DescriptorConstructor","descriptor","originalSpec","forEach","componentShouldUpdate","methodName","injection","injectMixin","mixin","push","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIK,SAAS,GAAGL,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIM,mBAAmB,GAAGN,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIO,sBAAsB,GAAGP,OAAO,CAAC,0BAAD,CAApC;;AACA,IAAIQ,0BAA0B,GAAGR,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAIS,YAAY,GAAGT,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIU,yBAAyB,GAAGV,OAAO,CAAC,6BAAD,CAAvC;;AACA,IAAIW,SAAS,GAAGX,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIY,SAAS,GAAGZ,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIa,KAAK,GAAGb,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIc,OAAO,GAAGd,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIe,cAAc,GAAGf,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIgB,MAAM,GAAGhB,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIiB,0BAA0B,GAAGjB,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAIkB,OAAO,GAAGlB,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;;;AACA,IAAImB,UAAU,GAAGP,SAAS,CAAC;AACzB;AACF;AACA;AACEQ,EAAAA,WAAW,EAAE,IAJY;;AAKzB;AACF;AACA;AACA;AACEC,EAAAA,WAAW,EAAE,IATY;;AAUzB;AACF;AACA;AACEC,EAAAA,aAAa,EAAE,IAbU;;AAczB;AACF;AACA;AACA;AACA;AACEC,EAAAA,kBAAkB,EAAE;AAnBK,CAAD,CAA1B;AAuBA,IAAIC,cAAc,GAAG,EAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,gCAAgC,GAAG;AAErC;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,MAAM,EAAEP,UAAU,CAACE,WARkB;;AAUrC;AACF;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,OAAO,EAAER,UAAU,CAACE,WAjBiB;;AAmBrC;AACF;AACA;AACA;AACA;AACA;AACEO,EAAAA,SAAS,EAAET,UAAU,CAACE,WAzBe;;AA2BrC;AACF;AACA;AACA;AACA;AACA;AACEQ,EAAAA,YAAY,EAAEV,UAAU,CAACE,WAjCY;;AAmCrC;AACF;AACA;AACA;AACA;AACA;AACES,EAAAA,iBAAiB,EAAEX,UAAU,CAACE,WAzCO;AA2CrC;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEU,EAAAA,eAAe,EAAEZ,UAAU,CAACI,kBAvDS;;AAyDrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACES,EAAAA,eAAe,EAAEb,UAAU,CAACI,kBAvES;;AAyErC;AACF;AACA;AACA;AACEU,EAAAA,eAAe,EAAEd,UAAU,CAACI,kBA7ES;;AA+ErC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEW,EAAAA,MAAM,EAAEf,UAAU,CAACC,WA/FkB;AAmGrC;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACEe,EAAAA,kBAAkB,EAAEhB,UAAU,CAACE,WA5GM;;AA8GrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEe,EAAAA,iBAAiB,EAAEjB,UAAU,CAACE,WAxHO;;AA0HrC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactCompositeComponent\n */\n\n\"use strict\";\n\nvar ReactComponent = require(\"./ReactComponent\");\nvar ReactContext = require(\"./ReactContext\");\nvar ReactCurrentOwner = require(\"./ReactCurrentOwner\");\nvar ReactErrorUtils = require(\"./ReactErrorUtils\");\nvar ReactOwner = require(\"./ReactOwner\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactPropTransferer = require(\"./ReactPropTransferer\");\nvar ReactPropTypeLocations = require(\"./ReactPropTypeLocations\");\nvar ReactPropTypeLocationNames = require(\"./ReactPropTypeLocationNames\");\nvar ReactUpdates = require(\"./ReactUpdates\");\n\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\nvar keyMirror = require(\"./keyMirror\");\nvar merge = require(\"./merge\");\nvar mixInto = require(\"./mixInto\");\nvar monitorCodeUse = require(\"./monitorCodeUse\");\nvar objMap = require(\"./objMap\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\nvar warning = require(\"./warning\");\n\n/**\n * Policies that describe methods in `ReactCompositeComponentInterface`.\n */\nvar SpecPolicy = keyMirror({\n  /**\n   * These methods may be defined only once by the class specification or mixin.\n   */\n  DEFINE_ONCE: null,\n  /**\n   * These methods may be defined by both the class specification and mixins.\n   * Subsequent definitions will be chained. These methods must return void.\n   */\n  DEFINE_MANY: null,\n  /**\n   * These methods are overriding the base ReactCompositeComponent class.\n   */\n  OVERRIDE_BASE: null,\n  /**\n   * These methods are similar to DEFINE_MANY, except we assume they return\n   * objects. We try to merge the keys of the return values of all the mixed in\n   * functions. If there is a key conflict we throw.\n   */\n  DEFINE_MANY_MERGED: null\n});\n\n\nvar injectedMixins = [];\n\n/**\n * Composite components are higher-level components that compose other composite\n * or native components.\n *\n * To create a new type of `ReactCompositeComponent`, pass a specification of\n * your new class to `React.createClass`. The only requirement of your class\n * specification is that you implement a `render` method.\n *\n *   var MyComponent = React.createClass({\n *     render: function() {\n *       return <div>Hello World</div>;\n *     }\n *   });\n *\n * The class specification supports a specific protocol of methods that have\n * special meaning (e.g. `render`). See `ReactCompositeComponentInterface` for\n * more the comprehensive protocol. Any other properties and methods in the\n * class specification will available on the prototype.\n *\n * @interface ReactCompositeComponentInterface\n * @internal\n */\nvar ReactCompositeComponentInterface = {\n\n  /**\n   * An array of Mixin objects to include when defining your component.\n   *\n   * @type {array}\n   * @optional\n   */\n  mixins: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * An object containing properties and methods that should be defined on\n   * the component's constructor instead of its prototype (static methods).\n   *\n   * @type {object}\n   * @optional\n   */\n  statics: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of prop types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  propTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types for this component.\n   *\n   * @type {object}\n   * @optional\n   */\n  contextTypes: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Definition of context types this component sets for its children.\n   *\n   * @type {object}\n   * @optional\n   */\n  childContextTypes: SpecPolicy.DEFINE_MANY,\n\n  // ==== Definition methods ====\n\n  /**\n   * Invoked when the component is mounted. Values in the mapping will be set on\n   * `this.props` if that prop is not specified (i.e. using an `in` check).\n   *\n   * This method is invoked before `getInitialState` and therefore cannot rely\n   * on `this.state` or use `this.setState`.\n   *\n   * @return {object}\n   * @optional\n   */\n  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Invoked once before the component is mounted. The return value will be used\n   * as the initial value of `this.state`.\n   *\n   *   getInitialState: function() {\n   *     return {\n   *       isOn: false,\n   *       fooBaz: new BazFoo()\n   *     }\n   *   }\n   *\n   * @return {object}\n   * @optional\n   */\n  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * @return {object}\n   * @optional\n   */\n  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,\n\n  /**\n   * Uses props from `this.props` and state from `this.state` to render the\n   * structure of the component.\n   *\n   * No guarantees are made about when or how often this method is invoked, so\n   * it must not have side effects.\n   *\n   *   render: function() {\n   *     var name = this.props.name;\n   *     return <div>Hello, {name}!</div>;\n   *   }\n   *\n   * @return {ReactComponent}\n   * @nosideeffects\n   * @required\n   */\n  render: SpecPolicy.DEFINE_ONCE,\n\n\n\n  // ==== Delegate methods ====\n\n  /**\n   * Invoked when the component is initially created and about to be mounted.\n   * This may have side effects, but any external subscriptions or data created\n   * by this method must be cleaned up in `componentWillUnmount`.\n   *\n   * @optional\n   */\n  componentWillMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component has been mounted and has a DOM representation.\n   * However, there is no guarantee that the DOM node is in the document.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been mounted (initialized and rendered) for the first time.\n   *\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidMount: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked before the component receives new props.\n   *\n   * Use this as an opportunity to react to a prop transition by updating the\n   * state using `this.setState`. Current props are accessed via `this.props`.\n   *\n   *   componentWillReceiveProps: function(nextProps, nextContext) {\n   *     this.setState({\n   *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n   *     });\n   *   }\n   *\n   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n   * transition may cause a state change, but the opposite is not true. If you\n   * need it, you are probably looking for `componentWillUpdate`.\n   *\n   * @param {object} nextProps\n   * @optional\n   */\n  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked while deciding if the component should be updated as a result of\n   * receiving new props, state and/or context.\n   *\n   * Use this as an opportunity to `return false` when you're certain that the\n   * transition to the new props/state/context will not require a component\n   * update.\n   *\n   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n   *     return !equal(nextProps, this.props) ||\n   *       !equal(nextState, this.state) ||\n   *       !equal(nextContext, this.context);\n   *   }\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @return {boolean} True if the component should update.\n   * @optional\n   */\n  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,\n\n  /**\n   * Invoked when the component is about to update due to a transition from\n   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n   * and `nextContext`.\n   *\n   * Use this as an opportunity to perform preparation before an update occurs.\n   *\n   * NOTE: You **cannot** use `this.setState()` in this method.\n   *\n   * @param {object} nextProps\n   * @param {?object} nextState\n   * @param {?object} nextContext\n   * @param {ReactReconcileTransaction} transaction\n   * @optional\n   */\n  componentWillUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component's DOM representation has been updated.\n   *\n   * Use this as an opportunity to operate on the DOM when the component has\n   * been updated.\n   *\n   * @param {object} prevProps\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @param {DOMElement} rootNode DOM element representing the component.\n   * @optional\n   */\n  componentDidUpdate: SpecPolicy.DEFINE_MANY,\n\n  /**\n   * Invoked when the component is about to be removed from its parent and have\n   * its DOM representation destroyed.\n   *\n   * Use this as an opportunity to deallocate any external resources.\n   *\n   * NOTE: There is no `componentDidUnmount` since your component will have been\n   * destroyed by that point.\n   *\n   * @optional\n   */\n  componentWillUnmount: SpecPolicy.DEFINE_MANY,\n\n\n\n  // ==== Advanced methods ====\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   * @overridable\n   */\n  updateComponent: SpecPolicy.OVERRIDE_BASE\n\n};\n\n/**\n * Mapping from class specification keys to special processing functions.\n *\n * Although these are declared like instance properties in the specification\n * when defining classes using `React.createClass`, they are actually static\n * and are accessible on the constructor instead of the prototype. Despite\n * being static, they must be defined outside of the \"statics\" key under\n * which all other static methods are defined.\n */\nvar RESERVED_SPEC_KEYS = {\n  displayName: function(ConvenienceConstructor, displayName) {\n    ConvenienceConstructor.componentConstructor.displayName = displayName;\n  },\n  mixins: function(ConvenienceConstructor, mixins) {\n    if (mixins) {\n      for (var i = 0; i < mixins.length; i++) {\n        mixSpecIntoComponent(ConvenienceConstructor, mixins[i]);\n      }\n    }\n  },\n  childContextTypes: function(ConvenienceConstructor, childContextTypes) {\n    var Constructor = ConvenienceConstructor.componentConstructor;\n    validateTypeDef(\n      Constructor,\n      childContextTypes,\n      ReactPropTypeLocations.childContext\n    );\n    Constructor.childContextTypes = merge(\n      Constructor.childContextTypes,\n      childContextTypes\n    );\n  },\n  contextTypes: function(ConvenienceConstructor, contextTypes) {\n    var Constructor = ConvenienceConstructor.componentConstructor;\n    validateTypeDef(\n      Constructor,\n      contextTypes,\n      ReactPropTypeLocations.context\n    );\n    Constructor.contextTypes = merge(Constructor.contextTypes, contextTypes);\n  },\n  propTypes: function(ConvenienceConstructor, propTypes) {\n    var Constructor = ConvenienceConstructor.componentConstructor;\n    validateTypeDef(\n      Constructor,\n      propTypes,\n      ReactPropTypeLocations.prop\n    );\n    Constructor.propTypes = merge(Constructor.propTypes, propTypes);\n  },\n  statics: function(ConvenienceConstructor, statics) {\n    mixStaticSpecIntoComponent(ConvenienceConstructor, statics);\n  }\n};\n\nfunction validateTypeDef(Constructor, typeDef, location) {\n  for (var propName in typeDef) {\n    if (typeDef.hasOwnProperty(propName)) {\n      (require('./React').__DEV__ === true ? invariant(\n        typeof typeDef[propName] == 'function',\n        '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n        'React.PropTypes.',\n        Constructor.displayName || 'ReactCompositeComponent',\n        ReactPropTypeLocationNames[location],\n        propName\n      ) : invariant(typeof typeDef[propName] == 'function'));\n    }\n  }\n}\n\nfunction validateMethodOverride(proto, name) {\n  var specPolicy = ReactCompositeComponentInterface[name];\n\n  // Disallow overriding of base class methods unless explicitly allowed.\n  if (ReactCompositeComponentMixin.hasOwnProperty(name)) {\n    (require('./React').__DEV__ === true ? invariant(\n      specPolicy === SpecPolicy.OVERRIDE_BASE,\n      'ReactCompositeComponentInterface: You are attempting to override ' +\n      '`%s` from your class specification. Ensure that your method names ' +\n      'do not overlap with React methods.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));\n  }\n\n  // Disallow defining methods more than once unless explicitly allowed.\n  if (proto.hasOwnProperty(name)) {\n    (require('./React').__DEV__ === true ? invariant(\n      specPolicy === SpecPolicy.DEFINE_MANY ||\n      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,\n      'ReactCompositeComponentInterface: You are attempting to define ' +\n      '`%s` on your component more than once. This conflict may be due ' +\n      'to a mixin.',\n      name\n    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||\n    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));\n  }\n}\n\nfunction validateLifeCycleOnReplaceState(instance) {\n  var compositeLifeCycleState = instance._compositeLifeCycleState;\n  (require('./React').__DEV__ === true ? invariant(\n    instance.isMounted() ||\n      compositeLifeCycleState === CompositeLifeCycle.MOUNTING,\n    'replaceState(...): Can only update a mounted or mounting component.'\n  ) : invariant(instance.isMounted() ||\n    compositeLifeCycleState === CompositeLifeCycle.MOUNTING));\n  (require('./React').__DEV__ === true ? invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE,\n    'replaceState(...): Cannot update during an existing state transition ' +\n    '(such as within `render`). This could potentially cause an infinite ' +\n    'loop so it is forbidden.'\n  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE));\n  (require('./React').__DEV__ === true ? invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,\n    'replaceState(...): Cannot update while unmounting component. This ' +\n    'usually means you called setState() on an unmounted component.'\n  ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));\n}\n\n/**\n * Custom version of `mixInto` which handles policy validation and reserved\n * specification keys when building `ReactCompositeComponent` classses.\n */\nfunction mixSpecIntoComponent(ConvenienceConstructor, spec) {\n  (require('./React').__DEV__ === true ? invariant(\n    !isValidClass(spec),\n    'ReactCompositeComponent: You\\'re attempting to ' +\n    'use a component class as a mixin. Instead, just use a regular object.'\n  ) : invariant(!isValidClass(spec)));\n  (require('./React').__DEV__ === true ? invariant(\n    !ReactComponent.isValidComponent(spec),\n    'ReactCompositeComponent: You\\'re attempting to ' +\n    'use a component as a mixin. Instead, just use a regular object.'\n  ) : invariant(!ReactComponent.isValidComponent(spec)));\n\n  var Constructor = ConvenienceConstructor.componentConstructor;\n  var proto = Constructor.prototype;\n  for (var name in spec) {\n    var property = spec[name];\n    if (!spec.hasOwnProperty(name)) {\n      continue;\n    }\n\n    validateMethodOverride(proto, name);\n\n    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n      RESERVED_SPEC_KEYS[name](ConvenienceConstructor, property);\n    } else {\n      // Setup methods on prototype:\n      // The following member methods should not be automatically bound:\n      // 1. Expected ReactCompositeComponent methods (in the \"interface\").\n      // 2. Overridden methods (that were mixed in).\n      var isCompositeComponentMethod = name in ReactCompositeComponentInterface;\n      var isInherited = name in proto;\n      var markedDontBind = property && property.__reactDontBind;\n      var isFunction = typeof property === 'function';\n      var shouldAutoBind =\n        isFunction &&\n        !isCompositeComponentMethod &&\n        !isInherited &&\n        !markedDontBind;\n\n      if (shouldAutoBind) {\n        if (!proto.__reactAutoBindMap) {\n          proto.__reactAutoBindMap = {};\n        }\n        proto.__reactAutoBindMap[name] = property;\n        proto[name] = property;\n      } else {\n        if (isInherited) {\n          // For methods which are defined more than once, call the existing\n          // methods before calling the new property.\n          if (ReactCompositeComponentInterface[name] ===\n              SpecPolicy.DEFINE_MANY_MERGED) {\n            proto[name] = createMergedResultFunction(proto[name], property);\n          } else {\n            proto[name] = createChainedFunction(proto[name], property);\n          }\n        } else {\n          proto[name] = property;\n        }\n      }\n    }\n  }\n}\n\nfunction mixStaticSpecIntoComponent(ConvenienceConstructor, statics) {\n  if (!statics) {\n    return;\n  }\n  for (var name in statics) {\n    var property = statics[name];\n    if (!statics.hasOwnProperty(name)) {\n      return;\n    }\n\n    var isInherited = name in ConvenienceConstructor;\n    var result = property;\n    if (isInherited) {\n      var existingProperty = ConvenienceConstructor[name];\n      var existingType = typeof existingProperty;\n      var propertyType = typeof property;\n      (require('./React').__DEV__ === true ? invariant(\n        existingType === 'function' && propertyType === 'function',\n        'ReactCompositeComponent: You are attempting to define ' +\n        '`%s` on your component more than once, but that is only supported ' +\n        'for functions, which are chained together. This conflict may be ' +\n        'due to a mixin.',\n        name\n      ) : invariant(existingType === 'function' && propertyType === 'function'));\n      result = createChainedFunction(existingProperty, property);\n    }\n    ConvenienceConstructor[name] = result;\n    ConvenienceConstructor.componentConstructor[name] = result;\n  }\n}\n\n/**\n * Merge two objects, but throw if both contain the same key.\n *\n * @param {object} one The first object, which is mutated.\n * @param {object} two The second object\n * @return {object} one after it has been mutated to contain everything in two.\n */\nfunction mergeObjectsWithNoDuplicateKeys(one, two) {\n  (require('./React').__DEV__ === true ? invariant(\n    one && two && typeof one === 'object' && typeof two === 'object',\n    'mergeObjectsWithNoDuplicateKeys(): Cannot merge non-objects'\n  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));\n\n  objMap(two, function(value, key) {\n    (require('./React').__DEV__ === true ? invariant(\n      one[key] === undefined,\n      'mergeObjectsWithNoDuplicateKeys(): ' +\n      'Tried to merge two objects with the same key: %s',\n      key\n    ) : invariant(one[key] === undefined));\n    one[key] = value;\n  });\n  return one;\n}\n\n/**\n * Creates a function that invokes two functions and merges their return values.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createMergedResultFunction(one, two) {\n  return function mergedResult() {\n    var a = one.apply(this, arguments);\n    var b = two.apply(this, arguments);\n    if (a == null) {\n      return b;\n    } else if (b == null) {\n      return a;\n    }\n    return mergeObjectsWithNoDuplicateKeys(a, b);\n  };\n}\n\n/**\n * Creates a function that invokes two functions and ignores their return vales.\n *\n * @param {function} one Function to invoke first.\n * @param {function} two Function to invoke second.\n * @return {function} Function that invokes the two argument functions.\n * @private\n */\nfunction createChainedFunction(one, two) {\n  return function chainedFunction() {\n    one.apply(this, arguments);\n    two.apply(this, arguments);\n  };\n}\n\nif (require('./React').__DEV__ === true) {\n\n  var unmountedPropertyWhitelist = {\n    constructor: true,\n    construct: true,\n    isOwnedBy: true, // should be deprecated but can have code mod (internal)\n    type: true,\n    props: true,\n    // currently private but belong on the descriptor and are valid for use\n    // inside the framework:\n    __keyValidated__: true,\n    _owner: true,\n    _currentContext: true\n  };\n\n  var componentInstanceProperties = {\n    __keyValidated__: true,\n    __keySetters: true,\n    _compositeLifeCycleState: true,\n    _currentContext: true,\n    _defaultProps: true,\n    _instance: true,\n    _lifeCycleState: true,\n    _mountDepth: true,\n    _owner: true,\n    _pendingCallbacks: true,\n    _pendingContext: true,\n    _pendingForceUpdate: true,\n    _pendingOwner: true,\n    _pendingProps: true,\n    _pendingState: true,\n    _renderedComponent: true,\n    _rootNodeID: true,\n    context: true,\n    props: true,\n    refs: true,\n    state: true,\n\n    // These are known instance properties coming from other sources\n    _pendingQueries: true,\n    _queryPropListeners: true,\n    queryParams: true\n\n  };\n\n  var hasWarnedOnComponentType = {};\n\n  var warningStackCounter = 0;\n\n  var issueMembraneWarning = function(instance, key) {\n    var isWhitelisted = unmountedPropertyWhitelist.hasOwnProperty(key);\n    if (warningStackCounter > 0 || isWhitelisted) {\n      return;\n    }\n    var name = instance.constructor.displayName || 'Unknown';\n    var owner = ReactCurrentOwner.current;\n    var ownerName = (owner && owner.constructor.displayName) || 'Unknown';\n    var warningKey = key + '|' + name + '|' + ownerName;\n    if (hasWarnedOnComponentType.hasOwnProperty(warningKey)) {\n      // We have already warned for this combination. Skip it this time.\n      return;\n    }\n    hasWarnedOnComponentType[warningKey] = true;\n\n    var context = owner ? ' in ' + ownerName + '.' : ' at the top level.';\n    var staticMethodExample = '<' + name + ' />.type.' + key + '(...)';\n\n    monitorCodeUse('react_descriptor_property_access', { component: name });\n    console.warn(\n      'Invalid access to component property \"' + key + '\" on ' + name +\n      context + ' See http://fb.me/react-warning-descriptors .' +\n      ' Use a static method instead: ' + staticMethodExample\n    );\n  };\n\n  var wrapInMembraneFunction = function(fn, thisBinding) {\n    if (fn.__reactMembraneFunction && fn.__reactMembraneSelf === thisBinding) {\n      return fn.__reactMembraneFunction;\n    }\n    return fn.__reactMembraneFunction = function() {\n      /**\n       * By getting this function, you've already received a warning. The\n       * internals of this function will likely cause more warnings. To avoid\n       * Spamming too much we disable any warning triggered inside of this\n       * stack.\n       */\n      warningStackCounter++;\n      try {\n        // If the this binding is unchanged, we defer to the real component.\n        // This is important to keep some referential integrity in the\n        // internals. E.g. owner equality check.\n        var self = this === thisBinding ? this.__realComponentInstance : this;\n        return fn.apply(self, arguments);\n      } finally {\n        warningStackCounter--;\n      }\n    };\n  };\n\n  var defineMembraneProperty = function(membrane, prototype, key) {\n    Object.defineProperty(membrane, key, {\n\n      configurable: false,\n      enumerable: true,\n\n      get: function() {\n        if (this === membrane) {\n          // We're allowed to access the prototype directly.\n          return prototype[key];\n        }\n        issueMembraneWarning(this, key);\n\n        var realValue = this.__realComponentInstance[key];\n        // If the real value is a function, we need to provide a wrapper that\n        // disables nested warnings. The properties type and constructors are\n        // expected to the be constructors and therefore is often use with an\n        // equality check and we shouldn't try to rebind those.\n        if (typeof realValue === 'function' &&\n            key !== 'type' &&\n            key !== 'constructor') {\n          return wrapInMembraneFunction(realValue, this);\n        }\n        return realValue;\n      },\n\n      set: function(value) {\n        if (this === membrane) {\n          // We're allowed to set a value on the prototype directly.\n          prototype[key] = value;\n          return;\n        }\n        issueMembraneWarning(this, key);\n        this.__realComponentInstance[key] = value;\n      }\n\n    });\n  };\n\n  /**\n   * Creates a membrane prototype which wraps the original prototype. If any\n   * property is accessed in an unmounted state, a warning is issued.\n   *\n   * @param {object} prototype Original prototype.\n   * @return {object} The membrane prototype.\n   * @private\n   */\n  var createMountWarningMembrane = function(prototype) {\n    var membrane = {};\n    var key;\n    for (key in prototype) {\n      defineMembraneProperty(membrane, prototype, key);\n    }\n    // These are properties that goes into the instance but not the prototype.\n    // We can create the membrane on the prototype even though this will\n    // result in a faulty hasOwnProperty check it's better perf.\n    for (key in componentInstanceProperties) {\n      if (componentInstanceProperties.hasOwnProperty(key) &&\n          !(key in prototype)) {\n        defineMembraneProperty(membrane, prototype, key);\n      }\n    }\n    return membrane;\n  };\n\n  /**\n   * Creates a membrane constructor which wraps the component that gets mounted.\n   *\n   * @param {function} constructor Original constructor.\n   * @return {function} The membrane constructor.\n   * @private\n   */\n  var createDescriptorProxy = function(constructor) {\n    try {\n      var ProxyConstructor = function() {\n        this.__realComponentInstance = new constructor();\n\n        // We can only safely pass through known instance variables. Unknown\n        // expandos are not safe. Use the real mounted instance to avoid this\n        // problem if it blows something up.\n        Object.freeze(this);\n      };\n\n      ProxyConstructor.prototype = createMountWarningMembrane(\n        constructor.prototype\n      );\n\n      return ProxyConstructor;\n    } catch(x) {\n      // In IE8 define property will fail on non-DOM objects. If anything in\n      // the membrane creation fails, we'll bail out and just use the plain\n      // constructor without warnings.\n      return constructor;\n    }\n  };\n\n}\n\n/**\n * `ReactCompositeComponent` maintains an auxiliary life cycle state in\n * `this._compositeLifeCycleState` (which can be null).\n *\n * This is different from the life cycle state maintained by `ReactComponent` in\n * `this._lifeCycleState`. The following diagram shows how the states overlap in\n * time. There are times when the CompositeLifeCycle is null - at those times it\n * is only meaningful to look at ComponentLifeCycle alone.\n *\n * Top Row: ReactComponent.ComponentLifeCycle\n * Low Row: ReactComponent.CompositeLifeCycle\n *\n * +-------+------------------------------------------------------+--------+\n * |  UN   |                    MOUNTED                           |   UN   |\n * |MOUNTED|                                                      | MOUNTED|\n * +-------+------------------------------------------------------+--------+\n * |       ^--------+   +------+   +------+   +------+   +--------^        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |    0--|MOUNTING|-0-|RECEIV|-0-|RECEIV|-0-|RECEIV|-0-|   UN   |--->0   |\n * |       |        |   |PROPS |   | PROPS|   | STATE|   |MOUNTING|        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       |        |   |      |   |      |   |      |   |        |        |\n * |       +--------+   +------+   +------+   +------+   +--------+        |\n * |       |                                                      |        |\n * +-------+------------------------------------------------------+--------+\n */\nvar CompositeLifeCycle = keyMirror({\n  /**\n   * Components in the process of being mounted respond to state changes\n   * differently.\n   */\n  MOUNTING: null,\n  /**\n   * Components in the process of being unmounted are guarded against state\n   * changes.\n   */\n  UNMOUNTING: null,\n  /**\n   * Components that are mounted and receiving new props respond to state\n   * changes differently.\n   */\n  RECEIVING_PROPS: null,\n  /**\n   * Components that are mounted and receiving new state are guarded against\n   * additional state changes.\n   */\n  RECEIVING_STATE: null\n});\n\n/**\n * @lends {ReactCompositeComponent.prototype}\n */\nvar ReactCompositeComponentMixin = {\n\n  /**\n   * Base constructor for all composite component.\n   *\n   * @param {?object} initialProps\n   * @param {*} children\n   * @final\n   * @internal\n   */\n  construct: function(initialProps, children) {\n    // Children can be either an array or more than one argument\n    ReactComponent.Mixin.construct.apply(this, arguments);\n    ReactOwner.Mixin.construct.apply(this, arguments);\n\n    this.state = null;\n    this._pendingState = null;\n\n    this.context = null;\n    this._currentContext = ReactContext.current;\n    this._pendingContext = null;\n\n    // The descriptor that was used to instantiate this component. Will be\n    // set by the instantiator instead of the constructor since this\n    // constructor is currently used by both instances and descriptors.\n    this._descriptor = null;\n\n    this._compositeLifeCycleState = null;\n  },\n\n  /**\n   * Components in the intermediate state now has cyclic references. To avoid\n   * breaking JSON serialization we expose a custom JSON format.\n   * @return {object} JSON compatible representation.\n   * @internal\n   * @final\n   */\n  toJSON: function() {\n    return { type: this.type, props: this.props };\n  },\n\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function() {\n    return ReactComponent.Mixin.isMounted.call(this) &&\n      this._compositeLifeCycleState !== CompositeLifeCycle.MOUNTING;\n  },\n\n  /**\n   * Initializes the component, renders markup, and registers event listeners.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {?string} Rendered markup to be inserted into the DOM.\n   * @final\n   * @internal\n   */\n  mountComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    'mountComponent',\n    function(rootID, transaction, mountDepth) {\n      ReactComponent.Mixin.mountComponent.call(\n        this,\n        rootID,\n        transaction,\n        mountDepth\n      );\n      this._compositeLifeCycleState = CompositeLifeCycle.MOUNTING;\n\n      this.context = this._processContext(this._currentContext);\n      this._defaultProps = this.getDefaultProps ? this.getDefaultProps() : null;\n      this.props = this._processProps(this.props);\n\n      if (this.__reactAutoBindMap) {\n        this._bindAutoBindMethods();\n      }\n\n      this.state = this.getInitialState ? this.getInitialState() : null;\n      (require('./React').__DEV__ === true ? invariant(\n        typeof this.state === 'object' && !Array.isArray(this.state),\n        '%s.getInitialState(): must return an object or null',\n        this.constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(typeof this.state === 'object' && !Array.isArray(this.state)));\n\n      this._pendingState = null;\n      this._pendingForceUpdate = false;\n\n      if (this.componentWillMount) {\n        this.componentWillMount();\n        // When mounting, calls to `setState` by `componentWillMount` will set\n        // `this._pendingState` without triggering a re-render.\n        if (this._pendingState) {\n          this.state = this._pendingState;\n          this._pendingState = null;\n        }\n      }\n\n      this._renderedComponent = instantiateReactComponent(\n        this._renderValidatedComponent()\n      );\n\n      // Done with mounting, `setState` will now trigger UI changes.\n      this._compositeLifeCycleState = null;\n      var markup = this._renderedComponent.mountComponent(\n        rootID,\n        transaction,\n        mountDepth + 1\n      );\n      if (this.componentDidMount) {\n        transaction.getReactMountReady().enqueue(this, this.componentDidMount);\n      }\n      return markup;\n    }\n  ),\n\n  /**\n   * Releases any resources allocated by `mountComponent`.\n   *\n   * @final\n   * @internal\n   */\n  unmountComponent: function() {\n    this._compositeLifeCycleState = CompositeLifeCycle.UNMOUNTING;\n    if (this.componentWillUnmount) {\n      this.componentWillUnmount();\n    }\n    this._compositeLifeCycleState = null;\n\n    this._defaultProps = null;\n\n    this._renderedComponent.unmountComponent();\n    this._renderedComponent = null;\n\n    ReactComponent.Mixin.unmountComponent.call(this);\n\n    // Some existing components rely on this.props even after they've been\n    // destroyed (in event handlers).\n    // TODO: this.props = null;\n    // TODO: this.state = null;\n  },\n\n  /**\n   * Sets a subset of the state. Always use this or `replaceState` to mutate\n   * state. You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * There is no guarantee that calls to `setState` will run synchronously,\n   * as they may eventually be batched together.  You can provide an optional\n   * callback that will be executed when the call to setState is actually\n   * completed.\n   *\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  setState: function(partialState, callback) {\n    (require('./React').__DEV__ === true ? invariant(\n      typeof partialState === 'object' || partialState == null,\n      'setState(...): takes an object of state variables to update.'\n    ) : invariant(typeof partialState === 'object' || partialState == null));\n    if (require('./React').__DEV__ === true) {\n      (require('./React').__DEV__ === true ? warning(\n        partialState != null,\n        'setState(...): You passed an undefined or null state object; ' +\n        'instead, use forceUpdate().'\n      ) : null);\n    }\n    // Merge with `_pendingState` if it exists, otherwise with existing state.\n    this.replaceState(\n      merge(this._pendingState || this.state, partialState),\n      callback\n    );\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after state is updated.\n   * @final\n   * @protected\n   */\n  replaceState: function(completeState, callback) {\n    validateLifeCycleOnReplaceState(this);\n    this._pendingState = completeState;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * Filters the context object to only contain keys specified in\n   * `contextTypes`, and asserts that they are valid.\n   *\n   * @param {object} context\n   * @return {?object}\n   * @private\n   */\n  _processContext: function(context) {\n    var maskedContext = null;\n    var contextTypes = this.constructor.contextTypes;\n    if (contextTypes) {\n      maskedContext = {};\n      for (var contextName in contextTypes) {\n        maskedContext[contextName] = context[contextName];\n      }\n      if (require('./React').__DEV__ === true) {\n        this._checkPropTypes(\n          contextTypes,\n          maskedContext,\n          ReactPropTypeLocations.context\n        );\n      }\n    }\n    return maskedContext;\n  },\n\n  /**\n   * @param {object} currentContext\n   * @return {object}\n   * @private\n   */\n  _processChildContext: function(currentContext) {\n    var childContext = this.getChildContext && this.getChildContext();\n    var displayName = this.constructor.displayName || 'ReactCompositeComponent';\n    if (childContext) {\n      (require('./React').__DEV__ === true ? invariant(\n        typeof this.constructor.childContextTypes === 'object',\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n        'use getChildContext().',\n        displayName\n      ) : invariant(typeof this.constructor.childContextTypes === 'object'));\n      if (require('./React').__DEV__ === true) {\n        this._checkPropTypes(\n          this.constructor.childContextTypes,\n          childContext,\n          ReactPropTypeLocations.childContext\n        );\n      }\n      for (var name in childContext) {\n        (require('./React').__DEV__ === true ? invariant(\n          name in this.constructor.childContextTypes,\n          '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n          displayName,\n          name\n        ) : invariant(name in this.constructor.childContextTypes));\n      }\n      return merge(currentContext, childContext);\n    }\n    return currentContext;\n  },\n\n  /**\n   * Processes props by setting default values for unspecified props and\n   * asserting that the props are valid. Does not mutate its argument; returns\n   * a new props object with defaults merged in.\n   *\n   * @param {object} newProps\n   * @return {object}\n   * @private\n   */\n  _processProps: function(newProps) {\n    var props = merge(newProps);\n    var defaultProps = this._defaultProps;\n    for (var propName in defaultProps) {\n      if (typeof props[propName] === 'undefined') {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    if (require('./React').__DEV__ === true) {\n      var propTypes = this.constructor.propTypes;\n      if (propTypes) {\n        this._checkPropTypes(propTypes, props, ReactPropTypeLocations.prop);\n      }\n    }\n    return props;\n  },\n\n  /**\n   * Assert that the props are valid\n   *\n   * @param {object} propTypes Map of prop name to a ReactPropType\n   * @param {object} props\n   * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n   * @private\n   */\n  _checkPropTypes: function(propTypes, props, location) {\n    var componentName = this.constructor.displayName;\n    for (var propName in propTypes) {\n      if (propTypes.hasOwnProperty(propName)) {\n        propTypes[propName](props, propName, componentName, location);\n      }\n    }\n  },\n\n  performUpdateIfNecessary: function() {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    // Do not trigger a state transition if we are in the middle of mounting or\n    // receiving props because both of those will already be doing this.\n    if (compositeLifeCycleState === CompositeLifeCycle.MOUNTING ||\n        compositeLifeCycleState === CompositeLifeCycle.RECEIVING_PROPS) {\n      return;\n    }\n    ReactComponent.Mixin.performUpdateIfNecessary.call(this);\n  },\n\n  /**\n   * If any of `_pendingProps`, `_pendingState`, or `_pendingForceUpdate` is\n   * set, update the component.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  _performUpdateIfNecessary: function(transaction) {\n    if (this._pendingProps == null &&\n        this._pendingState == null &&\n        this._pendingContext == null &&\n        !this._pendingForceUpdate) {\n      return;\n    }\n\n    var nextFullContext = this._pendingContext || this._currentContext;\n    var nextContext = this._processContext(nextFullContext);\n    this._pendingContext = null;\n\n    var nextProps = this.props;\n    if (this._pendingProps != null) {\n      nextProps = this._processProps(this._pendingProps);\n      this._pendingProps = null;\n\n      this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_PROPS;\n      if (this.componentWillReceiveProps) {\n        this.componentWillReceiveProps(nextProps, nextContext);\n      }\n    }\n\n    this._compositeLifeCycleState = CompositeLifeCycle.RECEIVING_STATE;\n\n    // Unlike props, state, and context, we specifically don't want to set\n    // _pendingOwner to null here because it's possible for a component to have\n    // a null owner, so we instead make `this._owner === this._pendingOwner`\n    // mean that there's no owner change pending.\n    var nextOwner = this._pendingOwner;\n\n    var nextState = this._pendingState || this.state;\n    this._pendingState = null;\n\n    try {\n      if (this._pendingForceUpdate ||\n          !this.shouldComponentUpdate ||\n          this.shouldComponentUpdate(nextProps, nextState, nextContext)) {\n        this._pendingForceUpdate = false;\n        // Will set `this.props`, `this.state` and `this.context`.\n        this._performComponentUpdate(\n          nextProps,\n          nextOwner,\n          nextState,\n          nextFullContext,\n          nextContext,\n          transaction\n        );\n      } else {\n        // If it's determined that a component should not update, we still want\n        // to set props and state.\n        this.props = nextProps;\n        this._owner = nextOwner;\n        this.state = nextState;\n        this._currentContext = nextFullContext;\n        this.context = nextContext;\n      }\n    } finally {\n      this._compositeLifeCycleState = null;\n    }\n  },\n\n  /**\n   * Merges new props and state, notifies delegate methods of update and\n   * performs update.\n   *\n   * @param {object} nextProps Next object to set as properties.\n   * @param {?ReactComponent} nextOwner Next component to set as owner\n   * @param {?object} nextState Next object to set as state.\n   * @param {?object} nextFullContext Next object to set as _currentContext.\n   * @param {?object} nextContext Next object to set as context.\n   * @param {ReactReconcileTransaction} transaction\n   * @private\n   */\n  _performComponentUpdate: function(\n    nextProps,\n    nextOwner,\n    nextState,\n    nextFullContext,\n    nextContext,\n    transaction\n  ) {\n    var prevProps = this.props;\n    var prevOwner = this._owner;\n    var prevState = this.state;\n    var prevContext = this.context;\n\n    if (this.componentWillUpdate) {\n      this.componentWillUpdate(nextProps, nextState, nextContext);\n    }\n\n    this.props = nextProps;\n    this._owner = nextOwner;\n    this.state = nextState;\n    this._currentContext = nextFullContext;\n    this.context = nextContext;\n\n    this.updateComponent(\n      transaction,\n      prevProps,\n      prevOwner,\n      prevState,\n      prevContext\n    );\n\n    if (this.componentDidUpdate) {\n      transaction.getReactMountReady().enqueue(\n        this,\n        this.componentDidUpdate.bind(this, prevProps, prevState, prevContext)\n      );\n    }\n  },\n\n  receiveComponent: function(nextComponent, transaction) {\n    if (nextComponent === this._descriptor) {\n      // Since props and context are immutable after the component is\n      // mounted, we can do a cheap identity compare here to determine\n      // if this is a superfluous reconcile.\n      return;\n    }\n\n    // Update the descriptor that was last used by this component instance\n    this._descriptor = nextComponent;\n\n    this._pendingContext = nextComponent._currentContext;\n    ReactComponent.Mixin.receiveComponent.call(\n      this,\n      nextComponent,\n      transaction\n    );\n  },\n\n  /**\n   * Updates the component's currently mounted DOM representation.\n   *\n   * By default, this implements React's rendering and reconciliation algorithm.\n   * Sophisticated clients may wish to override this.\n   *\n   * @param {ReactReconcileTransaction} transaction\n   * @param {object} prevProps\n   * @param {?ReactComponent} prevOwner\n   * @param {?object} prevState\n   * @param {?object} prevContext\n   * @internal\n   * @overridable\n   */\n  updateComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    'updateComponent',\n    function(transaction, prevProps, prevOwner, prevState, prevContext) {\n      ReactComponent.Mixin.updateComponent.call(\n        this,\n        transaction,\n        prevProps,\n        prevOwner\n      );\n\n\n      var prevComponentInstance = this._renderedComponent;\n      var nextComponent = this._renderValidatedComponent();\n      if (shouldUpdateReactComponent(prevComponentInstance, nextComponent)) {\n        prevComponentInstance.receiveComponent(nextComponent, transaction);\n      } else {\n        // These two IDs are actually the same! But nothing should rely on that.\n        var thisID = this._rootNodeID;\n        var prevComponentID = prevComponentInstance._rootNodeID;\n        prevComponentInstance.unmountComponent();\n        this._renderedComponent = instantiateReactComponent(nextComponent);\n        var nextMarkup = this._renderedComponent.mountComponent(\n          thisID,\n          transaction,\n          this._mountDepth + 1\n        );\n        ReactComponent.BackendIDOperations.dangerouslyReplaceNodeWithMarkupByID(\n          prevComponentID,\n          nextMarkup\n        );\n      }\n    }\n  ),\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldUpdateComponent`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {?function} callback Called after update is complete.\n   * @final\n   * @protected\n   */\n  forceUpdate: function(callback) {\n    var compositeLifeCycleState = this._compositeLifeCycleState;\n    (require('./React').__DEV__ === true ? invariant(\n      this.isMounted() ||\n        compositeLifeCycleState === CompositeLifeCycle.MOUNTING,\n      'forceUpdate(...): Can only force an update on mounted or mounting ' +\n        'components.'\n    ) : invariant(this.isMounted() ||\n      compositeLifeCycleState === CompositeLifeCycle.MOUNTING));\n    (require('./React').__DEV__ === true ? invariant(\n      compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&\n      compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING,\n      'forceUpdate(...): Cannot force an update while unmounting component ' +\n      'or during an existing state transition (such as within `render`).'\n    ) : invariant(compositeLifeCycleState !== CompositeLifeCycle.RECEIVING_STATE &&\n    compositeLifeCycleState !== CompositeLifeCycle.UNMOUNTING));\n    this._pendingForceUpdate = true;\n    ReactUpdates.enqueueUpdate(this, callback);\n  },\n\n  /**\n   * @private\n   */\n  _renderValidatedComponent: ReactPerf.measure(\n    'ReactCompositeComponent',\n    '_renderValidatedComponent',\n    function() {\n      var renderedComponent;\n      var previousContext = ReactContext.current;\n      ReactContext.current = this._processChildContext(this._currentContext);\n      ReactCurrentOwner.current = this;\n      try {\n        renderedComponent = this.render();\n      } finally {\n        ReactContext.current = previousContext;\n        ReactCurrentOwner.current = null;\n      }\n      (require('./React').__DEV__ === true ? invariant(\n        ReactComponent.isValidComponent(renderedComponent),\n        '%s.render(): A valid ReactComponent must be returned. You may have ' +\n          'returned null, undefined, an array, or some other invalid object.',\n        this.constructor.displayName || 'ReactCompositeComponent'\n      ) : invariant(ReactComponent.isValidComponent(renderedComponent)));\n      return renderedComponent;\n    }\n  ),\n\n  /**\n   * @private\n   */\n  _bindAutoBindMethods: function() {\n    for (var autoBindKey in this.__reactAutoBindMap) {\n      if (!this.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {\n        continue;\n      }\n      var method = this.__reactAutoBindMap[autoBindKey];\n      this[autoBindKey] = this._bindAutoBindMethod(ReactErrorUtils.guard(\n        method,\n        this.constructor.displayName + '.' + autoBindKey\n      ));\n    }\n  },\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {function} method Method to be bound.\n   * @private\n   */\n  _bindAutoBindMethod: function(method) {\n    var component = this;\n    var boundMethod = function() {\n      return method.apply(component, arguments);\n    };\n    if (require('./React').__DEV__ === true) {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis ) {var args=Array.prototype.slice.call(arguments,1);\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          monitorCodeUse('react_bind_warning', { component: componentName });\n          console.warn(\n            'bind(): React component methods may only be bound to the ' +\n            'component instance. See ' + componentName\n          );\n        } else if (!args.length) {\n          monitorCodeUse('react_bind_warning', { component: componentName });\n          console.warn(\n            'bind(): You are binding a component method to the component. ' +\n            'React does this for you automatically in a high-performance ' +\n            'way, so you can safely remove this call. See ' + componentName\n          );\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n};\n\nvar ReactCompositeComponentBase = function() {};\nmixInto(ReactCompositeComponentBase, ReactComponent.Mixin);\nmixInto(ReactCompositeComponentBase, ReactOwner.Mixin);\nmixInto(ReactCompositeComponentBase, ReactPropTransferer.Mixin);\nmixInto(ReactCompositeComponentBase, ReactCompositeComponentMixin);\n\n/**\n * Checks if a value is a valid component constructor.\n *\n * @param {*}\n * @return {boolean}\n * @public\n */\nfunction isValidClass(componentClass) {\n  return componentClass instanceof Function &&\n         'componentConstructor' in componentClass &&\n         componentClass.componentConstructor instanceof Function;\n}\n/**\n * Module for creating composite components.\n *\n * @class ReactCompositeComponent\n * @extends ReactComponent\n * @extends ReactOwner\n * @extends ReactPropTransferer\n */\nvar ReactCompositeComponent = {\n\n  LifeCycle: CompositeLifeCycle,\n\n  Base: ReactCompositeComponentBase,\n\n  /**\n   * Creates a composite component class given a class specification.\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  createClass: function(spec) {\n    var Constructor = function() {};\n    Constructor.prototype = new ReactCompositeComponentBase();\n    Constructor.prototype.constructor = Constructor;\n\n    var DescriptorConstructor = Constructor;\n\n    var ConvenienceConstructor = function(props, children) {\n      var descriptor = new DescriptorConstructor();\n      descriptor.construct.apply(descriptor, arguments);\n      return descriptor;\n    };\n    ConvenienceConstructor.componentConstructor = Constructor;\n    Constructor.ConvenienceConstructor = ConvenienceConstructor;\n    ConvenienceConstructor.originalSpec = spec;\n\n    injectedMixins.forEach(\n      mixSpecIntoComponent.bind(null, ConvenienceConstructor)\n    );\n\n    mixSpecIntoComponent(ConvenienceConstructor, spec);\n\n    (require('./React').__DEV__ === true ? invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    ) : invariant(Constructor.prototype.render));\n\n    if (require('./React').__DEV__ === true) {\n      if (Constructor.prototype.componentShouldUpdate) {\n        monitorCodeUse(\n          'react_component_should_update_warning',\n          { component: spec.displayName }\n        );\n        console.warn(\n          (spec.displayName || 'A component') + ' has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.'\n         );\n      }\n    }\n\n    // Expose the convience constructor on the prototype so that it can be\n    // easily accessed on descriptors. E.g. <Foo />.type === Foo.type and for\n    // static methods like <Foo />.type.staticMethod();\n    // This should not be named constructor since this may not be the function\n    // that created the descriptor, and it may not even be a constructor.\n    ConvenienceConstructor.type = Constructor;\n    Constructor.prototype.type = Constructor;\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactCompositeComponentInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    if (require('./React').__DEV__ === true) {\n      // In DEV the convenience constructor generates a proxy to another\n      // instance around it to warn about access to properties on the\n      // descriptor.\n      DescriptorConstructor = createDescriptorProxy(Constructor);\n    }\n\n    return ConvenienceConstructor;\n  },\n\n  isValidClass: isValidClass,\n\n  injection: {\n    injectMixin: function(mixin) {\n      injectedMixins.push(mixin);\n    }\n  }\n};\n\nmodule.exports = ReactCompositeComponent;\n"]},"metadata":{},"sourceType":"script"}