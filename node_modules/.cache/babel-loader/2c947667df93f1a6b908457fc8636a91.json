{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMInput\n */\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar invariant = require(\"./invariant\");\n\nvar merge = require(\"./merge\"); // Store a reference to the <input> `ReactDOMComponent`.\n\n\nvar input = ReactDOM.input;\nvar instancesByReactID = {};\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\nvar ReactDOMInput = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMInput',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue;\n    return {\n      checked: this.props.defaultChecked || false,\n      value: defaultValue != null ? defaultValue : null\n    };\n  },\n  shouldComponentUpdate: function () {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n    props.defaultChecked = null;\n    props.defaultValue = null;\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.value;\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.checked;\n    props.onChange = this._handleChange;\n    return input(props, this.props.children);\n  },\n  componentDidMount: function () {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n  componentWillUnmount: function () {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n  componentDidUpdate: function (prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(rootNode, 'checked', this.props.checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange.call(this, event);\n      this._isChanging = false;\n    }\n\n    this.setState({\n      checked: event.target.checked,\n      value: event.target.value\n    });\n    var name = this.props.name;\n\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      } // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n\n\n      var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n\n        if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n          continue;\n        }\n\n        var otherID = ReactMount.getID(otherNode);\n        require('./React').__DEV__ === true ? invariant(otherID, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(otherID);\n        var otherInstance = instancesByReactID[otherID];\n        require('./React').__DEV__ === true ? invariant(otherInstance, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(otherInstance); // In some cases, this will actually change the `checked` state value.\n        // In other cases, there's no change but this forces a reconcile upon\n        // which componentDidUpdate will reset the DOM property to whatever it\n        // should be.\n\n        otherInstance.setState({\n          checked: false\n        });\n      }\n    }\n\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMInput;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactDOMInput.js"],"names":["AutoFocusMixin","require","DOMPropertyOperations","LinkedValueUtils","ReactBrowserComponentMixin","ReactCompositeComponent","ReactDOM","ReactMount","invariant","merge","input","instancesByReactID","ReactDOMInput","createClass","displayName","mixins","Mixin","getInitialState","defaultValue","props","checked","defaultChecked","value","shouldComponentUpdate","_isChanging","render","getValue","state","getChecked","onChange","_handleChange","children","componentDidMount","id","getID","getDOMNode","componentWillUnmount","rootNode","componentDidUpdate","prevProps","prevState","prevContext","setValueForProperty","event","returnValue","getOnChange","call","setState","target","name","type","queryRoot","parentNode","group","querySelectorAll","JSON","stringify","i","groupLen","length","otherNode","form","otherID","__DEV__","otherInstance","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMInput\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactDOM = require(\"./ReactDOM\");\nvar ReactMount = require(\"./ReactMount\");\n\nvar invariant = require(\"./invariant\");\nvar merge = require(\"./merge\");\n\n// Store a reference to the <input> `ReactDOMComponent`.\nvar input = ReactDOM.input;\n\nvar instancesByReactID = {};\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMInput',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    return {\n      checked: this.props.defaultChecked || false,\n      value: defaultValue != null ? defaultValue : null\n    };\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n\n    props.defaultChecked = null;\n    props.defaultValue = null;\n\n    var value = LinkedValueUtils.getValue(this);\n    props.value = value != null ? value : this.state.value;\n\n    var checked = LinkedValueUtils.getChecked(this);\n    props.checked = checked != null ? checked : this.state.checked;\n\n    props.onChange = this._handleChange;\n\n    return input(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    var id = ReactMount.getID(this.getDOMNode());\n    instancesByReactID[id] = this;\n  },\n\n  componentWillUnmount: function() {\n    var rootNode = this.getDOMNode();\n    var id = ReactMount.getID(rootNode);\n    delete instancesByReactID[id];\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var rootNode = this.getDOMNode();\n    if (this.props.checked != null) {\n      DOMPropertyOperations.setValueForProperty(\n        rootNode,\n        'checked',\n        this.props.checked || false\n      );\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange.call(this, event);\n      this._isChanging = false;\n    }\n    this.setState({\n      checked: event.target.checked,\n      value: event.target.value\n    });\n\n    var name = this.props.name;\n    if (this.props.type === 'radio' && name != null) {\n      var rootNode = this.getDOMNode();\n      var queryRoot = rootNode;\n\n      while (queryRoot.parentNode) {\n        queryRoot = queryRoot.parentNode;\n      }\n\n      // If `rootNode.form` was non-null, then we could try `form.elements`,\n      // but that sometimes behaves strangely in IE8. We could also try using\n      // `form.getElementsByName`, but that will only return direct children\n      // and won't include inputs that use the HTML5 `form=` attribute. Since\n      // the input might not even be in a form, let's just use the global\n      // `querySelectorAll` to ensure we don't miss anything.\n      var group = queryRoot.querySelectorAll(\n        'input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n      for (var i = 0, groupLen = group.length; i < groupLen; i++) {\n        var otherNode = group[i];\n        if (otherNode === rootNode ||\n            otherNode.form !== rootNode.form) {\n          continue;\n        }\n        var otherID = ReactMount.getID(otherNode);\n        (require('./React').__DEV__ === true ? invariant(\n          otherID,\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +\n          'same `name` is not supported.'\n        ) : invariant(otherID));\n        var otherInstance = instancesByReactID[otherID];\n        (require('./React').__DEV__ === true ? invariant(\n          otherInstance,\n          'ReactDOMInput: Unknown radio button ID %s.',\n          otherID\n        ) : invariant(otherInstance));\n        // In some cases, this will actually change the `checked` state value.\n        // In other cases, there's no change but this forces a reconcile upon\n        // which componentDidUpdate will reset the DOM property to whatever it\n        // should be.\n        otherInstance.setState({\n          checked: false\n        });\n      }\n    }\n\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMInput;\n"]},"metadata":{},"sourceType":"script"}