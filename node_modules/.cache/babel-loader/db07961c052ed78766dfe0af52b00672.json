{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\n\nvar mixInto = require(\"./mixInto\");\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\n\n\nvar ReactTextComponent = function (initialText) {\n  this.construct({\n    text: initialText\n  });\n};\n/**\n * Used to clone the text descriptor object before it's mounted.\n *\n * @param {object} props\n * @return {object} A new ReactTextComponent instance\n */\n\n\nReactTextComponent.ConvenienceConstructor = function (props) {\n  return new ReactTextComponent(props.text);\n};\n\nmixInto(ReactTextComponent, ReactComponent.Mixin);\nmixInto(ReactTextComponent, ReactBrowserComponentMixin);\nmixInto(ReactTextComponent, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(this, rootID, transaction, mountDepth);\n    var escapedText = escapeTextForBrowser(this.props.text);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n\n    if (nextProps.text !== this.props.text) {\n      this.props.text = nextProps.text;\n      ReactComponent.BackendIDOperations.updateTextContentByID(this._rootNodeID, nextProps.text);\n    }\n  }\n}); // Expose the constructor on itself and the prototype for consistency with other\n// descriptors.\n\nReactTextComponent.type = ReactTextComponent;\nReactTextComponent.prototype.type = ReactTextComponent;\nmodule.exports = ReactTextComponent;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactTextComponent.js"],"names":["DOMPropertyOperations","require","ReactBrowserComponentMixin","ReactComponent","escapeTextForBrowser","mixInto","ReactTextComponent","initialText","construct","text","ConvenienceConstructor","props","Mixin","mountComponent","rootID","transaction","mountDepth","call","escapedText","renderToStaticMarkup","createMarkupForID","receiveComponent","nextComponent","nextProps","BackendIDOperations","updateTextContentByID","_rootNodeID","type","prototype","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,kBAAkB,GAAG,UAASC,WAAT,EAAsB;AAC7C,OAAKC,SAAL,CAAe;AAACC,IAAAA,IAAI,EAAEF;AAAP,GAAf;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAD,kBAAkB,CAACI,sBAAnB,GAA4C,UAASC,KAAT,EAAgB;AAC1D,SAAO,IAAIL,kBAAJ,CAAuBK,KAAK,CAACF,IAA7B,CAAP;AACD,CAFD;;AAIAJ,OAAO,CAACC,kBAAD,EAAqBH,cAAc,CAACS,KAApC,CAAP;AACAP,OAAO,CAACC,kBAAD,EAAqBJ,0BAArB,CAAP;AACAG,OAAO,CAACC,kBAAD,EAAqB;AAE1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEO,EAAAA,cAAc,EAAE,UAASC,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0C;AACxDb,IAAAA,cAAc,CAACS,KAAf,CAAqBC,cAArB,CAAoCI,IAApC,CACE,IADF,EAEEH,MAFF,EAGEC,WAHF,EAIEC,UAJF;AAOA,QAAIE,WAAW,GAAGd,oBAAoB,CAAC,KAAKO,KAAL,CAAWF,IAAZ,CAAtC;;AAEA,QAAIM,WAAW,CAACI,oBAAhB,EAAsC;AACpC;AACA;AACA;AACA,aAAOD,WAAP;AACD;;AAED,WACE,WAAWlB,qBAAqB,CAACoB,iBAAtB,CAAwCN,MAAxC,CAAX,GAA6D,GAA7D,GACEI,WADF,GAEA,SAHF;AAKD,GAlCyB;;AAoC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,gBAAgB,EAAE,UAASC,aAAT,EAAwBP,WAAxB,EAAqC;AACrD,QAAIQ,SAAS,GAAGD,aAAa,CAACX,KAA9B;;AACA,QAAIY,SAAS,CAACd,IAAV,KAAmB,KAAKE,KAAL,CAAWF,IAAlC,EAAwC;AACtC,WAAKE,KAAL,CAAWF,IAAX,GAAkBc,SAAS,CAACd,IAA5B;AACAN,MAAAA,cAAc,CAACqB,mBAAf,CAAmCC,qBAAnC,CACE,KAAKC,WADP,EAEEH,SAAS,CAACd,IAFZ;AAID;AACF;AApDyB,CAArB,CAAP,C,CAwDA;AACA;;AACAH,kBAAkB,CAACqB,IAAnB,GAA0BrB,kBAA1B;AACAA,kBAAkB,CAACsB,SAAnB,CAA6BD,IAA7B,GAAoCrB,kBAApC;AAEAuB,MAAM,CAACC,OAAP,GAAiBxB,kBAAjB","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactTextComponent\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactComponent = require(\"./ReactComponent\");\n\nvar escapeTextForBrowser = require(\"./escapeTextForBrowser\");\nvar mixInto = require(\"./mixInto\");\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings in elements so that they can undergo\n * the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactTextComponent = function(initialText) {\n  this.construct({text: initialText});\n};\n\n/**\n * Used to clone the text descriptor object before it's mounted.\n *\n * @param {object} props\n * @return {object} A new ReactTextComponent instance\n */\nReactTextComponent.ConvenienceConstructor = function(props) {\n  return new ReactTextComponent(props.text);\n};\n\nmixInto(ReactTextComponent, ReactComponent.Mixin);\nmixInto(ReactTextComponent, ReactBrowserComponentMixin);\nmixInto(ReactTextComponent, {\n\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {string} rootID DOM ID of the root node.\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @param {number} mountDepth number of components in the owner hierarchy\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function(rootID, transaction, mountDepth) {\n    ReactComponent.Mixin.mountComponent.call(\n      this,\n      rootID,\n      transaction,\n      mountDepth\n    );\n\n    var escapedText = escapeTextForBrowser(this.props.text);\n\n    if (transaction.renderToStaticMarkup) {\n      // Normally we'd wrap this in a `span` for the reasons stated above, but\n      // since this is a situation where React won't take over (static pages),\n      // we can simply return the text as it is.\n      return escapedText;\n    }\n\n    return (\n      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +\n        escapedText +\n      '</span>'\n    );\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {object} nextComponent Contains the next text content.\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function(nextComponent, transaction) {\n    var nextProps = nextComponent.props;\n    if (nextProps.text !== this.props.text) {\n      this.props.text = nextProps.text;\n      ReactComponent.BackendIDOperations.updateTextContentByID(\n        this._rootNodeID,\n        nextProps.text\n      );\n    }\n  }\n\n});\n\n// Expose the constructor on itself and the prototype for consistency with other\n// descriptors.\nReactTextComponent.type = ReactTextComponent;\nReactTextComponent.prototype.type = ReactTextComponent;\n\nmodule.exports = ReactTextComponent;\n"]},"metadata":{},"sourceType":"script"}