{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule invariant\n */\n\"use strict\";\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function (condition) {\n  if (!condition) {\n    var error = new Error('Minified exception occured; use the non-minified dev environment for ' + 'the full error message and additional helpful warnings.');\n    error.framesToPop = 1;\n    throw error;\n  }\n};\n\nif (require('./React').__DEV__ === true) {\n  invariant = function (condition, format, a, b, c, d, e, f) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n\n    if (!condition) {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      var error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.framesToPop = 1; // we don't care about invariant's own frame\n\n      throw error;\n    }\n  };\n}\n\nmodule.exports = invariant;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/invariant.js"],"names":["invariant","condition","error","Error","framesToPop","require","__DEV__","format","a","b","c","d","e","f","undefined","args","argIndex","replace","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,SAAS,GAAG,UAASC,SAAT,EAAoB;AAClC,MAAI,CAACA,SAAL,EAAgB;AACd,QAAIC,KAAK,GAAG,IAAIC,KAAJ,CACV,0EACA,yDAFU,CAAZ;AAIAD,IAAAA,KAAK,CAACE,WAAN,GAAoB,CAApB;AACA,UAAMF,KAAN;AACD;AACF,CATD;;AAWA,IAAIG,OAAO,CAAC,SAAD,CAAP,CAAmBC,OAAnB,KAA+B,IAAnC,EAAyC;AACvCN,EAAAA,SAAS,GAAG,UAASC,SAAT,EAAoBM,MAApB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,CAAlC,EAAqCC,CAArC,EAAwCC,CAAxC,EAA2CC,CAA3C,EAA8C;AACxD,QAAIN,MAAM,KAAKO,SAAf,EAA0B;AACxB,YAAM,IAAIX,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,QAAI,CAACF,SAAL,EAAgB;AACd,UAAIc,IAAI,GAAG,CAACP,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,CAAX;AACA,UAAIG,QAAQ,GAAG,CAAf;AACA,UAAId,KAAK,GAAG,IAAIC,KAAJ,CACV,0BACAI,MAAM,CAACU,OAAP,CAAe,KAAf,EAAsB,YAAW;AAAE,eAAOF,IAAI,CAACC,QAAQ,EAAT,CAAX;AAA0B,OAA7D,CAFU,CAAZ;AAIAd,MAAAA,KAAK,CAACE,WAAN,GAAoB,CAApB,CAPc,CAOS;;AACvB,YAAMF,KAAN;AACD;AACF,GAfD;AAgBD;;AAEDgB,MAAM,CAACC,OAAP,GAAiBnB,SAAjB","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition) {\n  if (!condition) {\n    var error = new Error(\n      'Minified exception occured; use the non-minified dev environment for ' +\n      'the full error message and additional helpful warnings.'\n    );\n    error.framesToPop = 1;\n    throw error;\n  }\n};\n\nif (require('./React').__DEV__ === true) {\n  invariant = function(condition, format, a, b, c, d, e, f) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n\n    if (!condition) {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      var error = new Error(\n        'Invariant Violation: ' +\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.framesToPop = 1; // we don't care about invariant's own frame\n      throw error;\n    }\n  };\n}\n\nmodule.exports = invariant;\n"]},"metadata":{},"sourceType":"script"}