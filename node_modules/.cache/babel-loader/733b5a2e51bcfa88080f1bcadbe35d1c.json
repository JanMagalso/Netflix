{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule Transaction\n */\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n *\n * Bonus:\n * - Reports timing metrics by method name and wrapper index.\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM upates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\n\n\nvar Mixin = {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * \"PooledClass\".\n   */\n  reinitializeTransaction: function () {\n    this.transactionWrappers = this.getTransactionWrappers();\n\n    if (!this.wrapperInitData) {\n      this.wrapperInitData = [];\n    } else {\n      this.wrapperInitData.length = 0;\n    }\n\n    if (!this.timingMetrics) {\n      this.timingMetrics = {};\n    }\n\n    this.timingMetrics.methodInvocationTime = 0;\n\n    if (!this.timingMetrics.wrapperInitTimes) {\n      this.timingMetrics.wrapperInitTimes = [];\n    } else {\n      this.timingMetrics.wrapperInitTimes.length = 0;\n    }\n\n    if (!this.timingMetrics.wrapperCloseTimes) {\n      this.timingMetrics.wrapperCloseTimes = [];\n    } else {\n      this.timingMetrics.wrapperCloseTimes.length = 0;\n    }\n\n    this._isInTransaction = false;\n  },\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n  isInTransaction: function () {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?=} args... Arguments to pass to the method (optional).\n   *                           Helps prevent need to bind in many cases.\n   * @return Return value from `method`.\n   */\n  perform: function (method, scope, a, b, c, d, e, f) {\n    require('./React').__DEV__ === true ? invariant(!this.isInTransaction(), 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(!this.isInTransaction());\n    var memberStart = Date.now();\n    var errorThrown;\n    var ret;\n\n    try {\n      this._isInTransaction = true; // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      var memberEnd = Date.now();\n      this.methodInvocationTime += memberEnd - memberStart;\n\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {}\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n\n    return ret;\n  },\n  initializeAll: function (startIndex) {\n    var transactionWrappers = this.transactionWrappers;\n    var wrapperInitTimes = this.timingMetrics.wrapperInitTimes;\n\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var initStart = Date.now();\n      var wrapper = transactionWrappers[i];\n\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;\n        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;\n      } finally {\n        var curInitTime = wrapperInitTimes[i];\n        var initEnd = Date.now();\n        wrapperInitTimes[i] = (curInitTime || 0) + (initEnd - initStart);\n\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {}\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function (startIndex) {\n    require('./React').__DEV__ === true ? invariant(this.isInTransaction(), 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(this.isInTransaction());\n    var transactionWrappers = this.transactionWrappers;\n    var wrapperCloseTimes = this.timingMetrics.wrapperCloseTimes;\n\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      var closeStart = Date.now();\n      var initData = this.wrapperInitData[i];\n      var errorThrown;\n\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it's still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown = true;\n\n        if (initData !== Transaction.OBSERVED_ERROR) {\n          wrapper.close && wrapper.close.call(this, initData);\n        }\n\n        errorThrown = false;\n      } finally {\n        var closeEnd = Date.now();\n        var curCloseTime = wrapperCloseTimes[i];\n        wrapperCloseTimes[i] = (curCloseTime || 0) + (closeEnd - closeStart);\n\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {}\n        }\n      }\n    }\n\n    this.wrapperInitData.length = 0;\n  }\n};\nvar Transaction = {\n  Mixin: Mixin,\n\n  /**\n   * Token to look for to determine if an error occured.\n   */\n  OBSERVED_ERROR: {}\n};\nmodule.exports = Transaction;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/Transaction.js"],"names":["invariant","require","Mixin","reinitializeTransaction","transactionWrappers","getTransactionWrappers","wrapperInitData","length","timingMetrics","methodInvocationTime","wrapperInitTimes","wrapperCloseTimes","_isInTransaction","isInTransaction","perform","method","scope","a","b","c","d","e","f","__DEV__","memberStart","Date","now","errorThrown","ret","initializeAll","call","memberEnd","closeAll","err","startIndex","i","initStart","wrapper","Transaction","OBSERVED_ERROR","initialize","curInitTime","initEnd","closeStart","initData","close","closeEnd","curCloseTime","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,KAAK,GAAG;AACV;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,uBAAuB,EAAE,YAAW;AAClC,SAAKC,mBAAL,GAA2B,KAAKC,sBAAL,EAA3B;;AACA,QAAI,CAAC,KAAKC,eAAV,EAA2B;AACzB,WAAKA,eAAL,GAAuB,EAAvB;AACD,KAFD,MAEO;AACL,WAAKA,eAAL,CAAqBC,MAArB,GAA8B,CAA9B;AACD;;AACD,QAAI,CAAC,KAAKC,aAAV,EAAyB;AACvB,WAAKA,aAAL,GAAqB,EAArB;AACD;;AACD,SAAKA,aAAL,CAAmBC,oBAAnB,GAA0C,CAA1C;;AACA,QAAI,CAAC,KAAKD,aAAL,CAAmBE,gBAAxB,EAA0C;AACxC,WAAKF,aAAL,CAAmBE,gBAAnB,GAAsC,EAAtC;AACD,KAFD,MAEO;AACL,WAAKF,aAAL,CAAmBE,gBAAnB,CAAoCH,MAApC,GAA6C,CAA7C;AACD;;AACD,QAAI,CAAC,KAAKC,aAAL,CAAmBG,iBAAxB,EAA2C;AACzC,WAAKH,aAAL,CAAmBG,iBAAnB,GAAuC,EAAvC;AACD,KAFD,MAEO;AACL,WAAKH,aAAL,CAAmBG,iBAAnB,CAAqCJ,MAArC,GAA8C,CAA9C;AACD;;AACD,SAAKK,gBAAL,GAAwB,KAAxB;AACD,GA9BS;AAgCVA,EAAAA,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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule Transaction\n */\n\n\"use strict\";\n\nvar invariant = require(\"./invariant\");\n\n/**\n * `Transaction` creates a black box that is able to wrap any method such that\n * certain invariants are maintained before and after the method is invoked\n * (Even if an exception is thrown while invoking the wrapped method). Whoever\n * instantiates a transaction can provide enforcers of the invariants at\n * creation time. The `Transaction` class itself will supply one additional\n * automatic invariant for you - the invariant that any transaction instance\n * should not be run while it is already being run. You would typically create a\n * single instance of a `Transaction` for reuse multiple times, that potentially\n * is used to wrap several different methods. Wrappers are extremely simple -\n * they only require implementing two methods.\n *\n * <pre>\n *                       wrappers (injected at creation time)\n *                                      +        +\n *                                      |        |\n *                    +-----------------|--------|--------------+\n *                    |                 v        |              |\n *                    |      +---------------+   |              |\n *                    |   +--|    wrapper1   |---|----+         |\n *                    |   |  +---------------+   v    |         |\n *                    |   |          +-------------+  |         |\n *                    |   |     +----|   wrapper2  |--------+   |\n *                    |   |     |    +-------------+  |     |   |\n *                    |   |     |                     |     |   |\n *                    |   v     v                     v     v   | wrapper\n *                    | +---+ +---+   +---------+   +---+ +---+ | invariants\n * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained\n * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | |   | |   |   |         |   |   | |   | |\n *                    | +---+ +---+   +---------+   +---+ +---+ |\n *                    |  initialize                    close    |\n *                    +-----------------------------------------+\n * </pre>\n *\n * Bonus:\n * - Reports timing metrics by method name and wrapper index.\n *\n * Use cases:\n * - Preserving the input selection ranges before/after reconciliation.\n *   Restoring selection even in the event of an unexpected error.\n * - Deactivating events while rearranging the DOM, preventing blurs/focuses,\n *   while guaranteeing that afterwards, the event system is reactivated.\n * - Flushing a queue of collected DOM mutations to the main UI thread after a\n *   reconciliation takes place in a worker thread.\n * - Invoking any collected `componentDidUpdate` callbacks after rendering new\n *   content.\n * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue\n *   to preserve the `scrollTop` (an automatic scroll aware DOM).\n * - (Future use case): Layout calculations before and after DOM upates.\n *\n * Transactional plugin API:\n * - A module that has an `initialize` method that returns any precomputation.\n * - and a `close` method that accepts the precomputation. `close` is invoked\n *   when the wrapped process is completed, or has failed.\n *\n * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules\n * that implement `initialize` and `close`.\n * @return {Transaction} Single transaction for reuse in thread.\n *\n * @class Transaction\n */\nvar Mixin = {\n  /**\n   * Sets up this instance so that it is prepared for collecting metrics. Does\n   * so such that this setup method may be used on an instance that is already\n   * initialized, in a way that does not consume additional memory upon reuse.\n   * That can be useful if you decide to make your subclass of this mixin a\n   * \"PooledClass\".\n   */\n  reinitializeTransaction: function() {\n    this.transactionWrappers = this.getTransactionWrappers();\n    if (!this.wrapperInitData) {\n      this.wrapperInitData = [];\n    } else {\n      this.wrapperInitData.length = 0;\n    }\n    if (!this.timingMetrics) {\n      this.timingMetrics = {};\n    }\n    this.timingMetrics.methodInvocationTime = 0;\n    if (!this.timingMetrics.wrapperInitTimes) {\n      this.timingMetrics.wrapperInitTimes = [];\n    } else {\n      this.timingMetrics.wrapperInitTimes.length = 0;\n    }\n    if (!this.timingMetrics.wrapperCloseTimes) {\n      this.timingMetrics.wrapperCloseTimes = [];\n    } else {\n      this.timingMetrics.wrapperCloseTimes.length = 0;\n    }\n    this._isInTransaction = false;\n  },\n\n  _isInTransaction: false,\n\n  /**\n   * @abstract\n   * @return {Array<TransactionWrapper>} Array of transaction wrappers.\n   */\n  getTransactionWrappers: null,\n\n  isInTransaction: function() {\n    return !!this._isInTransaction;\n  },\n\n  /**\n   * Executes the function within a safety window. Use this for the top level\n   * methods that result in large amounts of computation/mutations that would\n   * need to be safety checked.\n   *\n   * @param {function} method Member of scope to call.\n   * @param {Object} scope Scope to invoke from.\n   * @param {Object?=} args... Arguments to pass to the method (optional).\n   *                           Helps prevent need to bind in many cases.\n   * @return Return value from `method`.\n   */\n  perform: function(method, scope, a, b, c, d, e, f) {\n    (require('./React').__DEV__ === true ? invariant(\n      !this.isInTransaction(),\n      'Transaction.perform(...): Cannot initialize a transaction when there ' +\n      'is already an outstanding transaction.'\n    ) : invariant(!this.isInTransaction()));\n    var memberStart = Date.now();\n    var errorThrown;\n    var ret;\n    try {\n      this._isInTransaction = true;\n      // Catching errors makes debugging more difficult, so we start with\n      // errorThrown set to true before setting it to false after calling\n      // close -- if it's still set to true in the finally block, it means\n      // one of these calls threw.\n      errorThrown = true;\n      this.initializeAll(0);\n      ret = method.call(scope, a, b, c, d, e, f);\n      errorThrown = false;\n    } finally {\n      var memberEnd = Date.now();\n      this.methodInvocationTime += (memberEnd - memberStart);\n      try {\n        if (errorThrown) {\n          // If `method` throws, prefer to show that stack trace over any thrown\n          // by invoking `closeAll`.\n          try {\n            this.closeAll(0);\n          } catch (err) {\n          }\n        } else {\n          // Since `method` didn't throw, we don't want to silence the exception\n          // here.\n          this.closeAll(0);\n        }\n      } finally {\n        this._isInTransaction = false;\n      }\n    }\n    return ret;\n  },\n\n  initializeAll: function(startIndex) {\n    var transactionWrappers = this.transactionWrappers;\n    var wrapperInitTimes = this.timingMetrics.wrapperInitTimes;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var initStart = Date.now();\n      var wrapper = transactionWrappers[i];\n      try {\n        // Catching errors makes debugging more difficult, so we start with the\n        // OBSERVED_ERROR state before overwriting it with the real return value\n        // of initialize -- if it's still set to OBSERVED_ERROR in the finally\n        // block, it means wrapper.initialize threw.\n        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;\n        this.wrapperInitData[i] = wrapper.initialize ?\n          wrapper.initialize.call(this) :\n          null;\n      } finally {\n        var curInitTime = wrapperInitTimes[i];\n        var initEnd = Date.now();\n        wrapperInitTimes[i] = (curInitTime || 0) + (initEnd - initStart);\n\n        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {\n          // The initializer for wrapper i threw an error; initialize the\n          // remaining wrappers but silence any exceptions from them to ensure\n          // that the first error is the one to bubble up.\n          try {\n            this.initializeAll(i + 1);\n          } catch (err) {\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into\n   * them the respective return values of `this.transactionWrappers.init[i]`\n   * (`close`rs that correspond to initializers that failed will not be\n   * invoked).\n   */\n  closeAll: function(startIndex) {\n    (require('./React').__DEV__ === true ? invariant(\n      this.isInTransaction(),\n      'Transaction.closeAll(): Cannot close transaction when none are open.'\n    ) : invariant(this.isInTransaction()));\n    var transactionWrappers = this.transactionWrappers;\n    var wrapperCloseTimes = this.timingMetrics.wrapperCloseTimes;\n    for (var i = startIndex; i < transactionWrappers.length; i++) {\n      var wrapper = transactionWrappers[i];\n      var closeStart = Date.now();\n      var initData = this.wrapperInitData[i];\n      var errorThrown;\n      try {\n        // Catching errors makes debugging more difficult, so we start with\n        // errorThrown set to true before setting it to false after calling\n        // close -- if it's still set to true in the finally block, it means\n        // wrapper.close threw.\n        errorThrown = true;\n        if (initData !== Transaction.OBSERVED_ERROR) {\n          wrapper.close && wrapper.close.call(this, initData);\n        }\n        errorThrown = false;\n      } finally {\n        var closeEnd = Date.now();\n        var curCloseTime = wrapperCloseTimes[i];\n        wrapperCloseTimes[i] = (curCloseTime || 0) + (closeEnd - closeStart);\n\n        if (errorThrown) {\n          // The closer for wrapper i threw an error; close the remaining\n          // wrappers but silence any exceptions from them to ensure that the\n          // first error is the one to bubble up.\n          try {\n            this.closeAll(i + 1);\n          } catch (e) {\n          }\n        }\n      }\n    }\n    this.wrapperInitData.length = 0;\n  }\n};\n\nvar Transaction = {\n\n  Mixin: Mixin,\n\n  /**\n   * Token to look for to determine if an error occured.\n   */\n  OBSERVED_ERROR: {}\n\n};\n\nmodule.exports = Transaction;\n"]},"metadata":{},"sourceType":"script"}