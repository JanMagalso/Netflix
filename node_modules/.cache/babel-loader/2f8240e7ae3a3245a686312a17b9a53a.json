{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMount\n */\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\n\nvar ReactEventEmitter = require(\"./ReactEventEmitter\");\n\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar containsNode = require(\"./containsNode\");\n\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\n\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\n\nvar invariant = require(\"./invariant\");\n\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar nodeCache = {};\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n/** Mapping from reactRootID to React component instance. */\n\nvar instancesByReactRootID = {};\n/** Mapping from reactRootID to `container` nodes. */\n\nvar containersByReactRootID = {};\n\nif (require('./React').__DEV__ === true) {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID = {};\n} // Used to store breadth-first search state in findComponentRoot.\n\n\nvar findComponentRootReusableArray = [];\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.\n */\n\nfunction getReactRootID(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return rootElement && ReactMount.getID(rootElement);\n}\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return '' if we're given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\n\n\nfunction getID(node) {\n  var id = internalGetID(node);\n\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached = nodeCache[id];\n\n      if (cached !== node) {\n        require('./React').__DEV__ === true ? invariant(!isValid(cached, id), 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(!isValid(cached, id));\n        nodeCache[id] = node;\n      }\n    } else {\n      nodeCache[id] = node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\n\n\nfunction setID(node, id) {\n  var oldID = internalGetID(node);\n\n  if (oldID !== id) {\n    delete nodeCache[oldID];\n  }\n\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] = node;\n}\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\n\n\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n\n  return nodeCache[id];\n}\n/**\n * A node is \"valid\" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\n\n\nfunction isValid(node, id) {\n  if (node) {\n    require('./React').__DEV__ === true ? invariant(internalGetID(node) === id, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(internalGetID(node) === id);\n    var container = ReactMount.findReactContainerForID(id);\n\n    if (container && containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\n\n\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n\nvar deepestNodeSoFar = null;\n\nfunction findDeepestCachedAncestorImpl(ancestorID) {\n  var ancestor = nodeCache[ancestorID];\n\n  if (ancestor && isValid(ancestor, ancestorID)) {\n    deepestNodeSoFar = ancestor;\n  } else {\n    // This node isn't populated in the cache, so presumably none of its\n    // descendants are. Break out of the loop.\n    return false;\n  }\n}\n/**\n * Return the deepest cached node whose ID is a prefix of `targetID`.\n */\n\n\nfunction findDeepestCachedAncestor(targetID) {\n  deepestNodeSoFar = null;\n  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);\n  var foundNode = deepestNodeSoFar;\n  deepestNodeSoFar = null;\n  return foundNode;\n}\n/**\n * Mounting is the process of initializing a React component by creatings its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.renderComponent(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\n\n\nvar ReactMount = {\n  /** Time spent generating markup. */\n  totalInstantiationTime: 0,\n\n  /** Time spent inserting markup into the DOM. */\n  totalInjectionTime: 0,\n\n  /** Whether support for touch events should be initialized. */\n  useTouchEvents: false,\n\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function (container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function (prevComponent, nextComponent, container, callback) {\n    var nextProps = nextComponent.props;\n    ReactMount.scrollMonitor(container, function () {\n      prevComponent.replaceProps(nextProps, callback);\n    });\n\n    if (require('./React').__DEV__ === true) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and starts scroll value\n   * monitoring\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function (nextComponent, container) {\n    require('./React').__DEV__ === true ? invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE), '_registerComponent(...): Target container is not a DOM element.') : invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE));\n    ReactEventEmitter.ensureScrollValueMonitoring();\n    var reactRootID = ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] = nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: ReactPerf.measure('ReactMount', '_renderNewRootComponent', function (nextComponent, container, shouldReuseMarkup) {\n    var componentInstance = instantiateReactComponent(nextComponent);\n\n    var reactRootID = ReactMount._registerComponent(componentInstance, container);\n\n    componentInstance.mountComponentIntoNode(reactRootID, container, shouldReuseMarkup);\n\n    if (require('./React').__DEV__ === true) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);\n    }\n\n    return componentInstance;\n  }),\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} nextComponent Component instance to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderComponent: function (nextComponent, container, callback) {\n    var prevComponent = instancesByReactRootID[getReactRootID(container)];\n\n    if (prevComponent) {\n      if (shouldUpdateReactComponent(prevComponent, nextComponent)) {\n        return ReactMount._updateRootComponent(prevComponent, nextComponent, container, callback);\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup = reactRootElement && ReactMount.isRenderedByReact(reactRootElement);\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;\n\n    var component = ReactMount._renderNewRootComponent(nextComponent, container, shouldReuseMarkup);\n\n    callback && callback.call(component);\n    return component;\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into the supplied `container`.\n   *\n   * @param {function} constructor React component constructor.\n   * @param {?object} props Initial props of the component instance.\n   * @param {DOMElement} container DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  constructAndRenderComponent: function (constructor, props, container) {\n    return ReactMount.renderComponent(constructor(props), container);\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into a container node identified by supplied `id`.\n   *\n   * @param {function} componentConstructor React component constructor\n   * @param {?object} props Initial props of the component instance.\n   * @param {string} id ID of the DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in the container node.\n   */\n  constructAndRenderComponentByID: function (constructor, props, id) {\n    var domNode = document.getElementById(id);\n    require('./React').__DEV__ === true ? invariant(domNode, 'Tried to get element with id of \"%s\" but it is not present on the page.', id) : invariant(domNode);\n    return ReactMount.constructAndRenderComponent(constructor, props, domNode);\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the \"reactRoot\" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The \"reactRoot\" ID of elements rendered within.\n   */\n  registerContainer: function (container) {\n    var reactRootID = getReactRootID(container);\n\n    if (reactRootID) {\n      // If one exists, make sure it is a valid \"reactRoot\" ID.\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n\n    if (!reactRootID) {\n      // No valid \"reactRoot\" ID found, create one.\n      reactRootID = ReactInstanceHandles.createReactRootID();\n    }\n\n    containersByReactRootID[reactRootID] = container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function (container) {\n    var reactRootID = getReactRootID(container);\n    var component = instancesByReactRootID[reactRootID];\n\n    if (!component) {\n      return false;\n    }\n\n    ReactMount.unmountComponentFromNode(component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n\n    if (require('./React').__DEV__ === true) {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n\n    return true;\n  },\n\n  /**\n   * Unmounts a component and removes it from the DOM.\n   *\n   * @param {ReactComponent} instance React component instance.\n   * @param {DOMElement} container DOM element to unmount from.\n   * @final\n   * @internal\n   * @see {ReactMount.unmountComponentAtNode}\n   */\n  unmountComponentFromNode: function (instance, container) {\n    instance.unmountComponent();\n\n    if (container.nodeType === DOC_NODE_TYPE) {\n      container = container.documentElement;\n    } // http://jsperf.com/emptying-a-node\n\n\n    while (container.lastChild) {\n      container.removeChild(container.lastChild);\n    }\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function (id) {\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container = containersByReactRootID[reactRootID];\n\n    if (require('./React').__DEV__ === true) {\n      var rootElement = rootElementsByReactRootID[reactRootID];\n\n      if (rootElement && rootElement.parentNode !== container) {\n        require('./React').__DEV__ === true ? invariant( // Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : invariant( // Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID);\n        var containerChild = container.firstChild;\n\n        if (containerChild && reactRootID === internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] = containerChild;\n        } else {\n          console.warn('ReactMount: Root element has been removed from its original ' + 'container. New container:', rootElement.parentNode);\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function (id) {\n    var reactRoot = ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * True if the supplied `node` is rendered by React.\n   *\n   * @param {*} node DOM Element to check.\n   * @return {boolean} True if the DOM Element appears to be rendered by React.\n   * @internal\n   */\n  isRenderedByReact: function (node) {\n    if (node.nodeType !== 1) {\n      // Not a DOMElement, therefore not a React component\n      return false;\n    }\n\n    var id = ReactMount.getID(node);\n    return id ? id.charAt(0) === SEPARATOR : false;\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function (node) {\n    var current = node;\n\n    while (current && current.parentNode !== current) {\n      if (ReactMount.isRenderedByReact(current)) {\n        return current;\n      }\n\n      current = current.parentNode;\n    }\n\n    return null;\n  },\n\n  /**\n   * Finds a node with the supplied `targetID` inside of the supplied\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search\n   * quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} targetID ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.\n   * @internal\n   */\n  findComponentRoot: function (ancestorNode, targetID) {\n    var firstChildren = findComponentRootReusableArray;\n    var childIndex = 0;\n    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;\n    firstChildren[0] = deepestAncestor.firstChild;\n    firstChildren.length = 1;\n\n    while (childIndex < firstChildren.length) {\n      var child = firstChildren[childIndex++];\n      var targetChild;\n\n      while (child) {\n        var childID = ReactMount.getID(child);\n\n        if (childID) {\n          // Even if we find the node we're looking for, we finish looping\n          // through its siblings to ensure they're cached so that we don't have\n          // to revisit this node again. Otherwise, we make n^2 calls to getID\n          // when visiting the many children of a single node in order.\n          if (targetID === childID) {\n            targetChild = child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length = childIndex = 0;\n            firstChildren.push(child.firstChild);\n          }\n        } else {\n          // If this child had no ID, then there's a chance that it was\n          // injected automatically by the browser, as when a `<table>`\n          // element sprouts an extra `<tbody>` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n\n        child = child.nextSibling;\n      }\n\n      if (targetChild) {\n        // Emptying firstChildren/findComponentRootReusableArray is\n        // not necessary for correctness, but it helps the GC reclaim\n        // any nodes that were left at the end of the search.\n        firstChildren.length = 0;\n        return targetChild;\n      }\n    }\n\n    firstChildren.length = 0;\n    require('./React').__DEV__ === true ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables or nesting <p> ' + 'or <a> tags. Try inspecting the child nodes of the element with React ' + 'ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false);\n  },\n\n  /**\n   * React ID utilities.\n   */\n  getReactRootID: getReactRootID,\n  getID: getID,\n  setID: setID,\n  getNode: getNode,\n  purgeID: purgeID\n};\nmodule.exports = ReactMount;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactMount.js"],"names":["DOMProperty","require","ReactEventEmitter","ReactInstanceHandles","ReactPerf","containsNode","getReactRootElementInContainer","instantiateReactComponent","invariant","shouldUpdateReactComponent","SEPARATOR","ATTR_NAME","ID_ATTRIBUTE_NAME","nodeCache","ELEMENT_NODE_TYPE","DOC_NODE_TYPE","instancesByReactRootID","containersByReactRootID","__DEV__","rootElementsByReactRootID","findComponentRootReusableArray","getReactRootID","container","rootElement","ReactMount","getID","node","id","internalGetID","hasOwnProperty","cached","isValid","getAttribute","setID","oldID","setAttribute","getNode","findReactNodeByID","findReactContainerForID","purgeID","deepestNodeSoFar","findDeepestCachedAncestorImpl","ancestorID","ancestor","findDeepestCachedAncestor","targetID","traverseAncestors","foundNode","totalInstantiationTime","totalInjectionTime","useTouchEvents","_instancesByReactRootID","scrollMonitor","renderCallback","_updateRootComponent","prevComponent","nextComponent","callback","nextProps","props","replaceProps","_registerComponent","nodeType","ensureScrollValueMonitoring","reactRootID","registerContainer","_renderNewRootComponent","measure","shouldReuseMarkup","componentInstance","mountComponentIntoNode","renderComponent","unmountComponentAtNode","reactRootElement","containerHasReactMarkup","isRenderedByReact","component","call","constructAndRenderComponent","constructor","constructAndRenderComponentByID","domNode","document","getElementById","getReactRootIDFromNodeID","createReactRootID","unmountComponentFromNode","instance","unmountComponent","documentElement","lastChild","removeChild","parentNode","containerChild","firstChild","console","warn","reactRoot","findComponentRoot","charAt","getFirstReactDOM","current","ancestorNode","firstChildren","childIndex","deepestAncestor","length","child","targetChild","childID","isAncestorIDOf","push","nextSibling","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactMount\n */\n\n\"use strict\";\n\nvar DOMProperty = require(\"./DOMProperty\");\nvar ReactEventEmitter = require(\"./ReactEventEmitter\");\nvar ReactInstanceHandles = require(\"./ReactInstanceHandles\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar containsNode = require(\"./containsNode\");\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\nvar instantiateReactComponent = require(\"./instantiateReactComponent\");\nvar invariant = require(\"./invariant\");\nvar shouldUpdateReactComponent = require(\"./shouldUpdateReactComponent\");\n\nvar SEPARATOR = ReactInstanceHandles.SEPARATOR;\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar nodeCache = {};\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n\n/** Mapping from reactRootID to React component instance. */\nvar instancesByReactRootID = {};\n\n/** Mapping from reactRootID to `container` nodes. */\nvar containersByReactRootID = {};\n\nif (require('./React').__DEV__ === true) {\n  /** __DEV__-only mapping from reactRootID to root elements. */\n  var rootElementsByReactRootID = {};\n}\n\n// Used to store breadth-first search state in findComponentRoot.\nvar findComponentRootReusableArray = [];\n\n/**\n * @param {DOMElement} container DOM element that may contain a React component.\n * @return {?string} A \"reactRoot\" ID, if a React component is rendered.\n */\nfunction getReactRootID(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return rootElement && ReactMount.getID(rootElement);\n}\n\n/**\n * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form\n * element can return its control whose name or ID equals ATTR_NAME. All\n * DOM nodes support `getAttributeNode` but this can also get called on\n * other objects so just return '' if we're given something other than a\n * DOM node (such as window).\n *\n * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.\n * @return {string} ID of the supplied `domNode`.\n */\nfunction getID(node) {\n  var id = internalGetID(node);\n  if (id) {\n    if (nodeCache.hasOwnProperty(id)) {\n      var cached = nodeCache[id];\n      if (cached !== node) {\n        (require('./React').__DEV__ === true ? invariant(\n          !isValid(cached, id),\n          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',\n          ATTR_NAME, id\n        ) : invariant(!isValid(cached, id)));\n\n        nodeCache[id] = node;\n      }\n    } else {\n      nodeCache[id] = node;\n    }\n  }\n\n  return id;\n}\n\nfunction internalGetID(node) {\n  // If node is something like a window, document, or text node, none of\n  // which support attributes or a .getAttribute method, gracefully return\n  // the empty string, as if the attribute were missing.\n  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';\n}\n\n/**\n * Sets the React-specific ID of the given node.\n *\n * @param {DOMElement} node The DOM node whose ID will be set.\n * @param {string} id The value of the ID attribute.\n */\nfunction setID(node, id) {\n  var oldID = internalGetID(node);\n  if (oldID !== id) {\n    delete nodeCache[oldID];\n  }\n  node.setAttribute(ATTR_NAME, id);\n  nodeCache[id] = node;\n}\n\n/**\n * Finds the node with the supplied React-generated DOM ID.\n *\n * @param {string} id A React-generated DOM ID.\n * @return {DOMElement} DOM node with the suppled `id`.\n * @internal\n */\nfunction getNode(id) {\n  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {\n    nodeCache[id] = ReactMount.findReactNodeByID(id);\n  }\n  return nodeCache[id];\n}\n\n/**\n * A node is \"valid\" if it is contained by a currently mounted container.\n *\n * This means that the node does not have to be contained by a document in\n * order to be considered valid.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @param {string} id The expected ID of the node.\n * @return {boolean} Whether the node is contained by a mounted container.\n */\nfunction isValid(node, id) {\n  if (node) {\n    (require('./React').__DEV__ === true ? invariant(\n      internalGetID(node) === id,\n      'ReactMount: Unexpected modification of `%s`',\n      ATTR_NAME\n    ) : invariant(internalGetID(node) === id));\n\n    var container = ReactMount.findReactContainerForID(id);\n    if (container && containsNode(container, node)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Causes the cache to forget about one React-specific ID.\n *\n * @param {string} id The ID to forget.\n */\nfunction purgeID(id) {\n  delete nodeCache[id];\n}\n\nvar deepestNodeSoFar = null;\nfunction findDeepestCachedAncestorImpl(ancestorID) {\n  var ancestor = nodeCache[ancestorID];\n  if (ancestor && isValid(ancestor, ancestorID)) {\n    deepestNodeSoFar = ancestor;\n  } else {\n    // This node isn't populated in the cache, so presumably none of its\n    // descendants are. Break out of the loop.\n    return false;\n  }\n}\n\n/**\n * Return the deepest cached node whose ID is a prefix of `targetID`.\n */\nfunction findDeepestCachedAncestor(targetID) {\n  deepestNodeSoFar = null;\n  ReactInstanceHandles.traverseAncestors(\n    targetID,\n    findDeepestCachedAncestorImpl\n  );\n\n  var foundNode = deepestNodeSoFar;\n  deepestNodeSoFar = null;\n  return foundNode;\n}\n\n/**\n * Mounting is the process of initializing a React component by creatings its\n * representative DOM elements and inserting them into a supplied `container`.\n * Any prior content inside `container` is destroyed in the process.\n *\n *   ReactMount.renderComponent(\n *     component,\n *     document.getElementById('container')\n *   );\n *\n *   <div id=\"container\">                   <-- Supplied `container`.\n *     <div data-reactid=\".3\">              <-- Rendered reactRoot of React\n *       // ...                                 component.\n *     </div>\n *   </div>\n *\n * Inside of `container`, the first element rendered is the \"reactRoot\".\n */\nvar ReactMount = {\n  /** Time spent generating markup. */\n  totalInstantiationTime: 0,\n\n  /** Time spent inserting markup into the DOM. */\n  totalInjectionTime: 0,\n\n  /** Whether support for touch events should be initialized. */\n  useTouchEvents: false,\n\n  /** Exposed for debugging purposes **/\n  _instancesByReactRootID: instancesByReactRootID,\n\n  /**\n   * This is a hook provided to support rendering React components while\n   * ensuring that the apparent scroll position of its `container` does not\n   * change.\n   *\n   * @param {DOMElement} container The `container` being rendered into.\n   * @param {function} renderCallback This must be called once to do the render.\n   */\n  scrollMonitor: function(container, renderCallback) {\n    renderCallback();\n  },\n\n  /**\n   * Take a component that's already mounted into the DOM and replace its props\n   * @param {ReactComponent} prevComponent component instance already in the DOM\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {?function} callback function triggered on completion\n   */\n  _updateRootComponent: function(\n      prevComponent,\n      nextComponent,\n      container,\n      callback) {\n    var nextProps = nextComponent.props;\n    ReactMount.scrollMonitor(container, function() {\n      prevComponent.replaceProps(nextProps, callback);\n    });\n\n    if (require('./React').__DEV__ === true) {\n      // Record the root element in case it later gets transplanted.\n      rootElementsByReactRootID[getReactRootID(container)] =\n        getReactRootElementInContainer(container);\n    }\n\n    return prevComponent;\n  },\n\n  /**\n   * Register a component into the instance map and starts scroll value\n   * monitoring\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @return {string} reactRoot ID prefix\n   */\n  _registerComponent: function(nextComponent, container) {\n    (require('./React').__DEV__ === true ? invariant(\n      container && (\n        container.nodeType === ELEMENT_NODE_TYPE ||\n        container.nodeType === DOC_NODE_TYPE\n      ),\n      '_registerComponent(...): Target container is not a DOM element.'\n    ) : invariant(container && (\n      container.nodeType === ELEMENT_NODE_TYPE ||\n      container.nodeType === DOC_NODE_TYPE\n    )));\n\n    ReactEventEmitter.ensureScrollValueMonitoring();\n\n    var reactRootID = ReactMount.registerContainer(container);\n    instancesByReactRootID[reactRootID] = nextComponent;\n    return reactRootID;\n  },\n\n  /**\n   * Render a new component into the DOM.\n   * @param {ReactComponent} nextComponent component instance to render\n   * @param {DOMElement} container container to render into\n   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion\n   * @return {ReactComponent} nextComponent\n   */\n  _renderNewRootComponent: ReactPerf.measure(\n    'ReactMount',\n    '_renderNewRootComponent',\n    function(\n        nextComponent,\n        container,\n        shouldReuseMarkup) {\n\n      var componentInstance = instantiateReactComponent(nextComponent);\n      var reactRootID = ReactMount._registerComponent(\n        componentInstance,\n        container\n      );\n      componentInstance.mountComponentIntoNode(\n        reactRootID,\n        container,\n        shouldReuseMarkup\n      );\n\n      if (require('./React').__DEV__ === true) {\n        // Record the root element in case it later gets transplanted.\n        rootElementsByReactRootID[reactRootID] =\n          getReactRootElementInContainer(container);\n      }\n\n      return componentInstance;\n    }\n  ),\n\n  /**\n   * Renders a React component into the DOM in the supplied `container`.\n   *\n   * If the React component was previously rendered into `container`, this will\n   * perform an update on it and only mutate the DOM as necessary to reflect the\n   * latest React component.\n   *\n   * @param {ReactComponent} nextComponent Component instance to render.\n   * @param {DOMElement} container DOM element to render into.\n   * @param {?function} callback function triggered on completion\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  renderComponent: function(nextComponent, container, callback) {\n    var prevComponent = instancesByReactRootID[getReactRootID(container)];\n\n    if (prevComponent) {\n      if (shouldUpdateReactComponent(prevComponent, nextComponent)) {\n        return ReactMount._updateRootComponent(\n          prevComponent,\n          nextComponent,\n          container,\n          callback\n        );\n      } else {\n        ReactMount.unmountComponentAtNode(container);\n      }\n    }\n\n    var reactRootElement = getReactRootElementInContainer(container);\n    var containerHasReactMarkup =\n      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);\n\n    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;\n\n    var component = ReactMount._renderNewRootComponent(\n      nextComponent,\n      container,\n      shouldReuseMarkup\n    );\n    callback && callback.call(component);\n    return component;\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into the supplied `container`.\n   *\n   * @param {function} constructor React component constructor.\n   * @param {?object} props Initial props of the component instance.\n   * @param {DOMElement} container DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in `container`.\n   */\n  constructAndRenderComponent: function(constructor, props, container) {\n    return ReactMount.renderComponent(constructor(props), container);\n  },\n\n  /**\n   * Constructs a component instance of `constructor` with `initialProps` and\n   * renders it into a container node identified by supplied `id`.\n   *\n   * @param {function} componentConstructor React component constructor\n   * @param {?object} props Initial props of the component instance.\n   * @param {string} id ID of the DOM element to render into.\n   * @return {ReactComponent} Component instance rendered in the container node.\n   */\n  constructAndRenderComponentByID: function(constructor, props, id) {\n    var domNode = document.getElementById(id);\n    (require('./React').__DEV__ === true ? invariant(\n      domNode,\n      'Tried to get element with id of \"%s\" but it is not present on the page.',\n      id\n    ) : invariant(domNode));\n    return ReactMount.constructAndRenderComponent(constructor, props, domNode);\n  },\n\n  /**\n   * Registers a container node into which React components will be rendered.\n   * This also creates the \"reactRoot\" ID that will be assigned to the element\n   * rendered within.\n   *\n   * @param {DOMElement} container DOM element to register as a container.\n   * @return {string} The \"reactRoot\" ID of elements rendered within.\n   */\n  registerContainer: function(container) {\n    var reactRootID = getReactRootID(container);\n    if (reactRootID) {\n      // If one exists, make sure it is a valid \"reactRoot\" ID.\n      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);\n    }\n    if (!reactRootID) {\n      // No valid \"reactRoot\" ID found, create one.\n      reactRootID = ReactInstanceHandles.createReactRootID();\n    }\n    containersByReactRootID[reactRootID] = container;\n    return reactRootID;\n  },\n\n  /**\n   * Unmounts and destroys the React component rendered in the `container`.\n   *\n   * @param {DOMElement} container DOM element containing a React component.\n   * @return {boolean} True if a component was found in and unmounted from\n   *                   `container`\n   */\n  unmountComponentAtNode: function(container) {\n    var reactRootID = getReactRootID(container);\n    var component = instancesByReactRootID[reactRootID];\n    if (!component) {\n      return false;\n    }\n    ReactMount.unmountComponentFromNode(component, container);\n    delete instancesByReactRootID[reactRootID];\n    delete containersByReactRootID[reactRootID];\n    if (require('./React').__DEV__ === true) {\n      delete rootElementsByReactRootID[reactRootID];\n    }\n    return true;\n  },\n\n  /**\n   * Unmounts a component and removes it from the DOM.\n   *\n   * @param {ReactComponent} instance React component instance.\n   * @param {DOMElement} container DOM element to unmount from.\n   * @final\n   * @internal\n   * @see {ReactMount.unmountComponentAtNode}\n   */\n  unmountComponentFromNode: function(instance, container) {\n    instance.unmountComponent();\n\n    if (container.nodeType === DOC_NODE_TYPE) {\n      container = container.documentElement;\n    }\n\n    // http://jsperf.com/emptying-a-node\n    while (container.lastChild) {\n      container.removeChild(container.lastChild);\n    }\n  },\n\n  /**\n   * Finds the container DOM element that contains React component to which the\n   * supplied DOM `id` belongs.\n   *\n   * @param {string} id The ID of an element rendered by a React component.\n   * @return {?DOMElement} DOM element that contains the `id`.\n   */\n  findReactContainerForID: function(id) {\n    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);\n    var container = containersByReactRootID[reactRootID];\n\n    if (require('./React').__DEV__ === true) {\n      var rootElement = rootElementsByReactRootID[reactRootID];\n      if (rootElement && rootElement.parentNode !== container) {\n        (require('./React').__DEV__ === true ? invariant(\n          // Call internalGetID here because getID calls isValid which calls\n          // findReactContainerForID (this function).\n          internalGetID(rootElement) === reactRootID,\n          'ReactMount: Root element ID differed from reactRootID.'\n        ) : invariant(// Call internalGetID here because getID calls isValid which calls\n        // findReactContainerForID (this function).\n        internalGetID(rootElement) === reactRootID));\n\n        var containerChild = container.firstChild;\n        if (containerChild &&\n            reactRootID === internalGetID(containerChild)) {\n          // If the container has a new child with the same ID as the old\n          // root element, then rootElementsByReactRootID[reactRootID] is\n          // just stale and needs to be updated. The case that deserves a\n          // warning is when the container is empty.\n          rootElementsByReactRootID[reactRootID] = containerChild;\n        } else {\n          console.warn(\n            'ReactMount: Root element has been removed from its original ' +\n            'container. New container:', rootElement.parentNode\n          );\n        }\n      }\n    }\n\n    return container;\n  },\n\n  /**\n   * Finds an element rendered by React with the supplied ID.\n   *\n   * @param {string} id ID of a DOM node in the React component.\n   * @return {DOMElement} Root DOM node of the React component.\n   */\n  findReactNodeByID: function(id) {\n    var reactRoot = ReactMount.findReactContainerForID(id);\n    return ReactMount.findComponentRoot(reactRoot, id);\n  },\n\n  /**\n   * True if the supplied `node` is rendered by React.\n   *\n   * @param {*} node DOM Element to check.\n   * @return {boolean} True if the DOM Element appears to be rendered by React.\n   * @internal\n   */\n  isRenderedByReact: function(node) {\n    if (node.nodeType !== 1) {\n      // Not a DOMElement, therefore not a React component\n      return false;\n    }\n    var id = ReactMount.getID(node);\n    return id ? id.charAt(0) === SEPARATOR : false;\n  },\n\n  /**\n   * Traverses up the ancestors of the supplied node to find a node that is a\n   * DOM representation of a React component.\n   *\n   * @param {*} node\n   * @return {?DOMEventTarget}\n   * @internal\n   */\n  getFirstReactDOM: function(node) {\n    var current = node;\n    while (current && current.parentNode !== current) {\n      if (ReactMount.isRenderedByReact(current)) {\n        return current;\n      }\n      current = current.parentNode;\n    }\n    return null;\n  },\n\n  /**\n   * Finds a node with the supplied `targetID` inside of the supplied\n   * `ancestorNode`.  Exploits the ID naming scheme to perform the search\n   * quickly.\n   *\n   * @param {DOMEventTarget} ancestorNode Search from this root.\n   * @pararm {string} targetID ID of the DOM representation of the component.\n   * @return {DOMEventTarget} DOM node with the supplied `targetID`.\n   * @internal\n   */\n  findComponentRoot: function(ancestorNode, targetID) {\n    var firstChildren = findComponentRootReusableArray;\n    var childIndex = 0;\n\n    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;\n\n    firstChildren[0] = deepestAncestor.firstChild;\n    firstChildren.length = 1;\n\n    while (childIndex < firstChildren.length) {\n      var child = firstChildren[childIndex++];\n      var targetChild;\n\n      while (child) {\n        var childID = ReactMount.getID(child);\n        if (childID) {\n          // Even if we find the node we're looking for, we finish looping\n          // through its siblings to ensure they're cached so that we don't have\n          // to revisit this node again. Otherwise, we make n^2 calls to getID\n          // when visiting the many children of a single node in order.\n\n          if (targetID === childID) {\n            targetChild = child;\n          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {\n            // If we find a child whose ID is an ancestor of the given ID,\n            // then we can be sure that we only want to search the subtree\n            // rooted at this child, so we can throw out the rest of the\n            // search state.\n            firstChildren.length = childIndex = 0;\n            firstChildren.push(child.firstChild);\n          }\n\n        } else {\n          // If this child had no ID, then there's a chance that it was\n          // injected automatically by the browser, as when a `<table>`\n          // element sprouts an extra `<tbody>` child as a side effect of\n          // `.innerHTML` parsing. Optimistically continue down this\n          // branch, but not before examining the other siblings.\n          firstChildren.push(child.firstChild);\n        }\n\n        child = child.nextSibling;\n      }\n\n      if (targetChild) {\n        // Emptying firstChildren/findComponentRootReusableArray is\n        // not necessary for correctness, but it helps the GC reclaim\n        // any nodes that were left at the end of the search.\n        firstChildren.length = 0;\n\n        return targetChild;\n      }\n    }\n\n    firstChildren.length = 0;\n\n    (require('./React').__DEV__ === true ? invariant(\n      false,\n      'findComponentRoot(..., %s): Unable to find element. This probably ' +\n      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +\n      'usually due to forgetting a <tbody> when using tables or nesting <p> ' +\n      'or <a> tags. Try inspecting the child nodes of the element with React ' +\n      'ID `%s`.',\n      targetID,\n      ReactMount.getID(ancestorNode)\n    ) : invariant(false));\n  },\n\n\n  /**\n   * React ID utilities.\n   */\n\n  getReactRootID: getReactRootID,\n\n  getID: getID,\n\n  setID: setID,\n\n  getNode: getNode,\n\n  purgeID: purgeID\n};\n\nmodule.exports = ReactMount;\n"]},"metadata":{},"sourceType":"script"}