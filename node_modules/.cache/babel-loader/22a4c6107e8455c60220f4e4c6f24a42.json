{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n\"use strict\";\n\nvar ReactPropTypes = require(\"./ReactPropTypes\");\n\nvar invariant = require(\"./invariant\");\n\nvar warning = require(\"./warning\");\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(input) {\n  require('./React').__DEV__ === true ? invariant(input.props.checkedLink == null || input.props.valueLink == null, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\\'t want to use valueLink and vice versa.') : invariant(input.props.checkedLink == null || input.props.valueLink == null);\n}\n\nfunction _assertValueLink(input) {\n  _assertSingleLink(input);\n\n  require('./React').__DEV__ === true ? invariant(input.props.value == null && input.props.onChange == null, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\\'t want to use valueLink.') : invariant(input.props.value == null && input.props.onChange == null);\n}\n\nfunction _assertCheckedLink(input) {\n  _assertSingleLink(input);\n\n  require('./React').__DEV__ === true ? invariant(input.props.checked == null && input.props.onChange == null, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\\'t want to ' + 'use checkedLink') : invariant(input.props.checked == null && input.props.onChange == null);\n}\n/**\n * @param {SyntheticEvent} e change event to handle\n */\n\n\nfunction _handleLinkedValueChange(e) {\n  /*jshint validthis:true */\n  this.props.valueLink.requestChange(e.target.value);\n}\n/**\n  * @param {SyntheticEvent} e change event to handle\n  */\n\n\nfunction _handleLinkedCheckChange(e) {\n  /*jshint validthis:true */\n  this.props.checkedLink.requestChange(e.target.checked);\n}\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\n\n\nvar LinkedValueUtils = {\n  Mixin: {\n    propTypes: {\n      value: function (props, propName, componentName) {\n        if (require('./React').__DEV__ === true) {\n          require('./React').__DEV__ === true ? warning(!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled, 'You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.') : null;\n        }\n      },\n      checked: function (props, propName, componentName) {\n        if (require('./React').__DEV__ === true) {\n          require('./React').__DEV__ === true ? warning(!props[propName] || props.onChange || props.readOnly || props.disabled, 'You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.') : null;\n        }\n      },\n      onChange: ReactPropTypes.func\n    }\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function (input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n\n      return input.props.valueLink.value;\n    }\n\n    return input.props.value;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function (input) {\n    if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n\n      return input.props.checkedLink.value;\n    }\n\n    return input.props.checked;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {function} change callback either from onChange prop or link.\n   */\n  getOnChange: function (input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n\n      return _handleLinkedValueChange;\n    } else if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n\n      return _handleLinkedCheckChange;\n    }\n\n    return input.props.onChange;\n  }\n};\nmodule.exports = LinkedValueUtils;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/LinkedValueUtils.js"],"names":["ReactPropTypes","require","invariant","warning","hasReadOnlyValue","_assertSingleLink","input","__DEV__","props","checkedLink","valueLink","_assertValueLink","value","onChange","_assertCheckedLink","checked","_handleLinkedValueChange","e","requestChange","target","_handleLinkedCheckChange","LinkedValueUtils","Mixin","propTypes","propName","componentName","type","readOnly","disabled","func","getValue","getChecked","getOnChange","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule LinkedValueUtils\n * @typechecks static-only\n */\n\n\"use strict\";\n\nvar ReactPropTypes = require(\"./ReactPropTypes\");\n\nvar invariant = require(\"./invariant\");\nvar warning = require(\"./warning\");\n\nvar hasReadOnlyValue = {\n  'button': true,\n  'checkbox': true,\n  'image': true,\n  'hidden': true,\n  'radio': true,\n  'reset': true,\n  'submit': true\n};\n\nfunction _assertSingleLink(input) {\n  (require('./React').__DEV__ === true ? invariant(\n      input.props.checkedLink == null || input.props.valueLink == null,\n      'Cannot provide a checkedLink and a valueLink. If you want to use ' +\n      'checkedLink, you probably don\\'t want to use valueLink and vice versa.'\n  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));\n}\nfunction _assertValueLink(input) {\n  _assertSingleLink(input);\n  (require('./React').__DEV__ === true ? invariant(\n    input.props.value == null && input.props.onChange == null,\n    'Cannot provide a valueLink and a value or onChange event. If you want ' +\n    'to use value or onChange, you probably don\\'t want to use valueLink.'\n  ) : invariant(input.props.value == null && input.props.onChange == null));\n}\n\nfunction _assertCheckedLink(input) {\n  _assertSingleLink(input);\n  (require('./React').__DEV__ === true ? invariant(\n    input.props.checked == null && input.props.onChange == null,\n    'Cannot provide a checkedLink and a checked property or onChange event. ' +\n    'If you want to use checked or onChange, you probably don\\'t want to ' +\n    'use checkedLink'\n  ) : invariant(input.props.checked == null && input.props.onChange == null));\n}\n\n/**\n * @param {SyntheticEvent} e change event to handle\n */\nfunction _handleLinkedValueChange(e) {\n  /*jshint validthis:true */\n  this.props.valueLink.requestChange(e.target.value);\n}\n\n/**\n  * @param {SyntheticEvent} e change event to handle\n  */\nfunction _handleLinkedCheckChange(e) {\n  /*jshint validthis:true */\n  this.props.checkedLink.requestChange(e.target.checked);\n}\n\n/**\n * Provide a linked `value` attribute for controlled forms. You should not use\n * this outside of the ReactDOM controlled form components.\n */\nvar LinkedValueUtils = {\n  Mixin: {\n    propTypes: {\n      value: function(props, propName, componentName) {\n        if (require('./React').__DEV__ === true) {\n          (require('./React').__DEV__ === true ? warning(\n            !props[propName] ||\n            hasReadOnlyValue[props.type] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled,\n            'You provided a `value` prop to a form field without an ' +\n            '`onChange` handler. This will render a read-only field. If ' +\n            'the field should be mutable use `defaultValue`. Otherwise, ' +\n            'set either `onChange` or `readOnly`.'\n          ) : null);\n        }\n      },\n      checked: function(props, propName, componentName) {\n        if (require('./React').__DEV__ === true) {\n          (require('./React').__DEV__ === true ? warning(\n            !props[propName] ||\n            props.onChange ||\n            props.readOnly ||\n            props.disabled,\n            'You provided a `checked` prop to a form field without an ' +\n            '`onChange` handler. This will render a read-only field. If ' +\n            'the field should be mutable use `defaultChecked`. Otherwise, ' +\n            'set either `onChange` or `readOnly`.'\n          ) : null);\n        }\n      },\n      onChange: ReactPropTypes.func\n    }\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current value of the input either from value prop or link.\n   */\n  getValue: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return input.props.valueLink.value;\n    }\n    return input.props.value;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {*} current checked status of the input either from checked prop\n   *             or link.\n   */\n  getChecked: function(input) {\n    if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return input.props.checkedLink.value;\n    }\n    return input.props.checked;\n  },\n\n  /**\n   * @param {ReactComponent} input Form component\n   * @return {function} change callback either from onChange prop or link.\n   */\n  getOnChange: function(input) {\n    if (input.props.valueLink) {\n      _assertValueLink(input);\n      return _handleLinkedValueChange;\n    } else if (input.props.checkedLink) {\n      _assertCheckedLink(input);\n      return _handleLinkedCheckChange;\n    }\n    return input.props.onChange;\n  }\n};\n\nmodule.exports = LinkedValueUtils;\n"]},"metadata":{},"sourceType":"script"}