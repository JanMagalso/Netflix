{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMSelect\n */\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\n\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar invariant = require(\"./invariant\");\n\nvar merge = require(\"./merge\"); // Store a reference to the <select> `ReactDOMComponent`.\n\n\nvar select = ReactDOM.select;\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\n\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n\n  if (props.multiple) {\n    require('./React').__DEV__ === true ? invariant(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if `multiple` is ' + 'true.', propName) : invariant(Array.isArray(props[propName]));\n  } else {\n    require('./React').__DEV__ === true ? invariant(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar value if ' + '`multiple` is false.', propName) : invariant(!Array.isArray(props[propName]));\n  }\n}\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {?*} propValue For uncontrolled components, null/undefined. For\n * controlled components, a string (or with `multiple`, a list of strings).\n * @private\n */\n\n\nfunction updateOptions(component, propValue) {\n  var multiple = component.props.multiple;\n  var value = propValue != null ? propValue : component.state.value;\n  var options = component.getDOMNode().options;\n  var selectedValue, i, l;\n\n  if (multiple) {\n    selectedValue = {};\n\n    for (i = 0, l = value.length; i < l; ++i) {\n      selectedValue['' + value[i]] = true;\n    }\n  } else {\n    selectedValue = '' + value;\n  }\n\n  for (i = 0, l = options.length; i < l; i++) {\n    var selected = multiple ? selectedValue.hasOwnProperty(options[i].value) : options[i].value === selectedValue;\n\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\n\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMSelect',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n  getInitialState: function () {\n    return {\n      value: this.props.defaultValue || (this.props.multiple ? [] : '')\n    };\n  },\n  componentWillReceiveProps: function (nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({\n        value: [this.state.value]\n      });\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({\n        value: this.state.value[0]\n      });\n    }\n  },\n  shouldComponentUpdate: function () {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n    props.onChange = this._handleChange;\n    props.value = null;\n    return select(props, this.props.children);\n  },\n  componentDidMount: function () {\n    updateOptions(this, LinkedValueUtils.getValue(this));\n  },\n  componentDidUpdate: function () {\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null) {\n      updateOptions(this, value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange.call(this, event);\n      this._isChanging = false;\n    }\n\n    var selectedValue;\n\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n\n    this.setState({\n      value: selectedValue\n    });\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMSelect;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactDOMSelect.js"],"names":["AutoFocusMixin","require","LinkedValueUtils","ReactBrowserComponentMixin","ReactCompositeComponent","ReactDOM","invariant","merge","select","selectValueType","props","propName","componentName","multiple","__DEV__","Array","isArray","updateOptions","component","propValue","value","state","options","getDOMNode","selectedValue","i","l","length","selected","hasOwnProperty","ReactDOMSelect","createClass","displayName","mixins","Mixin","propTypes","defaultValue","getInitialState","componentWillReceiveProps","nextProps","setState","shouldComponentUpdate","_isChanging","render","onChange","_handleChange","children","componentDidMount","getValue","componentDidUpdate","event","returnValue","getOnChange","call","target","push","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMSelect\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar invariant = require(\"./invariant\");\nvar merge = require(\"./merge\");\n\n// Store a reference to the <select> `ReactDOMComponent`.\nvar select = ReactDOM.select;\n\n/**\n * Validation function for `value` and `defaultValue`.\n * @private\n */\nfunction selectValueType(props, propName, componentName) {\n  if (props[propName] == null) {\n    return;\n  }\n  if (props.multiple) {\n    (require('./React').__DEV__ === true ? invariant(\n      Array.isArray(props[propName]),\n      'The `%s` prop supplied to <select> must be an array if `multiple` is ' +\n      'true.',\n      propName\n    ) : invariant(Array.isArray(props[propName])));\n  } else {\n    (require('./React').__DEV__ === true ? invariant(\n      !Array.isArray(props[propName]),\n      'The `%s` prop supplied to <select> must be a scalar value if ' +\n      '`multiple` is false.',\n      propName\n    ) : invariant(!Array.isArray(props[propName])));\n  }\n}\n\n/**\n * If `value` is supplied, updates <option> elements on mount and update.\n * @param {ReactComponent} component Instance of ReactDOMSelect\n * @param {?*} propValue For uncontrolled components, null/undefined. For\n * controlled components, a string (or with `multiple`, a list of strings).\n * @private\n */\nfunction updateOptions(component, propValue) {\n  var multiple = component.props.multiple;\n  var value = propValue != null ? propValue : component.state.value;\n  var options = component.getDOMNode().options;\n  var selectedValue, i, l;\n  if (multiple) {\n    selectedValue = {};\n    for (i = 0, l = value.length; i < l; ++i) {\n      selectedValue['' + value[i]] = true;\n    }\n  } else {\n    selectedValue = '' + value;\n  }\n  for (i = 0, l = options.length; i < l; i++) {\n    var selected = multiple ?\n      selectedValue.hasOwnProperty(options[i].value) :\n      options[i].value === selectedValue;\n\n    if (selected !== options[i].selected) {\n      options[i].selected = selected;\n    }\n  }\n}\n\n/**\n * Implements a <select> native component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * string. If `multiple` is true, the prop must be an array of strings.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\nvar ReactDOMSelect = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMSelect',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  propTypes: {\n    defaultValue: selectValueType,\n    value: selectValueType\n  },\n\n  getInitialState: function() {\n    return {value: this.props.defaultValue || (this.props.multiple ? [] : '')};\n  },\n\n  componentWillReceiveProps: function(nextProps) {\n    if (!this.props.multiple && nextProps.multiple) {\n      this.setState({value: [this.state.value]});\n    } else if (this.props.multiple && !nextProps.multiple) {\n      this.setState({value: this.state.value[0]});\n    }\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n\n    props.onChange = this._handleChange;\n    props.value = null;\n\n    return select(props, this.props.children);\n  },\n\n  componentDidMount: function() {\n    updateOptions(this, LinkedValueUtils.getValue(this));\n  },\n\n  componentDidUpdate: function() {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      updateOptions(this, value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange.call(this, event);\n      this._isChanging = false;\n    }\n\n    var selectedValue;\n    if (this.props.multiple) {\n      selectedValue = [];\n      var options = event.target.options;\n      for (var i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          selectedValue.push(options[i].value);\n        }\n      }\n    } else {\n      selectedValue = event.target.value;\n    }\n\n    this.setState({value: selectedValue});\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMSelect;\n"]},"metadata":{},"sourceType":"script"}