{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\"use strict\";\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\n\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar invariant = require(\"./invariant\");\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\n\n\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\nvar useWhitespaceWorkaround;\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactComponent.BackendIDOperations`.\n */\n\nvar ReactDOMIDOperations = {\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: ReactPerf.measure('ReactDOMIDOperations', 'updatePropertyByID', function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    require('./React').__DEV__ === true ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name), 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)); // If we're updating to null or undefined, we should remove the property\n    // from the DOM node instead of inadvertantly setting to a string. This\n    // brings us in line with the same behavior we have on initial render.\n\n    if (value != null) {\n      DOMPropertyOperations.setValueForProperty(node, name, value);\n    } else {\n      DOMPropertyOperations.deleteValueForProperty(node, name);\n    }\n  }),\n\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: ReactPerf.measure('ReactDOMIDOperations', 'deletePropertyByID', function (id, name, value) {\n    var node = ReactMount.getNode(id);\n    require('./React').__DEV__ === true ? invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name), 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name));\n    DOMPropertyOperations.deleteValueForProperty(node, name, value);\n  }),\n\n  /**\n   * Updates a DOM node with new style values. If a value is specified as '',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: ReactPerf.measure('ReactDOMIDOperations', 'updateStylesByID', function (id, styles) {\n    var node = ReactMount.getNode(id);\n    CSSPropertyOperations.setValueForStyles(node, styles);\n  }),\n\n  /**\n   * Updates a DOM node's innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: ReactPerf.measure('ReactDOMIDOperations', 'updateInnerHTMLByID', function (id, html) {\n    var node = ReactMount.getNode(id); // IE8: When updating a just created node with innerHTML only leading\n    // whitespace is removed. When updating an existing node with innerHTML\n    // whitespace in root TextNodes is also collapsed.\n    // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n    if (useWhitespaceWorkaround === undefined) {\n      // Feature detection; only IE8 is known to behave improperly like this.\n      var temp = document.createElement('div');\n      temp.innerHTML = ' ';\n      useWhitespaceWorkaround = temp.innerHTML === '';\n    }\n\n    if (useWhitespaceWorkaround) {\n      // Magic theory: IE8 supposedly differentiates between added and updated\n      // nodes when processing innerHTML, innerHTML on updated nodes suffers\n      // from worse whitespace behavior. Re-adding a node like this triggers\n      // the initial and more favorable whitespace behavior.\n      node.parentNode.replaceChild(node, node);\n    }\n\n    if (useWhitespaceWorkaround && html.match(/^[ \\r\\n\\t\\f]/)) {\n      // Recover leading whitespace by temporarily prepending any character.\n      // \\uFEFF has the potential advantage of being zero-width/invisible.\n      node.innerHTML = '\\uFEFF' + html;\n      node.firstChild.deleteData(0, 1);\n    } else {\n      node.innerHTML = html;\n    }\n  }),\n\n  /**\n   * Updates a DOM node's text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: ReactPerf.measure('ReactDOMIDOperations', 'updateTextContentByID', function (id, content) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.updateTextContent(node, content);\n  }),\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure('ReactDOMIDOperations', 'dangerouslyReplaceNodeWithMarkupByID', function (id, markup) {\n    var node = ReactMount.getNode(id);\n    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n  }),\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: ReactPerf.measure('ReactDOMIDOperations', 'dangerouslyProcessChildrenUpdates', function (updates, markup) {\n    for (var i = 0; i < updates.length; i++) {\n      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n    }\n\n    DOMChildrenOperations.processUpdates(updates, markup);\n  })\n};\nmodule.exports = ReactDOMIDOperations;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactDOMIDOperations.js"],"names":["CSSPropertyOperations","require","DOMChildrenOperations","DOMPropertyOperations","ReactMount","ReactPerf","invariant","INVALID_PROPERTY_ERRORS","dangerouslySetInnerHTML","style","useWhitespaceWorkaround","ReactDOMIDOperations","updatePropertyByID","measure","id","name","value","node","getNode","__DEV__","hasOwnProperty","setValueForProperty","deleteValueForProperty","deletePropertyByID","updateStylesByID","styles","setValueForStyles","updateInnerHTMLByID","html","undefined","temp","document","createElement","innerHTML","parentNode","replaceChild","match","firstChild","deleteData","updateTextContentByID","content","updateTextContent","dangerouslyReplaceNodeWithMarkupByID","markup","dangerouslyReplaceNodeWithMarkup","dangerouslyProcessChildrenUpdates","updates","i","length","parentID","processUpdates","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMIDOperations\n * @typechecks static-only\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar CSSPropertyOperations = require(\"./CSSPropertyOperations\");\nvar DOMChildrenOperations = require(\"./DOMChildrenOperations\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar invariant = require(\"./invariant\");\n\n/**\n * Errors for properties that should not be updated with `updatePropertyById()`.\n *\n * @type {object}\n * @private\n */\nvar INVALID_PROPERTY_ERRORS = {\n  dangerouslySetInnerHTML:\n    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',\n  style: '`style` must be set using `updateStylesByID()`.'\n};\n\nvar useWhitespaceWorkaround;\n\n/**\n * Operations used to process updates to DOM nodes. This is made injectable via\n * `ReactComponent.BackendIDOperations`.\n */\nvar ReactDOMIDOperations = {\n\n  /**\n   * Updates a DOM node with new property values. This should only be used to\n   * update DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A valid property name, see `DOMProperty`.\n   * @param {*} value New value of the property.\n   * @internal\n   */\n  updatePropertyByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'updatePropertyByID',\n    function(id, name, value) {\n      var node = ReactMount.getNode(id);\n      (require('./React').__DEV__ === true ? invariant(\n        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n        'updatePropertyByID(...): %s',\n        INVALID_PROPERTY_ERRORS[name]\n      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n\n      // If we're updating to null or undefined, we should remove the property\n      // from the DOM node instead of inadvertantly setting to a string. This\n      // brings us in line with the same behavior we have on initial render.\n      if (value != null) {\n        DOMPropertyOperations.setValueForProperty(node, name, value);\n      } else {\n        DOMPropertyOperations.deleteValueForProperty(node, name);\n      }\n    }\n  ),\n\n  /**\n   * Updates a DOM node to remove a property. This should only be used to remove\n   * DOM properties in `DOMProperty`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} name A property name to remove, see `DOMProperty`.\n   * @internal\n   */\n  deletePropertyByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'deletePropertyByID',\n    function(id, name, value) {\n      var node = ReactMount.getNode(id);\n      (require('./React').__DEV__ === true ? invariant(\n        !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),\n        'updatePropertyByID(...): %s',\n        INVALID_PROPERTY_ERRORS[name]\n      ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));\n      DOMPropertyOperations.deleteValueForProperty(node, name, value);\n    }\n  ),\n\n  /**\n   * Updates a DOM node with new style values. If a value is specified as '',\n   * the corresponding style property will be unset.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {object} styles Mapping from styles to values.\n   * @internal\n   */\n  updateStylesByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'updateStylesByID',\n    function(id, styles) {\n      var node = ReactMount.getNode(id);\n      CSSPropertyOperations.setValueForStyles(node, styles);\n    }\n  ),\n\n  /**\n   * Updates a DOM node's innerHTML.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} html An HTML string.\n   * @internal\n   */\n  updateInnerHTMLByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'updateInnerHTMLByID',\n    function(id, html) {\n      var node = ReactMount.getNode(id);\n\n      // IE8: When updating a just created node with innerHTML only leading\n      // whitespace is removed. When updating an existing node with innerHTML\n      // whitespace in root TextNodes is also collapsed.\n      // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html\n\n      if (useWhitespaceWorkaround === undefined) {\n        // Feature detection; only IE8 is known to behave improperly like this.\n        var temp = document.createElement('div');\n        temp.innerHTML = ' ';\n        useWhitespaceWorkaround = temp.innerHTML === '';\n      }\n\n      if (useWhitespaceWorkaround) {\n        // Magic theory: IE8 supposedly differentiates between added and updated\n        // nodes when processing innerHTML, innerHTML on updated nodes suffers\n        // from worse whitespace behavior. Re-adding a node like this triggers\n        // the initial and more favorable whitespace behavior.\n        node.parentNode.replaceChild(node, node);\n      }\n\n      if (useWhitespaceWorkaround && html.match(/^[ \\r\\n\\t\\f]/)) {\n        // Recover leading whitespace by temporarily prepending any character.\n        // \\uFEFF has the potential advantage of being zero-width/invisible.\n        node.innerHTML = '\\uFEFF' + html;\n        node.firstChild.deleteData(0, 1);\n      } else {\n        node.innerHTML = html;\n      }\n    }\n  ),\n\n  /**\n   * Updates a DOM node's text content set by `props.content`.\n   *\n   * @param {string} id ID of the node to update.\n   * @param {string} content Text content.\n   * @internal\n   */\n  updateTextContentByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'updateTextContentByID',\n    function(id, content) {\n      var node = ReactMount.getNode(id);\n      DOMChildrenOperations.updateTextContent(node, content);\n    }\n  ),\n\n  /**\n   * Replaces a DOM node that exists in the document with markup.\n   *\n   * @param {string} id ID of child to be replaced.\n   * @param {string} markup Dangerous markup to inject in place of child.\n   * @internal\n   * @see {Danger.dangerouslyReplaceNodeWithMarkup}\n   */\n  dangerouslyReplaceNodeWithMarkupByID: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'dangerouslyReplaceNodeWithMarkupByID',\n    function(id, markup) {\n      var node = ReactMount.getNode(id);\n      DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);\n    }\n  ),\n\n  /**\n   * Updates a component's children by processing a series of updates.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markup List of markup strings.\n   * @internal\n   */\n  dangerouslyProcessChildrenUpdates: ReactPerf.measure(\n    'ReactDOMIDOperations',\n    'dangerouslyProcessChildrenUpdates',\n    function(updates, markup) {\n      for (var i = 0; i < updates.length; i++) {\n        updates[i].parentNode = ReactMount.getNode(updates[i].parentID);\n      }\n      DOMChildrenOperations.processUpdates(updates, markup);\n    }\n  )\n};\n\nmodule.exports = ReactDOMIDOperations;\n"]},"metadata":{},"sourceType":"script"}