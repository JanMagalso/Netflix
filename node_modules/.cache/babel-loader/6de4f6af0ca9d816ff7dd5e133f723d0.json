{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n/*jslint evil: true */\n\"use strict\";\n\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");\n\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\n\nvar ReactMount = require(\"./ReactMount\");\n\nvar ReactPerf = require(\"./ReactPerf\");\n\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");\n\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\n\nvar invariant = require(\"./invariant\");\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n/**\n * Abstracts away all functionality of `ReactComponent` requires knowledge of\n * the browser context.\n */\n\nvar ReactComponentBrowserEnvironment = {\n  ReactReconcileTransaction: ReactReconcileTransaction,\n  BackendIDOperations: ReactDOMIDOperations,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function (rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  },\n\n  /**\n   * @param {string} markup Markup string to place into the DOM Element.\n   * @param {DOMElement} container DOM Element to insert markup into.\n   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the\n   * container if possible.\n   */\n  mountImageIntoNode: ReactPerf.measure('ReactComponentBrowserEnvironment', 'mountImageIntoNode', function (markup, container, shouldReuseMarkup) {\n    require('./React').__DEV__ === true ? invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE), 'mountComponentIntoNode(...): Target container is not valid.') : invariant(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE));\n\n    if (shouldReuseMarkup) {\n      if (ReactMarkupChecksum.canReuseMarkup(markup, getReactRootElementInContainer(container))) {\n        return;\n      } else {\n        require('./React').__DEV__ === true ? invariant(container.nodeType !== DOC_NODE_TYPE, 'You\\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side.') : invariant(container.nodeType !== DOC_NODE_TYPE);\n\n        if (require('./React').__DEV__ === true) {\n          console.warn('React attempted to use reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server.');\n        }\n      }\n    }\n\n    require('./React').__DEV__ === true ? invariant(container.nodeType !== DOC_NODE_TYPE, 'You\\'re trying to render a component to the document but ' + 'you didn\\'t use server rendering. We can\\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See renderComponentToString() for server rendering.') : invariant(container.nodeType !== DOC_NODE_TYPE);\n    container.innerHTML = markup;\n  })\n};\nmodule.exports = ReactComponentBrowserEnvironment;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactComponentBrowserEnvironment.js"],"names":["ReactDOMIDOperations","require","ReactMarkupChecksum","ReactMount","ReactPerf","ReactReconcileTransaction","getReactRootElementInContainer","invariant","ELEMENT_NODE_TYPE","DOC_NODE_TYPE","ReactComponentBrowserEnvironment","BackendIDOperations","unmountIDFromEnvironment","rootNodeID","purgeID","mountImageIntoNode","measure","markup","container","shouldReuseMarkup","__DEV__","nodeType","canReuseMarkup","console","warn","innerHTML","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactComponentBrowserEnvironment\n */\n\n/*jslint evil: true */\n\n\"use strict\";\n\nvar ReactDOMIDOperations = require(\"./ReactDOMIDOperations\");\nvar ReactMarkupChecksum = require(\"./ReactMarkupChecksum\");\nvar ReactMount = require(\"./ReactMount\");\nvar ReactPerf = require(\"./ReactPerf\");\nvar ReactReconcileTransaction = require(\"./ReactReconcileTransaction\");\n\nvar getReactRootElementInContainer = require(\"./getReactRootElementInContainer\");\nvar invariant = require(\"./invariant\");\n\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOC_NODE_TYPE = 9;\n\n\n/**\n * Abstracts away all functionality of `ReactComponent` requires knowledge of\n * the browser context.\n */\nvar ReactComponentBrowserEnvironment = {\n  ReactReconcileTransaction: ReactReconcileTransaction,\n\n  BackendIDOperations: ReactDOMIDOperations,\n\n  /**\n   * If a particular environment requires that some resources be cleaned up,\n   * specify this in the injected Mixin. In the DOM, we would likely want to\n   * purge any cached node ID lookups.\n   *\n   * @private\n   */\n  unmountIDFromEnvironment: function(rootNodeID) {\n    ReactMount.purgeID(rootNodeID);\n  },\n\n  /**\n   * @param {string} markup Markup string to place into the DOM Element.\n   * @param {DOMElement} container DOM Element to insert markup into.\n   * @param {boolean} shouldReuseMarkup Should reuse the existing markup in the\n   * container if possible.\n   */\n  mountImageIntoNode: ReactPerf.measure(\n    'ReactComponentBrowserEnvironment',\n    'mountImageIntoNode',\n    function(markup, container, shouldReuseMarkup) {\n      (require('./React').__DEV__ === true ? invariant(\n        container && (\n          container.nodeType === ELEMENT_NODE_TYPE ||\n            container.nodeType === DOC_NODE_TYPE\n        ),\n        'mountComponentIntoNode(...): Target container is not valid.'\n      ) : invariant(container && (\n        container.nodeType === ELEMENT_NODE_TYPE ||\n          container.nodeType === DOC_NODE_TYPE\n      )));\n\n      if (shouldReuseMarkup) {\n        if (ReactMarkupChecksum.canReuseMarkup(\n          markup,\n          getReactRootElementInContainer(container))) {\n          return;\n        } else {\n          (require('./React').__DEV__ === true ? invariant(\n            container.nodeType !== DOC_NODE_TYPE,\n            'You\\'re trying to render a component to the document using ' +\n            'server rendering but the checksum was invalid. This usually ' +\n            'means you rendered a different component type or props on ' +\n            'the client from the one on the server, or your render() ' +\n            'methods are impure. React cannot handle this case due to ' +\n            'cross-browser quirks by rendering at the document root. You ' +\n            'should look for environment dependent code in your components ' +\n            'and ensure the props are the same client and server side.'\n          ) : invariant(container.nodeType !== DOC_NODE_TYPE));\n\n          if (require('./React').__DEV__ === true) {\n            console.warn(\n              'React attempted to use reuse markup in a container but the ' +\n              'checksum was invalid. This generally means that you are ' +\n              'using server rendering and the markup generated on the ' +\n              'server was not what the client was expecting. React injected' +\n              'new markup to compensate which works but you have lost many ' +\n              'of the benefits of server rendering. Instead, figure out ' +\n              'why the markup being generated is different on the client ' +\n              'or server.'\n            );\n          }\n        }\n      }\n\n      (require('./React').__DEV__ === true ? invariant(\n        container.nodeType !== DOC_NODE_TYPE,\n        'You\\'re trying to render a component to the document but ' +\n          'you didn\\'t use server rendering. We can\\'t do this ' +\n          'without using server rendering due to cross-browser quirks. ' +\n          'See renderComponentToString() for server rendering.'\n      ) : invariant(container.nodeType !== DOC_NODE_TYPE));\n\n      container.innerHTML = markup;\n    }\n  )\n};\n\nmodule.exports = ReactComponentBrowserEnvironment;\n"]},"metadata":{},"sourceType":"script"}