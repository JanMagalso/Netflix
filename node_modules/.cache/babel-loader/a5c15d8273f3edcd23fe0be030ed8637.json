{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMTextarea\n */\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\n\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\n\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\n\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\n\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\n\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar invariant = require(\"./invariant\");\n\nvar merge = require(\"./merge\");\n\nvar warning = require(\"./warning\"); // Store a reference to the <textarea> `ReactDOMComponent`.\n\n\nvar textarea = ReactDOM.textarea;\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\nvar ReactDOMTextarea = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMTextarea',\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n  getInitialState: function () {\n    var defaultValue = this.props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.\n\n    var children = this.props.children;\n\n    if (children != null) {\n      if (require('./React').__DEV__ === true) {\n        require('./React').__DEV__ === true ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : null;\n      }\n\n      require('./React').__DEV__ === true ? invariant(defaultValue == null, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(defaultValue == null);\n\n      if (Array.isArray(children)) {\n        require('./React').__DEV__ === true ? invariant(children.length <= 1, '<textarea> can only have at most one child.') : invariant(children.length <= 1);\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n\n    var value = LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      value: defaultValue\n    };\n  },\n  shouldComponentUpdate: function () {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n  render: function () {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n    var value = LinkedValueUtils.getValue(this);\n    require('./React').__DEV__ === true ? invariant(props.dangerouslySetInnerHTML == null, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(props.dangerouslySetInnerHTML == null);\n    props.defaultValue = null;\n    props.value = value != null ? value : this.state.value;\n    props.onChange = this._handleChange; // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n\n    return textarea(props, this.state.initialValue);\n  },\n  componentDidUpdate: function (prevProps, prevState, prevContext) {\n    var value = LinkedValueUtils.getValue(this);\n\n    if (value != null) {\n      var rootNode = this.getDOMNode(); // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n  _handleChange: function (event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange.call(this, event);\n      this._isChanging = false;\n    }\n\n    this.setState({\n      value: event.target.value\n    });\n    return returnValue;\n  }\n});\nmodule.exports = ReactDOMTextarea;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactDOMTextarea.js"],"names":["AutoFocusMixin","require","DOMPropertyOperations","LinkedValueUtils","ReactBrowserComponentMixin","ReactCompositeComponent","ReactDOM","invariant","merge","warning","textarea","ReactDOMTextarea","createClass","displayName","mixins","Mixin","getInitialState","defaultValue","props","children","__DEV__","Array","isArray","length","value","getValue","initialValue","shouldComponentUpdate","_isChanging","render","dangerouslySetInnerHTML","state","onChange","_handleChange","componentDidUpdate","prevProps","prevState","prevContext","rootNode","getDOMNode","setValueForProperty","event","returnValue","getOnChange","call","setState","target","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactDOMTextarea\n */\n\n\"use strict\";\n\nvar AutoFocusMixin = require(\"./AutoFocusMixin\");\nvar DOMPropertyOperations = require(\"./DOMPropertyOperations\");\nvar LinkedValueUtils = require(\"./LinkedValueUtils\");\nvar ReactBrowserComponentMixin = require(\"./ReactBrowserComponentMixin\");\nvar ReactCompositeComponent = require(\"./ReactCompositeComponent\");\nvar ReactDOM = require(\"./ReactDOM\");\n\nvar invariant = require(\"./invariant\");\nvar merge = require(\"./merge\");\n\nvar warning = require(\"./warning\");\n\n// Store a reference to the <textarea> `ReactDOMComponent`.\nvar textarea = ReactDOM.textarea;\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = ReactCompositeComponent.createClass({\n  displayName: 'ReactDOMTextarea',\n\n  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],\n\n  getInitialState: function() {\n    var defaultValue = this.props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = this.props.children;\n    if (children != null) {\n      if (require('./React').__DEV__ === true) {\n        (require('./React').__DEV__ === true ? warning(\n          false,\n          'Use the `defaultValue` or `value` props instead of setting ' +\n          'children on <textarea>.'\n        ) : null);\n      }\n      (require('./React').__DEV__ === true ? invariant(\n        defaultValue == null,\n        'If you supply `defaultValue` on a <textarea>, do not pass children.'\n      ) : invariant(defaultValue == null));\n      if (Array.isArray(children)) {\n        (require('./React').__DEV__ === true ? invariant(\n          children.length <= 1,\n          '<textarea> can only have at most one child.'\n        ) : invariant(children.length <= 1));\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(this);\n    return {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      value: defaultValue\n    };\n  },\n\n  shouldComponentUpdate: function() {\n    // Defer any updates to this component during the `onChange` handler.\n    return !this._isChanging;\n  },\n\n  render: function() {\n    // Clone `this.props` so we don't mutate the input.\n    var props = merge(this.props);\n    var value = LinkedValueUtils.getValue(this);\n\n    (require('./React').__DEV__ === true ? invariant(\n      props.dangerouslySetInnerHTML == null,\n      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'\n    ) : invariant(props.dangerouslySetInnerHTML == null));\n\n    props.defaultValue = null;\n    props.value = value != null ? value : this.state.value;\n    props.onChange = this._handleChange;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    return textarea(props, this.state.initialValue);\n  },\n\n  componentDidUpdate: function(prevProps, prevState, prevContext) {\n    var value = LinkedValueUtils.getValue(this);\n    if (value != null) {\n      var rootNode = this.getDOMNode();\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);\n    }\n  },\n\n  _handleChange: function(event) {\n    var returnValue;\n    var onChange = LinkedValueUtils.getOnChange(this);\n    if (onChange) {\n      this._isChanging = true;\n      returnValue = onChange.call(this, event);\n      this._isChanging = false;\n    }\n    this.setState({value: event.target.value});\n    return returnValue;\n  }\n\n});\n\nmodule.exports = ReactDOMTextarea;\n"]},"metadata":{},"sourceType":"script"}