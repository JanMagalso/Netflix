{"ast":null,"code":"/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPropTransferer\n */\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\n\nvar invariant = require(\"./invariant\");\n\nvar joinClasses = require(\"./joinClasses\");\n\nvar merge = require(\"./merge\");\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\n\n\nfunction createTransferStrategy(mergeStrategy) {\n  return function (props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\n\n\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n\n  /**\n   * Never transfer the `key` prop.\n   */\n  key: emptyFunction,\n\n  /**\n   * Never transfer the `ref` prop.\n   */\n  ref: emptyFunction,\n\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: createTransferStrategy(merge)\n};\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\n\nvar ReactPropTransferer = {\n  TransferStrategies: TransferStrategies,\n\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function (oldProps, newProps) {\n    var props = merge(oldProps);\n\n    for (var thisKey in newProps) {\n      if (!newProps.hasOwnProperty(thisKey)) {\n        continue;\n      }\n\n      var transferStrategy = TransferStrategies[thisKey];\n\n      if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n        transferStrategy(props, thisKey, newProps[thisKey]);\n      } else if (!props.hasOwnProperty(thisKey)) {\n        props[thisKey] = newProps[thisKey];\n      }\n    }\n\n    return props;\n  },\n\n  /**\n   * @lends {ReactPropTransferer.prototype}\n   */\n  Mixin: {\n    /**\n     * Transfer props from this component to a target component.\n     *\n     * Props that do not have an explicit transfer strategy will be transferred\n     * only if the target component does not already have the prop set.\n     *\n     * This is usually used to pass down props to a returned root component.\n     *\n     * @param {ReactComponent} component Component receiving the properties.\n     * @return {ReactComponent} The supplied `component`.\n     * @final\n     * @protected\n     */\n    transferPropsTo: function (component) {\n      require('./React').__DEV__ === true ? invariant(component._owner === this, '%s: You can\\'t call transferPropsTo() on a component that you ' + 'don\\'t own, %s. This usually means you are calling ' + 'transferPropsTo() on a component passed in as props or children.', this.constructor.displayName, component.constructor.displayName) : invariant(component._owner === this);\n      component.props = ReactPropTransferer.mergeProps(component.props, this.props);\n      return component;\n    }\n  }\n};\nmodule.exports = ReactPropTransferer;","map":{"version":3,"sources":["/home/dna-dev/Documents/react-web/node_modules/react-component/lib/ReactPropTransferer.js"],"names":["emptyFunction","require","invariant","joinClasses","merge","createTransferStrategy","mergeStrategy","props","key","value","hasOwnProperty","TransferStrategies","children","className","ref","style","ReactPropTransferer","mergeProps","oldProps","newProps","thisKey","transferStrategy","Mixin","transferPropsTo","component","__DEV__","_owner","constructor","displayName","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-2014 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @providesModule ReactPropTransferer\n */\n\n\"use strict\";\n\nvar emptyFunction = require(\"./emptyFunction\");\nvar invariant = require(\"./invariant\");\nvar joinClasses = require(\"./joinClasses\");\nvar merge = require(\"./merge\");\n\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\nfunction createTransferStrategy(mergeStrategy) {\n  return function(props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n  /**\n   * Never transfer the `key` prop.\n   */\n  key: emptyFunction,\n  /**\n   * Never transfer the `ref` prop.\n   */\n  ref: emptyFunction,\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: createTransferStrategy(merge)\n};\n\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\nvar ReactPropTransferer = {\n\n  TransferStrategies: TransferStrategies,\n\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function(oldProps, newProps) {\n    var props = merge(oldProps);\n\n    for (var thisKey in newProps) {\n      if (!newProps.hasOwnProperty(thisKey)) {\n        continue;\n      }\n\n      var transferStrategy = TransferStrategies[thisKey];\n\n      if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n        transferStrategy(props, thisKey, newProps[thisKey]);\n      } else if (!props.hasOwnProperty(thisKey)) {\n        props[thisKey] = newProps[thisKey];\n      }\n    }\n\n    return props;\n  },\n\n  /**\n   * @lends {ReactPropTransferer.prototype}\n   */\n  Mixin: {\n\n    /**\n     * Transfer props from this component to a target component.\n     *\n     * Props that do not have an explicit transfer strategy will be transferred\n     * only if the target component does not already have the prop set.\n     *\n     * This is usually used to pass down props to a returned root component.\n     *\n     * @param {ReactComponent} component Component receiving the properties.\n     * @return {ReactComponent} The supplied `component`.\n     * @final\n     * @protected\n     */\n    transferPropsTo: function(component) {\n      (require('./React').__DEV__ === true ? invariant(\n        component._owner === this,\n        '%s: You can\\'t call transferPropsTo() on a component that you ' +\n        'don\\'t own, %s. This usually means you are calling ' +\n        'transferPropsTo() on a component passed in as props or children.',\n        this.constructor.displayName,\n        component.constructor.displayName\n      ) : invariant(component._owner === this));\n\n      component.props = ReactPropTransferer.mergeProps(\n        component.props,\n        this.props\n      );\n\n      return component;\n    }\n\n  }\n};\n\nmodule.exports = ReactPropTransferer;\n"]},"metadata":{},"sourceType":"script"}